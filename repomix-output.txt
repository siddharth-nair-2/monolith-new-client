This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
app/
  (auth)/
    c/
      [id]/
        page.tsx
    chat/
      page.tsx
    dashboard/
      page-backup.tsx
      page.tsx
    documents/
      page.tsx
    focus/
      [id]/
        page.tsx
      page.tsx
    history/
      page.tsx
    library/
      [[...path]]/
        page.tsx
      drive/
        [connectionId]/
          [[...path]]/
            page.tsx
        page.tsx
    organization/
      page.tsx
    profile/
      page.tsx
    search/
      page.tsx
    settings/
      page.tsx
    team/
      page.tsx
    layout.tsx
  api/
    auth/
      change-email/
        route.ts
      change-password/
        route.ts
      check-domain/
        route.ts
      forgot-password/
        route.ts
      login/
        route.ts
      logout/
        route.ts
      me/
        route.ts
      refresh/
        route.ts
      reset-password/
        route.ts
      signup/
        route.ts
    chat/
      stream/
        route.ts
      route.ts
    conversations/
      [id]/
        messages/
          route.ts
        route.ts
      batch/
        archive/
          route.ts
        delete/
          route.ts
      route.ts
    documents/
      [id]/
        download/
          route.ts
        thumbnail/
          route.ts
        route.ts
      bulk/
        route.ts
      filter-options/
        route.ts
      route.ts
    focus-modes/
      [id]/
        documents/
          [documentId]/
            route.ts
          route.ts
        route.ts
      documents/
        available/
          route.ts
      icons/
        route.ts
      route.ts
    folders/
      [folderId]/
        documents/
          route.ts
        route.ts
      bulk/
        route.ts
      route.ts
    invites/
      [id]/
        resend/
          route.ts
        route.ts
      list/
        route.ts
      send/
        route.ts
      validate/
        route.ts
    onboarding/
      complete-step/
        route.ts
      skip-step/
        route.ts
      status/
        route.ts
    organizations/
      current/
        route.ts
    proxy/
      v1/
        connections/
          route.ts
        connectors/
          route.ts
        google-drive/
          browse/
            [connectionId]/
              route.ts
        oauth/
          authorize/
            google_drive/
              route.ts
          callback/
            google_drive/
              route.ts
        syncs/
          [syncId]/
            run/
              route.ts
            route.ts
          route.ts
    search/
      full/
        route.ts
      instant/
        route.ts
      suggestions/
        route.ts
    team/
      members/
        [id]/
          route.ts
        route.ts
      stats/
        route.ts
    upload/
      batch/
        route.ts
      task/
        [taskId]/
          route.ts
      route.ts
    users/
      account/
        route.ts
      avatar/
        route.ts
      profile/
        route.ts
    waitlist/
      route.ts
  check-domain/
    loading.tsx
    page.tsx
  forgot-password/
    page.tsx
  invite/
    loading.tsx
    page.tsx
  login/
    loading.tsx
    page.tsx
  oauth/
    callback/
      google_drive/
        page.tsx
  onboarding/
    first-integration/
      page.tsx
    invite-team/
      page.tsx
    page.tsx
  privacy-policy/
    page.tsx
  signup/
    loading.tsx
    page.tsx
  terms-of-service/
    page.tsx
  test-auth/
    page.tsx
  waitlist/
    page.tsx
  globals.css
  layout.tsx
  loading.tsx
  not-found.tsx
  page.tsx
hooks/
  use-mobile.tsx
  use-toast.ts
lib/
  api-client.ts
  auth-api-client.ts
  auth-context.tsx
  auth-usage-examples.md
  client-api.ts
  countries.ts
  integrations-context.tsx
  utils.ts
public/
  icons/
    integrations/
      google_drive.svg
      outlook.svg
      slack.svg
      teams.svg
    outlook.svg
    pdf-orig.svg
    pdf.svg
    pdf1.svg
    security.svg
    sharepoint.svg
    slack.svg
  placeholder-logo.svg
  placeholder.svg
styles/
  globals.css
.gitignore
.repomixignore
components.json
middleware.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json
vercel.json

================================================================
Files
================================================================

================
File: app/(auth)/c/[id]/page.tsx
================
"use client";

import { useState, useRef, useEffect, use } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { toast } from "sonner";
import { useRouter } from "next/navigation";
import {
  Send,
  Paperclip,
  Loader2,
  Copy,
  AlertCircle,
  ExternalLink,
  Bot,
  User,
  Search,
} from "lucide-react";
import { cn } from "@/lib/utils";
import Markdown from "markdown-to-jsx";
import Image from "next/image";

interface Citation {
  index: number;
  content: string;
  metadata?: {
    filename?: string;
    original_filename?: string;
    source?: string;
    page?: number;
    page_number?: number;
    [key: string]: any;
  };
  citationNumbers?: number[];
}

interface ChatMessage {
  id?: string;
  role: "user" | "assistant";
  content: string;
  citations?: Citation[];
  error?: string;
  timestamp: Date;
}

export default function ConversationPage({ params }: { params: Promise<{ id: string }> }) {
  const router = useRouter();
  const resolvedParams = use(params);
  const conversationId = resolvedParams.id;
  
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState("");
  const [isStreaming, setIsStreaming] = useState(false);
  const [hoveredCitation, setHoveredCitation] = useState<number | null>(null);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const abortControllerRef = useRef<AbortController | null>(null);
  const hasInitializedRef = useRef(false);

  // Handle initial load - only run once
  useEffect(() => {
    // Use ref to ensure this only runs once
    if (hasInitializedRef.current) return;
    hasInitializedRef.current = true;

    const initializeConversation = async () => {
      // Small delay to ensure sessionStorage is set from dashboard
      await new Promise(resolve => setTimeout(resolve, 10));
      
      // Check for initial message from dashboard
      const initialMessage = sessionStorage.getItem(`initial-message-${conversationId}`);
      
      if (initialMessage) {
        // New conversation from dashboard
        sessionStorage.removeItem(`initial-message-${conversationId}`);
        
        // Add user message
        const userMessage: ChatMessage = {
          role: "user",
          content: initialMessage,
          timestamp: new Date(),
        };
        
        // Add assistant placeholder
        const assistantMessage: ChatMessage = {
          role: "assistant",
          content: "",
          citations: [],
          timestamp: new Date(),
        };
        
        setMessages([userMessage, assistantMessage]);
        
        // Start streaming immediately
        handleStreamingResponse(initialMessage);
      } else {
        // Existing conversation - load from backend
        try {
          const response = await fetch(`/api/conversations/${conversationId}?include_messages=true`);
          if (response.ok) {
            const data = await response.json();
            if (data.messages && data.messages.length > 0) {
              const conversationMessages = data.messages.map((msg: any) => ({
                role: msg.role,
                content: msg.content,
                citations: msg.metadata?.citations || [],
                timestamp: new Date(msg.created_at),
              }));
              setMessages(conversationMessages);
            }
          } else if (response.status === 404) {
            router.push('/dashboard');
          }
        } catch (error) {
          console.error('Failed to load conversation:', error);
          toast.error('Failed to load conversation');
        }
      }
    };

    initializeConversation();
  }, [conversationId]);


  // Extract streaming logic into a separate function
  const handleStreamingResponse = async (query: string) => {
    setIsStreaming(true);

    try {
      abortControllerRef.current = new AbortController();

      const response = await fetch("/api/chat/stream", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          query,
          conversation_id: conversationId,
          conversation_history: null,
          limit: 15,
          focus_mode_id: null,
        }),
        signal: abortControllerRef.current.signal,
      });

      if (!response.ok) {
        throw new Error(`Chat failed: ${response.statusText}`);
      }

      if (!response.body) {
        throw new Error("No response body");
      }

      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      let buffer = "";

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        buffer += decoder.decode(value, { stream: true });

        let boundary = buffer.lastIndexOf("\n\n");
        if (boundary !== -1) {
          const complete = buffer.substring(0, boundary);
          buffer = buffer.substring(boundary + 2);

          const lines = complete.split("\n");
          for (const line of lines) {
            if (!line.trim()) continue;

            if (line.startsWith("data: ")) {
              const data = line.substring(6);
              if (data === "[DONE]") {
                setIsStreaming(false);
                continue;
              }

              try {
                const parsed = JSON.parse(data);

                setMessages((prev) => {
                  const newMessages = [...prev];
                  const lastIndex = newMessages.length - 1;
                  const lastMessage = newMessages[lastIndex];

                  if (lastMessage && lastMessage.role === "assistant") {
                    if (parsed.type === "token" && parsed.content !== null && parsed.content !== undefined) {
                      newMessages[lastIndex] = {
                        ...lastMessage,
                        content: lastMessage.content + parsed.content,
                      };
                    } else if (parsed.type === "citations") {
                      newMessages[lastIndex] = {
                        ...lastMessage,
                        citations: parsed.citations,
                      };
                    } else if (parsed.type === "error") {
                      newMessages[lastIndex] = {
                        ...lastMessage,
                        error: parsed.error,
                      };
                      toast.error(parsed.error);
                    } else if (parsed.type === "done") {
                      setIsStreaming(false);
                    }
                  }

                  return newMessages;
                });
              } catch (e) {
                console.error("Failed to parse SSE data:", e, data);
              }
            }
          }
        }
      }

      if (buffer.trim()) {
        const lines = buffer.split("\n");
        for (const line of lines) {
          if (line.startsWith("data: ")) {
            const data = line.substring(6);
            try {
              const parsed = JSON.parse(data);
              if (parsed.type === "done") {
                setIsStreaming(false);
              }
            } catch (e) {
              // Ignore parsing errors for incomplete data
            }
          }
        }
      }
    } catch (error: any) {
      if (error.name === "AbortError") {
        // Stream was aborted by user
      } else {
        console.error("Chat error:", error);
        setMessages((prev) => {
          const newMessages = [...prev];
          const lastMessage = newMessages[newMessages.length - 1];
          if (lastMessage && lastMessage.role === "assistant") {
            lastMessage.error = error.message || "Failed to get response";
          }
          return newMessages;
        });
        toast.error(error.message || "Failed to get response");
      }
    } finally {
      setIsStreaming(false);
      abortControllerRef.current = null;
    }
  };

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    if (scrollAreaRef.current) {
      const scrollContainer = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');
      if (scrollContainer) {
        scrollContainer.scrollTop = scrollContainer.scrollHeight;
      }
    }
  }, [messages]);

  // Auto-resize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.style.height = Math.min(textareaRef.current.scrollHeight, 120) + "px";
    }
  }, [input]);

  // Function to get file type icon based on filename extension
  const getFileTypeIcon = (filename: string): string => {
    const extension = filename.toLowerCase().split(".").pop() || "";

    const iconMap: Record<string, string> = {
      // Documents
      pdf: "/icons/filetypes/pdf.png",
      doc: "/icons/filetypes/word.png",
      docx: "/icons/filetypes/word.png",
      rtf: "/icons/filetypes/file.png",
      txt: "/icons/filetypes/file.png",
      md: "/icons/filetypes/file.png",
      // Spreadsheets
      xls: "/icons/filetypes/excel.png",
      xlsx: "/icons/filetypes/excel.png",
      csv: "/icons/filetypes/excel.png",
      // Presentations
      ppt: "/icons/filetypes/ppt.png",
      pptx: "/icons/filetypes/ppt.png",
      // Images
      jpg: "/icons/filetypes/file.png",
      jpeg: "/icons/filetypes/file.png",
      png: "/icons/filetypes/file.png",
      // Media
      mp3: "/icons/filetypes/file.png",
      mp4: "/icons/filetypes/file.png",
      avi: "/icons/filetypes/file.png",
      // Code/Web
      css: "/icons/filetypes/file.png",
      js: "/icons/filetypes/file.png",
      xml: "/icons/filetypes/file.png",
      // Other
      dwg: "/icons/filetypes/file.png",
      iso: "/icons/filetypes/file.png",
      fla: "/icons/filetypes/file.png",
    };

    return iconMap[extension] || "/icons/filetypes/file.png";
  };

  // Function to deduplicate citations by document and collect citation numbers
  const getUniqueCitations = (citations: Citation[]) => {
    const uniqueMap = new Map();

    citations.forEach((citation) => {
      const filename =
        citation.metadata?.original_filename ||
        citation.metadata?.filename ||
        `Source ${citation.index}`;
      const key = filename;

      if (!uniqueMap.has(key)) {
        uniqueMap.set(key, {
          ...citation,
          citationNumbers: [citation.index],
        });
      } else {
        uniqueMap.get(key).citationNumbers.push(citation.index);
      }
    });

    return Array.from(uniqueMap.values());
  };

  // Simple function to render content with clean interactive citations
  const renderContentWithCitations = (content: string, citations: Citation[]) => {
    if (!citations || citations.length === 0) {
      return (
        <Markdown
          options={{
            overrides: {
              h1: {
                component: "h1",
                props: {
                  className: "text-lg font-serif font-semibold mb-2 text-gray-900",
                },
              },
              h2: {
                component: "h2",
                props: {
                  className: "text-base font-serif font-semibold mb-2 mt-3 text-gray-900",
                },
              },
              h3: {
                component: "h3",
                props: {
                  className: "text-sm font-semibold mb-1 mt-2 text-gray-900",
                },
              },
              p: {
                component: "p",
                props: {
                  className: "mb-2 leading-relaxed text-gray-800 last:mb-0 text-sm",
                },
              },
              ul: {
                component: "ul",
                props: {
                  className: "list-disc pl-4 mb-2 space-y-1 text-sm",
                },
              },
              ol: {
                component: "ol",
                props: {
                  className: "list-decimal pl-4 mb-2 space-y-1 text-sm",
                },
              },
              li: {
                component: "li",
                props: {
                  className: "text-gray-800 leading-relaxed text-sm",
                },
              },
              strong: {
                component: "strong",
                props: {
                  className: "font-semibold text-gray-900",
                },
              },
              em: {
                component: "em",
                props: {
                  className: "italic text-gray-800",
                },
              },
              code: {
                component: "code",
                props: {
                  className: "bg-gray-100 px-1 py-0.5 rounded text-xs font-mono text-gray-800",
                },
              },
              pre: {
                component: "pre",
                props: {
                  className: "bg-gray-50 border border-gray-200 rounded-lg p-3 mb-2 overflow-x-auto text-xs",
                },
              },
              blockquote: {
                component: "blockquote",
                props: {
                  className: "border-l-4 border-[#A3BC02] pl-3 italic text-gray-700 my-2 text-sm",
                },
              },
              a: {
                component: "a",
                props: {
                  className: "text-[#A3BC02] hover:text-[#8BA000] underline transition-colors text-sm",
                  target: "_blank",
                  rel: "noopener noreferrer",
                },
              },
              table: {
                component: "table",
                props: {
                  className: "w-full border-collapse border border-gray-200 mb-2 text-xs",
                },
              },
              thead: {
                component: "thead",
                props: {
                  className: "bg-gray-50",
                },
              },
              th: {
                component: "th",
                props: {
                  className: "border border-gray-200 px-2 py-1 text-left font-semibold text-gray-900 text-xs",
                },
              },
              td: {
                component: "td",
                props: {
                  className: "border border-gray-200 px-2 py-1 text-gray-800 text-xs",
                },
              },
              hr: {
                component: "hr",
                props: {
                  className: "border-gray-200 my-3",
                },
              },
            },
          }}
        >
          {content}
        </Markdown>
      );
    }

    // Process content to make citations clickable while keeping them minimal
    const processedContent = content.replace(/\[(\d+)\]/g, (match, number) => {
      const citationIndex = parseInt(number);
      const citation = citations.find(c => c.index === citationIndex);
      if (citation) {
        return `<span class="citation-ref" data-citation="${citationIndex}">${match}</span>`;
      }
      return match;
    });

    return (
      <div>
        <style>{`
          .citation-ref {
            color: #A3BC02;
            cursor: pointer;
            text-decoration: none;
            font-weight: 500;
            transition: color 0.2s ease;
          }
          .citation-ref:hover {
            color: #8BA000;
            text-decoration: underline;
          }
        `}</style>
        <Markdown
          options={{
            overrides: {
              span: {
                component: ({ className, children, ...props }: any) => {
                  if (className === "citation-ref") {
                    const citationNumber = parseInt(props["data-citation"]);
                    return (
                      <span
                        className="citation-ref"
                        onMouseEnter={() => setHoveredCitation(citationNumber)}
                        onMouseLeave={() => setHoveredCitation(null)}
                        onClick={() => {
                          const citationElement = document.getElementById(`citation-${citationNumber}`);
                          if (citationElement) {
                            citationElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                          }
                        }}
                      >
                        {children}
                      </span>
                    );
                  }
                  return <span className={className} {...props}>{children}</span>;
                },
              },
              h1: {
                component: "h1",
                props: {
                  className: "text-lg font-serif font-semibold mb-2 text-gray-900",
                },
              },
              h2: {
                component: "h2",
                props: {
                  className: "text-base font-serif font-semibold mb-2 mt-3 text-gray-900",
                },
              },
              h3: {
                component: "h3",
                props: {
                  className: "text-sm font-semibold mb-1 mt-2 text-gray-900",
                },
              },
              p: {
                component: "p",
                props: {
                  className: "mb-2 leading-relaxed text-gray-800 last:mb-0 text-sm",
                },
              },
              ul: {
                component: "ul",
                props: {
                  className: "list-disc pl-4 mb-2 space-y-1 text-sm",
                },
              },
              ol: {
                component: "ol",
                props: {
                  className: "list-decimal pl-4 mb-2 space-y-1 text-sm",
                },
              },
              li: {
                component: "li",
                props: {
                  className: "text-gray-800 leading-relaxed text-sm",
                },
              },
              strong: {
                component: "strong",
                props: {
                  className: "font-semibold text-gray-900",
                },
              },
              em: {
                component: "em",
                props: {
                  className: "italic text-gray-800",
                },
              },
              code: {
                component: "code",
                props: {
                  className: "bg-gray-100 px-1 py-0.5 rounded text-xs font-mono text-gray-800",
                },
              },
              pre: {
                component: "pre",
                props: {
                  className: "bg-gray-50 border border-gray-200 rounded-lg p-3 mb-2 overflow-x-auto text-xs",
                },
              },
              blockquote: {
                component: "blockquote",
                props: {
                  className: "border-l-4 border-[#A3BC02] pl-3 italic text-gray-700 my-2 text-sm",
                },
              },
              a: {
                component: "a",
                props: {
                  className: "text-[#A3BC02] hover:text-[#8BA000] underline transition-colors text-sm",
                  target: "_blank",
                  rel: "noopener noreferrer",
                },
              },
              table: {
                component: "table",
                props: {
                  className: "w-full border-collapse border border-gray-200 mb-2 text-xs",
                },
              },
              thead: {
                component: "thead",
                props: {
                  className: "bg-gray-50",
                },
              },
              th: {
                component: "th",
                props: {
                  className: "border border-gray-200 px-2 py-1 text-left font-semibold text-gray-900 text-xs",
                },
              },
              td: {
                component: "td",
                props: {
                  className: "border border-gray-200 px-2 py-1 text-gray-800 text-xs",
                },
              },
              hr: {
                component: "hr",
                props: {
                  className: "border-gray-200 my-3",
                },
              },
            },
          }}
        >
          {processedContent}
        </Markdown>
      </div>
    );
  };

  const handleSubmit = async () => {
    const query = input.trim();
    if (!query || isStreaming) return;

    // Add user message
    const userMessage: ChatMessage = {
      role: "user",
      content: query,
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, userMessage]);
    setInput("");

    // Add assistant message placeholder
    const assistantMessage: ChatMessage = {
      role: "assistant",
      content: "",
      citations: [],
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, assistantMessage]);

    // Use the same streaming function
    await handleStreamingResponse(query);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSubmit();
    }
  };

  const handleCopy = (content: string) => {
    navigator.clipboard.writeText(content);
    toast.success("Copied to clipboard");
  };

  const stopStreaming = () => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
      setIsStreaming(false);
    }
  };


  return (
    <div className="min-h-0 flex-1 flex flex-col">
      {/* Conversation Area */}
      <ScrollArea ref={scrollAreaRef} className="flex-1 px-4 md:px-8 lg:px-12">
        <div className="max-w-4xl mx-auto py-6">
          <AnimatePresence>
            {messages.map((message, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0 }}
                transition={{ duration: 0.2 }}
                className={cn(
                  "mb-6 flex",
                  message.role === "user" ? "justify-end" : "justify-start"
                )}
              >
                <div className={cn(
                  "flex gap-3 max-w-[85%]",
                  message.role === "user" ? "flex-row-reverse" : "flex-row"
                )}>
                  {/* Avatar */}
                  <div className="flex-shrink-0">
                    {message.role === "assistant" ? (
                      <div className="w-8 h-8 bg-[#A3BC02]/15 rounded-full flex items-center justify-center">
                        <Bot className="w-4 h-4 text-[#A3BC02]" />
                      </div>
                    ) : (
                      <div className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center">
                        <User className="w-4 h-4 text-gray-600" />
                      </div>
                    )}
                  </div>

                  {/* Message Content */}
                  <div className="flex-1">
                    <div
                      className={cn(
                        "rounded-2xl px-4 py-3 shadow-sm",
                        message.role === "user"
                          ? "bg-[#97A43C] text-white"
                          : "bg-[#F3F5E5]"
                      )}
                    >
                      {/* Message Text */}
                      <div className="max-w-none">
                        {!message.content && message.role === "assistant" && isStreaming ? (
                          <div className="space-y-2">
                            <div className="flex items-center gap-2 text-gray-500">
                              <div className="flex gap-1">
                                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                              </div>
                              <span className="text-sm">Thinking...</span>
                            </div>
                          </div>
                        ) : message.role === "assistant" ? (
                          <div className="markdown-content">
                            {renderContentWithCitations(
                              message.content,
                              message.citations || []
                            )}
                          </div>
                        ) : (
                          <p className="whitespace-pre-wrap mb-0 leading-relaxed text-white text-sm">
                            {message.content}
                          </p>
                        )}
                      </div>

                      {/* Error state */}
                      {message.error && (
                        <div className="mt-3 flex items-center gap-2 text-red-600 bg-red-50 px-3 py-2 rounded-lg">
                          <AlertCircle className="w-4 h-4" />
                          <span className="text-sm">{message.error}</span>
                        </div>
                      )}

                      {/* Citations */}
                      {message.citations && message.citations.length > 0 && (() => {
                        const uniqueCitations = getUniqueCitations(message.citations);
                        return (
                          <div className="mt-3 space-y-2">
                            {uniqueCitations.map((citation, idx) => {
                              const filename =
                                citation.metadata?.original_filename ||
                                citation.metadata?.filename ||
                                `Source ${citation.index}`;
                              const isHighlighted = citation.citationNumbers?.some(num => hoveredCitation === num);
                              
                              return (
                                <div
                                  key={idx}
                                  id={citation.citationNumbers?.[0] ? `citation-${citation.citationNumbers[0]}` : undefined}
                                  className={`flex items-center gap-3 p-3 rounded-lg transition-colors cursor-pointer ${
                                    isHighlighted 
                                      ? 'bg-[#A3BC02]/5 border border-[#A3BC02]/20' 
                                      : 'bg-white hover:bg-gray-50 border border-transparent'
                                  }`}
                                >
                                  <Image
                                    src={getFileTypeIcon(filename)}
                                    alt="File type"
                                    width={16}
                                    height={16}
                                    className="flex-shrink-0"
                                  />
                                  <span className="text-sm text-gray-600 truncate flex-1">
                                    {filename}
                                  </span>
                                  <ExternalLink className="w-3 h-3 text-gray-400 flex-shrink-0" />
                                </div>
                              );
                            })}
                            {/* Horizontal line below citations */}
                            <div className="border-t border-gray-200 mt-3"></div>
                          </div>
                        );
                      })()}

                      {/* Actions for assistant messages */}
                      {message.role === "assistant" && message.content && !message.error && (
                        <div className="mt-0 py-1">
                          <Button
                            size="sm"
                            variant="ghost"
                            className="h-7 text-xs text-gray-500 hover:text-gray-700 hover:bg-gray-100"
                            onClick={() => handleCopy(message.content)}
                          >
                            <Copy className="w-3 h-3 mr-1" />
                            Copy
                          </Button>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </motion.div>
            ))}
          </AnimatePresence>
        </div>
      </ScrollArea>

      {/* Bottom floating input */}
      <div className="fixed bottom-6 left-6 right-6 z-50">
        <div className="w-full max-w-2xl mx-auto">
          <div className="flex items-center gap-4">
            <div className="relative flex-1 drop-shadow-lg">
              <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-custom-dark-green" />
              <Input
                type="text"
                placeholder="Ask or Find"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyDown={handleKeyDown}
                className={`text-custom-dark-green pl-12 py-4 text-lg rounded-3xl bg-[#F0F0F0] focus:bg-white border-0 outline-none focus:border-0 focus:outline-none focus:ring-0 focus:shadow-[inset_0_0_15px_rgba(163,188,1,0.2),0_4px_4px_0_rgba(163,188,1,1)] transition-shadow duration-200 ${
                  input.trim() ? "pr-12" : "pr-4"
                }`}
                disabled={isStreaming}
              />

              {input.trim() && (
                <motion.button
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 0.8 }}
                  transition={{ duration: 0.15 }}
                  onClick={handleSubmit}
                  className="absolute right-3 top-2 w-6 h-6  hover:bg-[#A3BC02] hover:text-white border border-[#A3BC02] shadow-[inset_0_0_15px_rgba(163,188,1,0.2)] text-custom-dark-green rounded-full flex items-center justify-center transition-colors duration-200"
                >
                  {isStreaming ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <Send className="w-4 h-4" />
                  )}
                </motion.button>
              )}
            </div>

            <Button
              size="default"
              variant="outline"
              className="rounded-full w-10 h-10 bg-[#F0F0F0] hover:border-[#A3BC02] hover:bg-[#A3BC02]/10 drop-shadow-lg"
            >
              <Paperclip className="w-5 h-5 text-gray-600" strokeWidth={2.2} />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: app/(auth)/chat/page.tsx
================
"use client";

import { useState, useRef, useEffect } from "react";
import { useSearchParams } from "next/navigation";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { toast } from "sonner";
import {
  Send,
  Loader2,
  FileText,
  ExternalLink,
  Copy,
  RotateCw,
  MessageSquare,
  Bot,
  User,
  Sparkles,
  AlertCircle,
  ChevronDown,
  PlusCircle,
} from "lucide-react";
import { cn } from "@/lib/utils";
import Markdown from "markdown-to-jsx";

interface Citation {
  index: number;
  content: string;
  metadata?: {
    filename?: string;
    source?: string;
    page?: number;
    [key: string]: any;
  };
}

interface ChatMessage {
  id?: string;
  role: "user" | "assistant";
  content: string;
  citations?: Citation[];
  error?: string;
  timestamp: Date;
}


export default function ChatPage() {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isStreaming, setIsStreaming] = useState(false);
  const [currentConversationId, setCurrentConversationId] = useState<string | null>(null);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const abortControllerRef = useRef<AbortController | null>(null);
  const searchParams = useSearchParams();

  // Load conversation from URL params on mount
  useEffect(() => {
    const conversationId = searchParams.get('conversation');
    if (conversationId) {
      loadConversation(conversationId);
    }
  }, [searchParams]);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    if (scrollAreaRef.current) {
      const scrollContainer = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');
      if (scrollContainer) {
        scrollContainer.scrollTop = scrollContainer.scrollHeight;
      }
    }
  }, [messages]);

  // Auto-resize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.style.height = Math.min(textareaRef.current.scrollHeight, 120) + "px";
    }
  }, [input]);

  const loadConversation = async (conversationId: string) => {
    try {
      const response = await fetch(`/api/conversations/${conversationId}?include_messages=true`);
      if (response.ok) {
        const data = await response.json();
        setCurrentConversationId(conversationId);

        // Convert backend messages to frontend format
        const formattedMessages: ChatMessage[] = (data.messages || []).map((msg: any) => ({
          id: msg.id,
          role: msg.role,
          content: msg.content,
          citations: msg.metadata?.citations || [],
          timestamp: new Date(msg.created_at),
        }));

        setMessages(formattedMessages);
      }
    } catch (error) {
      console.error('Failed to load conversation:', error);
      toast.error('Failed to load conversation');
    }
  };

  const startNewConversation = () => {
    setMessages([]);
    setCurrentConversationId(null);
    // Clear URL params
    window.history.replaceState({}, '', '/chat');
  };

  const handleSubmit = async () => {
    const query = input.trim();
    if (!query || isLoading || isStreaming) return;

    // Add user message
    const userMessage: ChatMessage = {
      role: "user",
      content: query,
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, userMessage]);
    setInput("");
    setIsStreaming(true);

    // Create assistant message placeholder
    const assistantMessage: ChatMessage = {
      role: "assistant",
      content: "",
      citations: [],
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, assistantMessage]);

    try {
      // Create abort controller for cancellation
      abortControllerRef.current = new AbortController();

      const response = await fetch("/api/chat/stream", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          query,
          conversation_id: currentConversationId,
          conversation_history: currentConversationId ? null : messages.filter((m) => !m.error).map((m) => ({
            role: m.role,
            content: m.content,
          })),
        }),
        signal: abortControllerRef.current.signal,
      });

      if (!response.ok) {
        throw new Error(`Chat failed: ${response.statusText}`);
      }

      if (!response.body) {
        throw new Error("No response body");
      }

      // Read the stream using a simple approach
      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      let buffer = "";

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        // Decode chunk and add to buffer
        buffer += decoder.decode(value, { stream: true });

        // Process complete messages (ending with \n\n)
        let boundary = buffer.lastIndexOf("\n\n");
        if (boundary !== -1) {
          const complete = buffer.substring(0, boundary);
          buffer = buffer.substring(boundary + 2);

          // Process each line
          const lines = complete.split("\n");
          for (const line of lines) {
            if (!line.trim()) continue;

            if (line.startsWith("data: ")) {
              const data = line.substring(6);
              if (data === "[DONE]") {
                setIsStreaming(false);
                continue;
              }

              try {
                const parsed = JSON.parse(data);

                // Update the last assistant message
                setMessages((prev) => {
                  const newMessages = [...prev];
                  const lastIndex = newMessages.length - 1;
                  const lastMessage = newMessages[lastIndex];

                  if (lastMessage && lastMessage.role === "assistant") {
                    if (parsed.type === "token" && parsed.content !== null && parsed.content !== undefined) {
                      // Create a new message object to ensure React detects the change
                      newMessages[lastIndex] = {
                        ...lastMessage,
                        content: lastMessage.content + parsed.content,
                      };
                    } else if (parsed.type === "citations") {
                      newMessages[lastIndex] = {
                        ...lastMessage,
                        citations: parsed.citations,
                      };
                    } else if (parsed.type === "error") {
                      newMessages[lastIndex] = {
                        ...lastMessage,
                        error: parsed.error,
                      };
                      toast.error(parsed.error);
                    } else if (parsed.type === "done") {
                      setIsStreaming(false);
                      // Update conversation ID if this was a new conversation
                      if (parsed.conversation_id && !currentConversationId) {
                        setCurrentConversationId(parsed.conversation_id);
                      }
                    }
                  }

                  return newMessages;
                });
              } catch (e) {
                console.error("Failed to parse SSE data:", e, data);
              }
            }
          }
        }
      }

      // Process any remaining data in buffer
      if (buffer.trim()) {
        const lines = buffer.split("\n");
        for (const line of lines) {
          if (line.startsWith("data: ")) {
            const data = line.substring(6);
            try {
              const parsed = JSON.parse(data);
              if (parsed.type === "done") {
                setIsStreaming(false);
              }
            } catch (e) {
              // Ignore parsing errors for incomplete data
            }
          }
        }
      }
    } catch (error: any) {
      if (error.name === "AbortError") {
        // Stream was aborted by user
      } else {
        console.error("Chat error:", error);
        setMessages((prev) => {
          const newMessages = [...prev];
          const lastMessage = newMessages[newMessages.length - 1];
          lastMessage.error = error.message || "Failed to get response";
          return newMessages;
        });
        toast.error(error.message || "Failed to get response");
      }
    } finally {
      setIsStreaming(false);
      abortControllerRef.current = null;
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSubmit();
    }
  };

  const handleCopy = (content: string) => {
    navigator.clipboard.writeText(content);
    toast.success("Copied to clipboard");
  };

  const handleRetry = () => {
    if (messages.length > 0) {
      const lastUserMessage = [...messages].reverse().find((m) => m.role === "user");
      if (lastUserMessage) {
        setInput(lastUserMessage.content);
        // Remove the last assistant message if it had an error
        const lastMessage = messages[messages.length - 1];
        if (lastMessage.role === "assistant" && lastMessage.error) {
          setMessages((prev) => prev.slice(0, -1));
        }
      }
    }
  };

  const stopStreaming = () => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
      setIsStreaming(false);
    }
  };

  return (
    <div className="min-h-0 flex-1 flex flex-col bg-gray-50/30">
      {/* Header */}
      <div className="flex-shrink-0 bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-9 h-9 bg-[#A3BC02]/15 rounded-full flex items-center justify-center">
              <Bot className="w-5 h-5 text-[#A3BC02]" />
            </div>
            <div>
              <h1 className="text-lg font-semibold text-gray-900 font-serif">Chat with Monolith</h1>
              <p className="text-sm text-gray-500">Ask questions about your documents</p>
            </div>
          </div>
          {messages.length > 0 && (
            <Button
              variant="ghost"
              size="sm"
              onClick={startNewConversation}
              className="text-gray-500 hover:text-gray-700 hover:bg-gray-100"
            >
              <PlusCircle className="w-4 h-4 mr-2" />
              New chat
            </Button>
          )}
        </div>
      </div>

      {/* Messages Area */}
      <ScrollArea ref={scrollAreaRef} className="flex-1 px-4 md:px-8 lg:px-12">
        {messages.length === 0 ? (
          <div className="flex items-center justify-center h-full py-16">
            <div className="text-center max-w-lg">
              <div className="mx-auto w-20 h-20 bg-[#A3BC02]/10 rounded-full flex items-center justify-center mb-6">
                <MessageSquare className="w-10 h-10 text-[#A3BC02]" />
              </div>
              <h2 className="text-xl font-serif font-semibold mb-3 text-gray-900">Start a conversation</h2>
              <p className="text-gray-600 mb-8 leading-relaxed">
                Ask questions about your documents and get intelligent answers with source citations.
              </p>
              <div className="grid gap-3 text-left">
                {[
                  "What are the key insights from recent documents?",
                  "Summarize the main themes across all documents",
                  "Find information about budget planning"
                ].map((suggestion, index) => (
                  <button
                    key={index}
                    onClick={() => setInput(suggestion)}
                    className="group p-4 text-sm bg-white border border-gray-200 rounded-xl hover:border-[#A3BC02]/30 hover:bg-[#A3BC02]/5 transition-all duration-200 text-left"
                  >
                    <div className="flex items-center">
                      <Sparkles className="w-4 h-4 mr-3 text-[#A3BC02] group-hover:text-[#8BA000]" />
                      <span className="text-gray-700 group-hover:text-gray-900">{suggestion}</span>
                    </div>
                  </button>
                ))}
              </div>
            </div>
          </div>
        ) : (
          <div className="max-w-4xl mx-auto py-6">
            <AnimatePresence>
              {messages.map((message, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.2 }}
                  className={cn(
                    "mb-6 flex",
                    message.role === "user" ? "justify-end" : "justify-start"
                  )}
                >
                  <div className={cn(
                    "flex gap-3 max-w-[85%]",
                    message.role === "user" ? "flex-row-reverse" : "flex-row"
                  )}>
                    {/* Avatar */}
                    <div className="flex-shrink-0">
                      {message.role === "assistant" ? (
                        <div className="w-8 h-8 bg-[#A3BC02]/15 rounded-full flex items-center justify-center">
                          <Bot className="w-4 h-4 text-[#A3BC02]" />
                        </div>
                      ) : (
                        <div className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center">
                          <User className="w-4 h-4 text-gray-600" />
                        </div>
                      )}
                    </div>

                    {/* Message Content */}
                    <div className="flex-1">
                      <div
                        className={cn(
                          "rounded-2xl px-4 py-3 shadow-sm",
                          message.role === "user"
                            ? "bg-[#3E4128] text-white"
                            : "bg-white border border-gray-200"
                        )}
                      >
                        {/* Message Text */}
                        <div className="max-w-none">
                          {!message.content && message.role === "assistant" && isStreaming ? (
                            <div className="space-y-2">
                              <div className="flex items-center gap-2 text-gray-500">
                                <div className="flex gap-1">
                                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                                </div>
                                <span className="text-sm">Thinking...</span>
                              </div>
                            </div>
                          ) : message.role === "assistant" ? (
                            <div className="markdown-content">
                              <Markdown
                                options={{
                                  overrides: {
                                    h1: {
                                      component: 'h1',
                                      props: {
                                        className: 'text-lg font-serif font-semibold mb-2 text-gray-900'
                                      }
                                    },
                                    h2: {
                                      component: 'h2',
                                      props: {
                                        className: 'text-base font-serif font-semibold mb-2 mt-3 text-gray-900'
                                      }
                                    },
                                    h3: {
                                      component: 'h3',
                                      props: {
                                        className: 'text-sm font-semibold mb-1 mt-2 text-gray-900'
                                      }
                                    },
                                    p: {
                                      component: 'p',
                                      props: {
                                        className: 'mb-2 leading-relaxed text-gray-800 last:mb-0 text-sm'
                                      }
                                    },
                                    ul: {
                                      component: 'ul',
                                      props: {
                                        className: 'list-disc pl-4 mb-2 space-y-1 text-sm'
                                      }
                                    },
                                    ol: {
                                      component: 'ol',
                                      props: {
                                        className: 'list-decimal pl-4 mb-2 space-y-1 text-sm'
                                      }
                                    },
                                    li: {
                                      component: 'li',
                                      props: {
                                        className: 'text-gray-800 leading-relaxed text-sm'
                                      }
                                    },
                                    strong: {
                                      component: 'strong',
                                      props: {
                                        className: 'font-semibold text-gray-900'
                                      }
                                    },
                                    em: {
                                      component: 'em',
                                      props: {
                                        className: 'italic text-gray-800'
                                      }
                                    },
                                    code: {
                                      component: 'code',
                                      props: {
                                        className: 'bg-gray-100 px-1 py-0.5 rounded text-xs font-mono text-gray-800'
                                      }
                                    },
                                    pre: {
                                      component: 'pre',
                                      props: {
                                        className: 'bg-gray-50 border border-gray-200 rounded-lg p-3 mb-2 overflow-x-auto text-xs'
                                      }
                                    },
                                    blockquote: {
                                      component: 'blockquote',
                                      props: {
                                        className: 'border-l-4 border-[#A3BC02] pl-3 italic text-gray-700 my-2 text-sm'
                                      }
                                    },
                                    a: {
                                      component: 'a',
                                      props: {
                                        className: 'text-[#A3BC02] hover:text-[#8BA000] underline transition-colors text-sm',
                                        target: '_blank',
                                        rel: 'noopener noreferrer'
                                      }
                                    },
                                    table: {
                                      component: 'table',
                                      props: {
                                        className: 'w-full border-collapse border border-gray-200 mb-2 text-xs'
                                      }
                                    },
                                    thead: {
                                      component: 'thead',
                                      props: {
                                        className: 'bg-gray-50'
                                      }
                                    },
                                    th: {
                                      component: 'th',
                                      props: {
                                        className: 'border border-gray-200 px-2 py-1 text-left font-semibold text-gray-900 text-xs'
                                      }
                                    },
                                    td: {
                                      component: 'td',
                                      props: {
                                        className: 'border border-gray-200 px-2 py-1 text-gray-800 text-xs'
                                      }
                                    },
                                    hr: {
                                      component: 'hr',
                                      props: {
                                        className: 'border-gray-200 my-3'
                                      }
                                    }
                                  }
                                }}
                              >
                                {message.content}
                              </Markdown>
                            </div>
                          ) : (
                            <p className="whitespace-pre-wrap mb-0 leading-relaxed text-white">
                              {message.content}
                            </p>
                          )}
                        </div>

                        {/* Error state */}
                        {message.error && (
                          <div className="mt-3 flex items-center gap-2 text-red-600 bg-red-50 px-3 py-2 rounded-lg">
                            <AlertCircle className="w-4 h-4" />
                            <span className="text-sm">{message.error}</span>
                          </div>
                        )}

                        {/* Citations */}
                        {message.citations && message.citations.length > 0 && (
                          <div className="mt-4 pt-3 border-t border-gray-100">
                            <div className="text-xs font-medium text-gray-500 uppercase tracking-wider mb-3">
                              Sources
                            </div>
                            <div className="space-y-2">
                              {message.citations.map((citation, idx) => (
                                <div
                                  key={idx}
                                  className="p-3 bg-gray-50 rounded-lg border border-gray-100 hover:bg-gray-100 transition-colors cursor-pointer"
                                >
                                  <div className="flex items-start justify-between gap-2">
                                    <div className="flex-1 min-w-0">
                                      <div className="flex items-center gap-2 mb-1">
                                        <FileText className="w-3 h-3 text-gray-500 flex-shrink-0" />
                                        <span className="font-medium text-gray-800 text-sm truncate">
                                          {citation.metadata?.filename || `Source ${citation.index}`}
                                        </span>
                                        {citation.metadata?.page && (
                                          <Badge variant="secondary" className="text-xs">
                                            Page {citation.metadata.page}
                                          </Badge>
                                        )}
                                      </div>
                                      <p className="text-gray-600 text-xs line-clamp-2 leading-relaxed">
                                        {citation.content}
                                      </p>
                                    </div>
                                    <Button
                                      size="icon"
                                      variant="ghost"
                                      className="h-6 w-6 text-gray-400 hover:text-gray-600 hover:bg-gray-200"
                                      onClick={() => {
                                        // TODO: Open document viewer
                                        toast.info("Document viewer coming soon");
                                      }}
                                    >
                                      <ExternalLink className="w-3 h-3" />
                                    </Button>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}

                        {/* Actions for assistant messages */}
                        {message.role === "assistant" && message.content && !message.error && (
                          <div className="mt-3 pt-2 border-t border-gray-100">
                            <Button
                              size="sm"
                              variant="ghost"
                              className="h-7 text-xs text-gray-500 hover:text-gray-700 hover:bg-gray-100"
                              onClick={() => handleCopy(message.content)}
                            >
                              <Copy className="w-3 h-3 mr-1" />
                              Copy
                            </Button>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>
          </div>
        )}
      </ScrollArea>

      {/* Input Area */}
      <div className="flex-shrink-0 bg-white border-t border-gray-200 p-4">
        <div className="max-w-4xl mx-auto">
          <div className="relative bg-gray-50 rounded-2xl border border-gray-200 focus-within:border-[#A3BC02]/50 focus-within:bg-white transition-all">
            <Textarea
              ref={textareaRef}
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="Ask a question about your documents..."
              className="min-h-[56px] max-h-[120px] resize-none border-0 bg-transparent px-4 py-4 pr-16 focus-visible:ring-0 focus-visible:ring-offset-0 placeholder:text-gray-500"
              disabled={isStreaming}
            />
            <div className="absolute bottom-3 right-3 flex items-center gap-2">
              {isStreaming ? (
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={stopStreaming}
                  className="h-8 text-gray-500 hover:text-gray-700 hover:bg-gray-200"
                >
                  <Loader2 className="w-4 h-4 mr-1 animate-spin" />
                  Stop
                </Button>
              ) : (
                <>
                  {messages.length > 0 && messages[messages.length - 1].error && (
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={handleRetry}
                      className="h-8 text-gray-500 hover:text-gray-700 hover:bg-gray-200"
                    >
                      <RotateCw className="w-4 h-4" />
                    </Button>
                  )}
                  <Button
                    size="sm"
                    onClick={handleSubmit}
                    disabled={!input.trim() || isLoading}
                    className="h-8 bg-[#A3BC02] hover:bg-[#8BA000] text-white disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <Send className="w-4 h-4" />
                  </Button>
                </>
              )}
            </div>
          </div>
          <p className="text-xs text-gray-500 mt-2 text-center">
            Press Enter to send, Shift+Enter for new line
          </p>
        </div>
      </div>
    </div>
  );
}

================
File: app/(auth)/dashboard/page-backup.tsx
================
"use client";

import { useState, useEffect, useCallback } from "react";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Search,
  Paperclip,
  Clock,
  ArrowRight,
  FileText,
  Filter,
} from "lucide-react";
import { clientApiRequestJson } from "@/lib/client-api";
import { useIntegrations } from "@/lib/integrations-context";
import Image from "next/image";

// Mock data
const mockRecentSearches = [
  "Q4 budget planning documents",
  "Employee handbook updates",
  "Client presentation templates",
  "Marketing campaign metrics",
];

function SearchSection() {
  const [searchQuery, setSearchQuery] = useState("");
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [instantResults, setInstantResults] = useState<
    Array<Record<string, any>>
  >([]);
  const [isSearching, setIsSearching] = useState(false);
  const [selectedIntegrations, setSelectedIntegrations] = useState<string[]>(
    []
  );
  const { isGoogleDriveConnected } = useIntegrations();

  // Debounced instant search function
  const performInstantSearch = useCallback(async (query: string) => {
    if (query.length < 3) {
      setInstantResults([]);
      setIsSearching(false);
      return;
    }

    setIsSearching(true);
    try {
      const { data, error } = await clientApiRequestJson("/api/search/full", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          query: query,
          limit: 5,
          include_summary: false,
        }),
      });

      if (error) {
        console.error("Search failed:", error.message || "Unknown error");
        setInstantResults([]);
      } else {
        setInstantResults(data?.results || []);
      }
    } catch (error) {
      console.error("Instant search failed:", error);
      setInstantResults([]);
    } finally {
      setIsSearching(false);
    }
  }, []);

  // Debounce the instant search
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      performInstantSearch(searchQuery.trim());
    }, 300);

    return () => clearTimeout(timeoutId);
  }, [searchQuery, performInstantSearch]);

  const handleSubmit = () => {
    const query = searchQuery.trim();
    if (query) {
      // Handle search submission here
    }
  };

  const toggleIntegration = (integration: string) => {
    setSelectedIntegrations((prev) =>
      prev.includes(integration)
        ? prev.filter((i) => i !== integration)
        : [...prev, integration]
    );
  };

  return (
    <div className="flex-1 flex flex-col items-center justify-center px-6 py-12">
      <motion.div
        className="w-full max-w-2xl text-center"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        {/* Monolith Branding */}
        <div className="mb-12">
          <h1 className="text-4xl md:text-5xl font-serif text-[#3E4128] font-semibold mb-4">
            Mono
            <span className="underline decoration-[#A3BC02] decoration-4 underline-offset-4">
              l
            </span>
            ith
          </h1>
        </div>

        {/* Search Bar and Attach Button */}
        <motion.div
          className="flex items-center gap-4 mb-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.1 }}
        >
          <div className="relative flex-1">
            <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-custom-dark-green" />
            <Input
              type="text"
              placeholder="Ask or Find"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onFocus={() => setShowSuggestions(true)}
              onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}
              onKeyDown={(e) => {
                if (e.key === "Enter" && searchQuery.trim()) {
                  handleSubmit();
                }
              }}
              className={`text-custom-dark-green pl-12 py-4 text-lg rounded-3xl bg-[#F0F0F0] focus:bg-white border-0 outline-none focus:border-0 focus:outline-none focus:ring-0 focus:shadow-[inset_0_0_15px_rgba(163,188,1,0.2),0_4px_4px_0_rgba(163,188,1,1)] transition-shadow duration-200 ${
                searchQuery.trim() ? "pr-12" : "pr-4"
              }`}
            />

            {/* Submit Button - only shows when there's text */}
            {searchQuery.trim() && (
              <motion.button
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.8 }}
                transition={{ duration: 0.15 }}
                onClick={handleSubmit}
                className="absolute right-3 top-2 w-6 h-6  hover:bg-[#A3BC02] hover:text-white border border-[#A3BC02] shadow-[inset_0_0_15px_rgba(163,188,1,0.2)] text-custom-dark-green rounded-full flex items-center justify-center transition-colors duration-200"
              >
                <ArrowRight className="w-4 h-4 " />
              </motion.button>
            )}

            {/* Instant Search Suggestions */}
            {showSuggestions && searchQuery.length >= 3 && (
              <motion.div
                className="absolute top-full left-0 right-0 mt-2 bg-white border border-gray-200 rounded-xl shadow-lg z-50"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.2 }}
              >
                <div className="p-3">
                  <div className="text-xs font-medium text-gray-500 uppercase tracking-wider mb-2">
                    {isSearching
                      ? "Searching..."
                      : `Suggested searches (${instantResults.length} results)`}
                  </div>
                  {isSearching ? (
                    <div className="px-3 py-4 text-sm text-gray-500 text-center">
                      <div className="animate-pulse">Searching...</div>
                    </div>
                  ) : instantResults.length > 0 ? (
                    instantResults.map((result, index) => (
                      <button
                        key={index}
                        className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-lg flex items-center gap-2"
                        onClick={() => {
                          setSearchQuery(
                            result.title ||
                              result.filename ||
                              result.content?.substring(0, 50) ||
                              "Document"
                          );
                          setShowSuggestions(false);
                        }}
                      >
                        <FileText className="w-3 h-3 text-gray-400" />
                        <div className="truncate">
                          {result.title ||
                            result.filename ||
                            result.content?.substring(0, 50) ||
                            "Document"}
                        </div>
                      </button>
                    ))
                  ) : searchQuery.length >= 3 && !isSearching ? (
                    <div className="px-3 py-4 text-sm text-gray-500 text-center">
                      No results found for "{searchQuery}"
                    </div>
                  ) : null}
                </div>
              </motion.div>
            )}
            {/* Recent Searches (fallback when no query) */}
            {showSuggestions && searchQuery.length < 3 && (
              <motion.div
                className="absolute top-full left-0 right-0 mt-2 bg-white border border-gray-200 rounded-xl shadow-lg z-50"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.2 }}
              >
                <div className="p-3">
                  <div className="text-xs font-medium text-gray-500 uppercase tracking-wider mb-2">
                    Recent Searches
                  </div>
                  {mockRecentSearches.map((search, index) => (
                    <button
                      key={index}
                      className="w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-lg flex items-center gap-2"
                      onClick={() => setSearchQuery(search)}
                    >
                      <Clock className="w-3 h-3 text-gray-400" />
                      {search}
                    </button>
                  ))}
                </div>
              </motion.div>
            )}
          </div>

          {/* Separate Attach Button */}
          <Button
            size="default"
            variant="outline"
            className="rounded-full w-10 h-10 bg-[#F0F0F0] hover:border-[#A3BC02] hover:bg-[#A3BC02]/10"
          >
            <Paperclip className="w-5 h-5 text-gray-600" strokeWidth={2.2} />
          </Button>
        </motion.div>

        {/* Filter Section - Only show if connected to integrations */}
        {isGoogleDriveConnected && (
          <motion.div
            className="flex flex-col items-center gap-3 mt-16"
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.4, delay: 0.2 }}
          >
            <div className="flex items-center gap-2 text-sm text-gray-500">
              <Filter className="w-4 h-4" />
              <span>Filter</span>
            </div>

            <div className="flex items-center gap-3">
              {/* Google Drive Toggle */}
              <button
                onClick={() => toggleIntegration("google_drive")}
                className={`flex items-center gap-2 px-4 py-2 rounded-full border transition-all ${
                  selectedIntegrations.includes("google_drive")
                    ? "bg-white border-[#FCCD48] text-gray-900 [box-shadow:inset_0_0_25px_0_rgba(252,205,72,0.3)]"
                    : "bg-white border-gray-100 text-gray-600 hover:border-[#FCCD48] [box-shadow:inset_0_0_10px_0_rgba(252,205,72,0.4)]"
                }`}
              >
                <Image
                  src="/icons/integrations/drive.png"
                  alt="Google Drive"
                  width={16}
                  height={16}
                />
                <span className="text-sm font-medium">Google Drive</span>
              </button>

              {/* Future integrations can be added here in the same pattern */}
            </div>
          </motion.div>
        )}
      </motion.div>
    </div>
  );
}

export default function Dashboard() {
  return <SearchSection />;
}

================
File: app/(auth)/dashboard/page.tsx
================
"use client";

import { useState, useRef, useEffect } from "react";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { toast } from "sonner";
import { useRouter } from "next/navigation";
import {
  Send,
  Paperclip,
  Loader2,
  Search,
} from "lucide-react";

export default function Dashboard() {
  const router = useRouter();
  const [input, setInput] = useState("");
  const [isStreaming, setIsStreaming] = useState(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const abortControllerRef = useRef<AbortController | null>(null);

  // Auto-resize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.style.height = Math.min(textareaRef.current.scrollHeight, 120) + "px";
    }
  }, [input]);


  const handleSubmit = async () => {
    const query = input.trim();
    if (!query || isStreaming) return;

    setIsStreaming(true);
    setInput("");

    try {
      // Create conversation  
      const response = await fetch("/api/conversations", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          title: query.slice(0, 50) + (query.length > 50 ? "..." : ""),
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to create conversation");
      }

      const conversation = await response.json();
      const conversationId = conversation.id;

      // Store initial message in session storage for the conversation page to pick up
      sessionStorage.setItem(`initial-message-${conversationId}`, query);

      // Navigate to conversation page
      router.push(`/c/${conversationId}`);
      
    } catch (error: any) {
      console.error("Chat error:", error);
      toast.error(error.message || "Failed to start conversation");
      setIsStreaming(false);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSubmit();
    }
  };

  return (
    <div className="min-h-0 flex-1 flex flex-col">
      {/* Dashboard Welcome State */}
      <div className="flex-1 flex flex-col items-center justify-center px-6 py-12">
        <motion.div
          className="w-full max-w-2xl text-center"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          {/* Monolith Branding */}
          <div className="mb-12">
            <h1 className="text-4xl md:text-5xl font-serif text-[#3E4128] font-semibold mb-4">
              Mono
              <span className="underline decoration-[#A3BC02] decoration-4 underline-offset-4">
                l
              </span>
              ith
            </h1>
          </div>

          {/* Search Bar and Attach Button */}
          <motion.div
            className="flex items-center gap-4 mb-8"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.1 }}
          >
            <div className="relative flex-1">
              <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-custom-dark-green" />
              <Input
                type="text"
                placeholder="Ask or Find"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyDown={handleKeyDown}
                disabled={isStreaming}
                className={`text-custom-dark-green pl-12 py-4 text-lg rounded-3xl bg-[#F0F0F0] focus:bg-white border-0 outline-none focus:border-0 focus:outline-none focus:ring-0 focus:shadow-[inset_0_0_15px_rgba(163,188,1,0.2),0_4px_4px_0_rgba(163,188,1,1)] transition-shadow duration-200 ${
                  input.trim() ? "pr-12" : "pr-4"
                }`}
              />

              {/* Submit Button - only shows when there's text */}
              {input.trim() && (
                <motion.button
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 0.8 }}
                  transition={{ duration: 0.15 }}
                  onClick={handleSubmit}
                  disabled={isStreaming}
                  className="absolute right-3 top-2 w-6 h-6  hover:bg-[#A3BC02] hover:text-white border border-[#A3BC02] shadow-[inset_0_0_15px_rgba(163,188,1,0.2)] text-custom-dark-green rounded-full flex items-center justify-center transition-colors duration-200 disabled:opacity-50"
                >
                  {isStreaming ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <Send className="w-4 h-4" />
                  )}
                </motion.button>
              )}
            </div>

            {/* Separate Attach Button */}
            <Button
              size="default"
              variant="outline"
              className="rounded-full w-10 h-10 bg-[#F0F0F0] hover:border-[#A3BC02] hover:bg-[#A3BC02]/10"
            >
              <Paperclip className="w-5 h-5 text-gray-600" strokeWidth={2.2} />
            </Button>
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
}

================
File: app/(auth)/documents/page.tsx
================
"use client";

import { useState, useEffect, useCallback, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { clientApiRequestJson } from "@/lib/client-api";
import { toast } from "sonner";
import {
  Folder,
  File,
  Plus,
  Upload,
  Search,
  FolderPlus,
  ChevronRight,
  ChevronDown,
  MoreHorizontal,
  Trash2,
  Edit3,
  Download,
  Eye,
  FolderOpen,
  FileText,
  Loader2,
  Star,
  Clock,
  Filter,
  CloudUpload,
  ExternalLink,
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { FileUploadDialog } from "@/components/upload/FileUploadDialog";
import { DocumentViewer } from "@/components/document/DocumentViewer";
import { format } from "date-fns";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useIntegrations } from "@/lib/integrations-context";
import Image from "next/image";

// Types
interface FolderType {
  id: string;
  name: string;
  description?: string;
  parent_id?: string;
  created_at: string;
  updated_at: string;
  document_count: number;
  subdirectory_count: number;
  total_size_bytes: number;
  path: string;
  children?: FolderType[];
  isExpanded?: boolean;
}

interface Document {
  id: string;
  name: string;
  source_type: string;
  status: string;
  created_at: string;
  updated_at: string;
  file_size_bytes?: number | null;
  extension?: string | null;
  processing_status: string;
  uploaded_by?: string | null;
  chunk_count?: number | null;
  has_permission?: boolean;
  view_url?: string | null;
  folder_id?: string | null;
}

interface FolderResponse {
  items: FolderType[];
  total: number;
  page: number;
  size: number;
  has_more: boolean;
}

interface DocumentsResponse {
  items: Document[];
  total: number;
  page: number;
  size: number;
  has_more: boolean;
}

export default function DocumentsPage() {
  const { googleDriveConnections } = useIntegrations();
  
  const [folders, setFolders] = useState<FolderType[]>([]);
  const [documents, setDocuments] = useState<Document[]>([]);
  const [selectedFolderId, setSelectedFolderId] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isLoadingDocuments, setIsLoadingDocuments] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [viewMode, setViewMode] = useState<"folders" | "recent" | "starred">("folders");

  // Dialog states
  const [isUploadOpen, setIsUploadOpen] = useState(false);
  const [isCreateFolderOpen, setIsCreateFolderOpen] = useState(false);
  const [isViewerOpen, setIsViewerOpen] = useState(false);
  const [viewingDocument, setViewingDocument] = useState<Document | null>(null);
  const [editingFolder, setEditingFolder] = useState<FolderType | null>(null);
  const [isEditFolderOpen, setIsEditFolderOpen] = useState(false);

  // Form states
  const [newFolderName, setNewFolderName] = useState("");
  const [newFolderDescription, setNewFolderDescription] = useState("");
  const [parentFolderId, setParentFolderId] = useState<string | null>(null);
  
  // Drag and drop states
  const [isDragging, setIsDragging] = useState(false);
  const [isProcessingDrop, setIsProcessingDrop] = useState(false);
  const dragCounter = useRef(0);

  // Fetch folders
  const fetchFolders = useCallback(async () => {
    setIsLoading(true);
    try {
      const { data, error } = await clientApiRequestJson<FolderResponse>(
        "/api/folders?size=100"
      );

      if (error) {
        console.error("Error fetching folders:", error);
        // Don't throw error if no folders exist, just set empty array
        setFolders([]);
      } else if (data && data.items) {
        // Build folder tree
        const folderMap = new Map<string, FolderType>();
        const rootFolders: FolderType[] = [];

        data.items.forEach(folder => {
          folderMap.set(folder.id, { ...folder, children: [], isExpanded: true });
        });

        data.items.forEach(folder => {
          const folderNode = folderMap.get(folder.id)!;
          if (folder.parent_id) {
            const parent = folderMap.get(folder.parent_id);
            if (parent) {
              parent.children!.push(folderNode);
            }
          } else {
            rootFolders.push(folderNode);
          }
        });

        setFolders(rootFolders);
      } else {
        // No folders yet
        setFolders([]);
      }
    } catch (error) {
      console.error("Failed to load folders:", error);
      // Don't show error toast for empty folders
      setFolders([]);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Fetch documents (exclude Google Drive files)
  const fetchDocuments = useCallback(async (folderId?: string | null) => {
    setIsLoadingDocuments(true);
    try {
      let url = "/api/documents?size=50&source_types=upload";
      if (folderId) {
        url = `/api/folders/${folderId}/documents?size=50&source_types=upload`;
      }

      const { data, error } = await clientApiRequestJson<DocumentsResponse>(url);

      if (error) {
        console.error("Error fetching documents:", error);
        // Don't show error toast for empty documents
        setDocuments([]);
      } else if (data && data.items) {
        // Additional filter to ensure we only show uploaded files
        const uploadedFiles = data.items.filter(doc => doc.source_type === 'upload');
        setDocuments(uploadedFiles);
      } else {
        setDocuments([]);
      }
    } catch (error) {
      console.error("Failed to load documents:", error);
      setDocuments([]);
    } finally {
      setIsLoadingDocuments(false);
    }
  }, []);

  useEffect(() => {
    fetchFolders();
    if (viewMode === "folders") {
      fetchDocuments(selectedFolderId);
    }
  }, [fetchFolders, fetchDocuments, selectedFolderId, viewMode]);

  const createFolder = async () => {
    if (!newFolderName.trim()) {
      toast.error("Please enter a folder name");
      return;
    }

    try {
      const { data, error } = await clientApiRequestJson("/api/folders", {
        method: "POST",
        body: JSON.stringify({
          name: newFolderName,
          description: newFolderDescription || undefined,
          parent_id: parentFolderId || undefined,
        }),
      });

      if (error) throw new Error(error.message);

      toast.success("Folder created successfully");
      setIsCreateFolderOpen(false);
      setNewFolderName("");
      setNewFolderDescription("");
      setParentFolderId(null);
      fetchFolders();
    } catch (error) {
      toast.error("Failed to create folder");
    }
  };

  const updateFolder = async () => {
    if (!editingFolder || !newFolderName.trim()) return;

    try {
      const { error } = await clientApiRequestJson(`/api/folders/${editingFolder.id}`, {
        method: "PUT",
        body: JSON.stringify({
          name: newFolderName,
          description: newFolderDescription || undefined,
        }),
      });

      if (error) throw new Error(error.message);

      toast.success("Folder updated successfully");
      setIsEditFolderOpen(false);
      setEditingFolder(null);
      setNewFolderName("");
      setNewFolderDescription("");
      fetchFolders();
    } catch (error) {
      toast.error("Failed to update folder");
    }
  };

  const deleteFolder = async (folderId: string) => {
    if (!confirm("Are you sure you want to delete this folder and all its contents?")) {
      return;
    }

    try {
      const { error } = await clientApiRequestJson(`/api/folders/${folderId}?force=true`, {
        method: "DELETE",
      });

      if (error) throw new Error(error.message);

      toast.success("Folder deleted successfully");
      if (selectedFolderId === folderId) {
        setSelectedFolderId(null);
      }
      fetchFolders();
    } catch (error) {
      toast.error("Failed to delete folder");
    }
  };

  const deleteDocument = async (doc: Document) => {
    if (!confirm(`Are you sure you want to delete "${doc.name}"?`)) {
      return;
    }

    try {
      const { error } = await clientApiRequestJson(`/api/documents/${doc.id}`, {
        method: "DELETE",
      });

      if (error) throw new Error(error.message);

      toast.success("Document deleted successfully");
      fetchDocuments(selectedFolderId);
    } catch (error) {
      toast.error("Failed to delete document");
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + " " + sizes[i];
  };

  const getFileIcon = (extension?: string | null) => {
    switch (extension?.toLowerCase()) {
      case "pdf":
        return <FileText className="w-5 h-5 text-red-500" />;
      case "doc":
      case "docx":
        return <FileText className="w-5 h-5 text-blue-500" />;
      default:
        return <File className="w-5 h-5 text-gray-500" />;
    }
  };

  // Process dropped items (files and folders)
  const processDroppedItems = async (items: DataTransferItemList) => {
    setIsProcessingDrop(true);
    
    const files: File[] = [];
    const folderStructure: { [path: string]: File[] } = {};
    
    // Helper function to scan entries recursively
    const scanEntry = async (entry: any, path = ""): Promise<void> => {
      if (entry.isFile) {
        const file = await new Promise<File>((resolve) => {
          entry.file(resolve);
        });
        const fullPath = path + file.name;
        files.push(file);
        
        // Group files by their folder path
        if (path) {
          if (!folderStructure[path]) {
            folderStructure[path] = [];
          }
          folderStructure[path].push(file);
        }
      } else if (entry.isDirectory) {
        const dirReader = entry.createReader();
        const entries = await new Promise<any[]>((resolve) => {
          dirReader.readEntries(resolve);
        });
        
        for (const childEntry of entries) {
          await scanEntry(childEntry, path + entry.name + "/");
        }
      }
    };
    
    // Process all dropped items
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      const entry = item.webkitGetAsEntry();
      if (entry) {
        await scanEntry(entry);
      }
    }
    
    try {
      // If we have folder structure, create folders first
      if (Object.keys(folderStructure).length > 0) {
        await createFolderStructure(folderStructure);
      } else if (files.length > 0) {
        // Just files, upload them to current folder
        await uploadFiles(files, selectedFolderId);
      }
      
      // Refresh folders and documents
      await fetchFolders();
      await fetchDocuments(selectedFolderId);
      
      const folderCount = Object.keys(folderStructure).length;
      if (folderCount > 0) {
        toast.success(`Successfully created ${folderCount} folder(s) and uploaded ${files.length} file(s)`);
      } else {
        toast.success(`Successfully uploaded ${files.length} file(s)`);
      }
    } catch (error) {
      console.error("Error processing dropped items:", error);
      toast.error("Failed to process dropped items");
    } finally {
      setIsProcessingDrop(false);
    }
  };
  
  // Create folder structure from dropped folders
  const createFolderStructure = async (folderStructure: { [path: string]: File[] }) => {
    const paths = Object.keys(folderStructure).sort();
    
    // If we're in a selected folder, create folders directly inside it
    if (selectedFolderId) {
      // Create folders one by one in the selected folder
      const folderMap = new Map<string, string>(); // path -> folder_id
      
      for (const path of paths) {
        const parts = path.split("/").filter(p => p);
        let currentPath = "";
        let parentId = selectedFolderId;
        
        for (const part of parts) {
          currentPath += "/" + part;
          
          if (!folderMap.has(currentPath)) {
            // Create this folder
            const { data, error } = await clientApiRequestJson("/api/folders", {
              method: "POST",
              body: JSON.stringify({
                name: part,
                parent_id: parentId,
              }),
            });
            
            if (error) {
              console.error(`Failed to create folder ${part}:`, error);
              continue;
            }
            
            folderMap.set(currentPath, data.id);
            parentId = data.id;
          } else {
            parentId = folderMap.get(currentPath)!;
          }
        }
        
        // Upload files to this folder
        const filesToUpload = folderStructure[path];
        if (filesToUpload.length > 0) {
          await uploadFiles(filesToUpload, parentId || selectedFolderId);
        }
      }
    } else {
      // At root level, use bulk creation
      const allFolderPaths = new Set<string>();
      paths.forEach(path => {
        const parts = path.split("/").filter(p => p);
        let currentPath = "";
        parts.forEach(part => {
          currentPath += "/" + part;
          allFolderPaths.add(currentPath);
        });
      });
      
      if (allFolderPaths.size > 0) {
        // Prepare bulk folder creation request
        const foldersToCreate = Array.from(allFolderPaths).map(path => ({
          path: path,
          name: path.split("/").filter(p => p).pop() || "",
        }));
        
        // Create all folders in bulk
        const { data, error } = await clientApiRequestJson("/api/folders/bulk", {
          method: "POST",
          body: JSON.stringify({
            folders: foldersToCreate,
            create_parents: true,
            skip_existing: true,
          }),
        });
        
        if (error) {
          throw new Error("Failed to create folder structure");
        }
        
        // Build path to folder ID mapping
        const pathToId = new Map<string, string>();
        if (data && data.created_folders) {
          data.created_folders.forEach((folder: any) => {
            pathToId.set(folder.path, folder.id);
          });
        }
        if (data && data.existing_folders) {
          data.existing_folders.forEach((folder: any) => {
            pathToId.set(folder.path, folder.id);
          });
        }
        
        // Now upload files to their respective folders
        for (const [path, files] of Object.entries(folderStructure)) {
          if (files.length > 0) {
            const folderPath = "/" + path.replace(/\/$/, '');
            const folderId = pathToId.get(folderPath);
            await uploadFiles(files, folderId || null);
          }
        }
      }
    }
  };
  
  // Upload files helper
  const uploadFiles = async (files: File[], folderId: string | null) => {
    const formData = new FormData();
    files.forEach(file => {
      formData.append("files", file);
    });
    
    const url = folderId 
      ? `/api/upload/batch?folder_id=${folderId}`
      : "/api/upload/batch";
    
    const response = await fetch(url, {
      method: "POST",
      body: formData,
    });
    
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "Upload failed");
    }
    
    return response.json();
  };
  
  // Drag and drop handlers
  const handleDragEnter = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter.current++;
    
    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {
      setIsDragging(true);
    }
  };
  
  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter.current--;
    
    if (dragCounter.current === 0) {
      setIsDragging(false);
    }
  };
  
  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
  };
  
  const handleDrop = async (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
    dragCounter.current = 0;
    
    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {
      await processDroppedItems(e.dataTransfer.items);
    }
  };

  const FolderTreeItem: React.FC<{ folder: FolderType; depth: number }> = ({ folder, depth }) => {
    const [isExpanded, setIsExpanded] = useState(true);
    const hasChildren = folder.children && folder.children.length > 0;
    const isSelected = selectedFolderId === folder.id;

    return (
      <div>
        <div
          className={`group flex items-center px-3 py-2 rounded-full cursor-pointer transition-all duration-200 hover:bg-gray-50 ${
            isSelected
              ? "text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)]"
              : ""
          }`}
          style={{ paddingLeft: `${depth * 20 + 12}px` }}
          onClick={() => setSelectedFolderId(folder.id)}
        >
          <button
            onClick={(e) => {
              e.stopPropagation();
              setIsExpanded(!isExpanded);
            }}
            className="p-0.5 hover:bg-gray-100 rounded mr-1"
          >
            {hasChildren ? (
              isExpanded ? (
                <ChevronDown className="w-4 h-4" />
              ) : (
                <ChevronRight className="w-4 h-4" />
              )
            ) : (
              <div className="w-4 h-4" />
            )}
          </button>

          {isExpanded && hasChildren ? (
            <FolderOpen className="w-4 h-4 mr-2 text-[#A3BC02]" />
          ) : (
            <Folder className="w-4 h-4 mr-2 text-[#A3BC02]" />
          )}

          <span className="flex-1 text-sm font-sans">{folder.name}</span>

          <div className="flex items-center gap-2">
            <span className="text-xs text-gray-500 font-sans">
              {folder.document_count}
            </span>

            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-6 w-6 p-0 opacity-0 group-hover:opacity-100"
                  onClick={(e) => e.stopPropagation()}
                >
                  <MoreHorizontal className="w-4 h-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem
                  onClick={() => {
                    setEditingFolder(folder);
                    setNewFolderName(folder.name);
                    setNewFolderDescription(folder.description || "");
                    setIsEditFolderOpen(true);
                  }}
                >
                  <Edit3 className="w-4 h-4 mr-2" />
                  Rename
                </DropdownMenuItem>
                <DropdownMenuItem
                  onClick={() => {
                    setParentFolderId(folder.id);
                    setIsCreateFolderOpen(true);
                  }}
                >
                  <FolderPlus className="w-4 h-4 mr-2" />
                  New Subfolder
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  onClick={() => deleteFolder(folder.id)}
                  className="text-red-600"
                >
                  <Trash2 className="w-4 h-4 mr-2" />
                  Delete
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>

        {isExpanded && hasChildren && (
          <div>
            {folder.children!.map((child) => (
              <FolderTreeItem key={child.id} folder={child} depth={depth + 1} />
            ))}
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-none">
      <div className="max-w-7xl 2xl:max-w-screen-2xl mx-auto px-6 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-4">
          <h1 className="text-8xl font-medium text-custom-dark-green font-serif">
            Document Library
          </h1>

          <div className="flex items-center gap-2">
            {googleDriveConnections.length > 0 && (
              <Button
                onClick={() => window.location.href = '/auth/library/drive'}
                className="flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans bg-[#00AC47] text-white hover:bg-[#009639]"
              >
                <Image
                  src="/icons/integrations/drive.png"
                  alt="Google Drive"
                  width={16}
                  height={16}
                />
                Google Drive
                <ExternalLink className="w-3 h-3" />
              </Button>
            )}
            <Button
              onClick={() => setIsCreateFolderOpen(true)}
              className="flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans bg-[#eaeaea] text-custom-dark-green border border-gray-200 hover:bg-gray-50"
            >
              <FolderPlus className="w-4 h-4" />
              New Folder
            </Button>
            <Button
              onClick={() => setIsUploadOpen(true)}
              className="flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
            >
              <Upload className="w-4 h-4" />
              Upload Files
            </Button>
          </div>
        </div>

        {/* Description */}
        <div className="mb-8">
          <p className="text-gray-600 text-sm font-sans">
            Organize and manage your uploaded documents with folders. Drag and drop files or entire folders from your desktop.
            {googleDriveConnections.length > 0 && (
              <span className="ml-2 text-[#00AC47]">
                Your Google Drive files are available in the 
                <button 
                  onClick={() => window.location.href = '/auth/library/drive'}
                  className="underline ml-1 hover:text-[#009639]"
                >
                  Google Drive Library
                </button>.
              </span>
            )}
          </p>
        </div>

        {/* Main Content */}
        <div className="flex gap-6">
          {/* Sidebar */}
          <div className="w-80 bg-white rounded-xl p-4">
            {/* Search */}
            <div className="relative mb-4">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              <Input
                placeholder="Search documents..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 h-10 rounded-full border-[#F6F6F6] bg-[#F6F6F6] font-sans"
              />
            </div>

            {/* View Mode Tabs */}
            <div className="flex gap-2 mb-4">
              <button
                onClick={() => setViewMode("folders")}
                className={`flex-1 px-3 py-2 rounded-full text-sm font-sans transition ${
                  viewMode === "folders"
                    ? "bg-[#FAFFD8] text-custom-dark-green border border-[#A3BC01]"
                    : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                }`}
              >
                <Folder className="w-4 h-4 inline mr-1" />
                Folders
              </button>
              <button
                onClick={() => setViewMode("recent")}
                className={`flex-1 px-3 py-2 rounded-full text-sm font-sans transition ${
                  viewMode === "recent"
                    ? "bg-[#FAFFD8] text-custom-dark-green border border-[#A3BC01]"
                    : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                }`}
              >
                <Clock className="w-4 h-4 inline mr-1" />
                Recent
              </button>
              <button
                onClick={() => setViewMode("starred")}
                className={`flex-1 px-3 py-2 rounded-full text-sm font-sans transition ${
                  viewMode === "starred"
                    ? "bg-[#FAFFD8] text-custom-dark-green border border-[#A3BC01]"
                    : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                }`}
              >
                <Star className="w-4 h-4 inline mr-1" />
                Starred
              </button>
            </div>

            {/* Folder Tree */}
            {viewMode === "folders" && (
              <ScrollArea className="h-[calc(100vh-350px)]">
                {isLoading ? (
                  <div className="flex items-center justify-center py-8">
                    <Loader2 className="w-6 h-6 animate-spin text-[#A3BC02]" />
                  </div>
                ) : (
                  <div className="space-y-1">
                    <div
                      className={`group flex items-center px-3 py-2 rounded-full cursor-pointer transition-all duration-200 hover:bg-gray-50 ${
                        selectedFolderId === null
                          ? "text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)]"
                          : ""
                      }`}
                      onClick={() => setSelectedFolderId(null)}
                    >
                      <div className="w-4 h-4 mr-1" />
                      <Folder className="w-4 h-4 mr-2 text-[#A3BC02]" />
                      <span className="flex-1 text-sm font-sans">All Documents</span>
                    </div>

                    {folders.map((folder) => (
                      <FolderTreeItem key={folder.id} folder={folder} depth={0} />
                    ))}
                  </div>
                )}
              </ScrollArea>
            )}
          </div>

          {/* Document List */}
          <div 
            className="flex-1 bg-white rounded-xl p-6 relative"
            onDragEnter={handleDragEnter}
            onDragLeave={handleDragLeave}
            onDragOver={handleDragOver}
            onDrop={handleDrop}
          >
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-medium text-custom-dark-green font-serif">
                {selectedFolderId
                  ? folders.find(f => f.id === selectedFolderId)?.name || "Documents"
                  : "All Documents"}
              </h2>

              <div className="flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="sm"
                  className="rounded-full"
                >
                  <Filter className="w-4 h-4 mr-1" />
                  Filter
                </Button>
              </div>
            </div>

            {/* Drag overlay */}
            {isDragging && (
              <div className="absolute inset-0 bg-white/90 backdrop-blur-sm rounded-xl flex items-center justify-center z-50">
                <div className="text-center">
                  <CloudUpload className="w-16 h-16 text-[#A3BC02] mx-auto mb-4 animate-bounce" />
                  <h3 className="text-xl font-medium text-gray-900 mb-2">Drop files or folders here</h3>
                  <p className="text-sm text-gray-500">
                    {selectedFolderId 
                      ? `Files will be uploaded to "${folders.find(f => f.id === selectedFolderId)?.name}"`
                      : "Files will be uploaded to root directory"}
                  </p>
                </div>
              </div>
            )}
            
            {/* Processing overlay */}
            {isProcessingDrop && (
              <div className="absolute inset-0 bg-white/90 backdrop-blur-sm rounded-xl flex items-center justify-center z-50">
                <div className="text-center">
                  <Loader2 className="w-16 h-16 text-[#A3BC02] mx-auto mb-4 animate-spin" />
                  <h3 className="text-xl font-medium text-gray-900 mb-2">Processing dropped items...</h3>
                  <p className="text-sm text-gray-500">Creating folders and uploading files</p>
                </div>
              </div>
            )}
            
            {isLoadingDocuments ? (
              <div className="flex items-center justify-center py-16">
                <Loader2 className="w-8 h-8 animate-spin text-[#A3BC02]" />
              </div>
            ) : documents.length === 0 ? (
              <div className="text-center py-16">
                <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 mb-6">
                  <CloudUpload className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-700 mb-2">No documents yet</h3>
                  <p className="text-sm text-gray-500 mb-6">
                    Drag and drop files or folders here, or click to upload
                  </p>
                  <Button
                    onClick={() => setIsUploadOpen(true)}
                    className="rounded-full text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
                  >
                    <Upload className="w-4 h-4 mr-2" />
                    Upload Files
                  </Button>
                </div>
              </div>
            ) : (
              <div className="space-y-2">
                {documents.map((doc) => (
                  <div
                    key={doc.id}
                    className="group flex items-center p-4 rounded-lg hover:bg-gray-50 transition-all duration-200 border border-transparent hover:border-gray-200"
                  >
                    {getFileIcon(doc.extension)}

                    <div className="flex-1 ml-3">
                      <h3 className="text-sm font-medium text-gray-900 group-hover:text-[#A3BC02] transition-colors">
                        {doc.name}
                      </h3>
                      <div className="flex items-center gap-4 text-xs text-gray-500 mt-1">
                        <span>{formatFileSize(doc.file_size_bytes || 0)}</span>
                        <span>{format(new Date(doc.created_at), "MMM d, yyyy")}</span>
                        <Badge
                          variant="outline"
                          className={`text-xs ${
                            doc.processing_status === "COMPLETED"
                              ? "border-green-300 text-green-700"
                              : "border-yellow-300 text-yellow-700"
                          }`}
                        >
                          {doc.processing_status}
                        </Badge>
                      </div>
                    </div>

                    <div className="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-8 w-8 p-0 rounded-full hover:bg-[#FAFFD8]"
                        onClick={() => {
                          setViewingDocument(doc);
                          setIsViewerOpen(true);
                        }}
                      >
                        <Eye className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-8 w-8 p-0 rounded-full hover:bg-[#FAFFD8]"
                        onClick={() => {
                          window.open(`/api/documents/${doc.id}/download`, "_blank");
                          toast.success(`Downloading ${doc.name}`);
                        }}
                      >
                        <Download className="w-4 h-4" />
                      </Button>

                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-8 w-8 p-0 rounded-full hover:bg-[#FAFFD8]"
                          >
                            <MoreHorizontal className="w-4 h-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem onClick={() => toast.info("Bookmark feature coming soon!")}>
                            <Star className="w-4 h-4 mr-2" />
                            Add to Starred
                          </DropdownMenuItem>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem
                            onClick={() => deleteDocument(doc)}
                            className="text-red-600"
                          >
                            <Trash2 className="w-4 h-4 mr-2" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Create Folder Dialog */}
      <Dialog open={isCreateFolderOpen} onOpenChange={setIsCreateFolderOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle className="text-2xl font-serif text-custom-dark-green">
              Create New Folder
            </DialogTitle>
            <DialogDescription className="text-sm text-gray-600 font-sans">
              Create a new folder to organize your documents
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="folderName" className="text-sm font-medium text-black font-sans">
                Folder Name
              </Label>
              <Input
                id="folderName"
                value={newFolderName}
                onChange={(e) => setNewFolderName(e.target.value)}
                placeholder="Enter folder name"
                className="h-12 rounded-full border-[#F6F6F6] bg-[#F6F6F6] font-sans"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="folderDescription" className="text-sm font-medium text-black font-sans">
                Description (optional)
              </Label>
              <Textarea
                id="folderDescription"
                value={newFolderDescription}
                onChange={(e) => setNewFolderDescription(e.target.value)}
                placeholder="Add a description"
                className="min-h-[80px] rounded-lg border-[#F6F6F6] bg-[#F6F6F6] font-sans resize-none"
              />
            </div>
          </div>

          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => {
                setIsCreateFolderOpen(false);
                setNewFolderName("");
                setNewFolderDescription("");
                setParentFolderId(null);
              }}
              className="rounded-full"
            >
              Cancel
            </Button>
            <Button
              onClick={createFolder}
              className="rounded-full text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
            >
              Create Folder
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Edit Folder Dialog */}
      <Dialog open={isEditFolderOpen} onOpenChange={setIsEditFolderOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle className="text-2xl font-serif text-custom-dark-green">
              Edit Folder
            </DialogTitle>
            <DialogDescription className="text-sm text-gray-600 font-sans">
              Update folder details
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="editFolderName" className="text-sm font-medium text-black font-sans">
                Folder Name
              </Label>
              <Input
                id="editFolderName"
                value={newFolderName}
                onChange={(e) => setNewFolderName(e.target.value)}
                placeholder="Enter folder name"
                className="h-12 rounded-full border-[#F6F6F6] bg-[#F6F6F6] font-sans"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="editFolderDescription" className="text-sm font-medium text-black font-sans">
                Description (optional)
              </Label>
              <Textarea
                id="editFolderDescription"
                value={newFolderDescription}
                onChange={(e) => setNewFolderDescription(e.target.value)}
                placeholder="Add a description"
                className="min-h-[80px] rounded-lg border-[#F6F6F6] bg-[#F6F6F6] font-sans resize-none"
              />
            </div>
          </div>

          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => {
                setIsEditFolderOpen(false);
                setEditingFolder(null);
                setNewFolderName("");
                setNewFolderDescription("");
              }}
              className="rounded-full"
            >
              Cancel
            </Button>
            <Button
              onClick={updateFolder}
              className="rounded-full text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
            >
              Save Changes
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Document Viewer */}
      <Dialog open={isViewerOpen} onOpenChange={setIsViewerOpen}>
        <DialogContent className="max-w-[90vw] max-h-[90vh] w-full h-full p-0 overflow-hidden">
          <DialogTitle className="sr-only">
            {viewingDocument ? `Viewing ${viewingDocument.name}` : 'Document Viewer'}
          </DialogTitle>
          {viewingDocument && (
            <DocumentViewer
              documentId={viewingDocument.id}
              documentName={viewingDocument.name}
              fileType={viewingDocument.extension || undefined}
              className="h-full"
            />
          )}
        </DialogContent>
      </Dialog>

      {/* Upload Dialog */}
      <FileUploadDialog
        open={isUploadOpen}
        onOpenChange={setIsUploadOpen}
        onUploadComplete={(files) => {
          toast.success(`Successfully uploaded ${files.length} file(s)`);
          fetchDocuments(selectedFolderId);
        }}
        folderId={selectedFolderId || undefined}
        title="Upload Documents"
        description="Upload your documents to the selected folder. We support PDF, Word, Excel, and more."
        maxFiles={10}
        maxSize={10 * 1024 * 1024}
      />
    </div>
  );
}

================
File: app/(auth)/focus/[id]/page.tsx
================
"use client";

import React, { useState, useEffect, useCallback, memo, use } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";
import {
  ArrowLeft,
  Trash2,
  ExternalLink,
  Plus,
  FileText,
  MessageSquare,
  Calendar,
  Download,
  Search,
  Filter,
  Target,
  Archive,
  MoreHorizontal,
  Check,
  CircleAlert,
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import Link from "next/link";

interface FocusMode {
  id: string;
  name: string;
  description?: string;
  icon: string;
  created_at: string;
  updated_at: string;
  document_count: number;
  is_active: boolean;
  documents?: Document[];
}

interface Document {
  id: string;
  display_name: string;
  mime_type: string;
  file_size_bytes: number;
  created_at: string;
  status: string;
  source_type: string;
  original_path?: string;
  extracted_metadata?: {
    topics?: string[];
    sentiment?: string;
    categories?: string[];
    document_type?: string;
  };
}

interface AvailableDocument {
  id: string;
  name: string;
  file_path: string;
  mime_type: string;
  file_size_bytes: number;
  created_at: string;
  status: string;
  source_type: string;
  file_extension: string;
  is_in_focus_mode: boolean;
}

export default function FocusModePage({
  params,
}: {
  params: Promise<{ id: string }>;
}) {
  const { id } = use(params);
  const router = useRouter();
  const [focusMode, setFocusMode] = useState<FocusMode | null>(null);
  const [documents, setDocuments] = useState<Document[]>([]);
  const [conversations, setConversations] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [addDocumentsDialogOpen, setAddDocumentsDialogOpen] = useState(false);
  const [availableDocuments, setAvailableDocuments] = useState<
    AvailableDocument[]
  >([]);
  const [selectedDocuments, setSelectedDocuments] = useState<Set<string>>(
    new Set()
  );
  const [isLoadingDocuments, setIsLoadingDocuments] = useState(false);
  const [isAddingDocuments, setIsAddingDocuments] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");

  const loadFocusMode = async () => {
    try {
      setIsLoading(true);
      
      // Load focus mode details (without documents)
      const focusModeResponse = await fetch(`/api/focus-modes/${id}`);
      if (!focusModeResponse.ok) {
        toast.error("Failed to load focus mode");
        router.push("/focus");
        return;
      }
      
      const focusModeData = await focusModeResponse.json();
      setFocusMode(focusModeData);
      
      // Load documents using dedicated endpoint
      loadDocuments();
      
      // Load conversations for this focus mode
      loadConversations();
    } catch (error) {
      console.error("Failed to load focus mode:", error);
      toast.error("Failed to load focus mode");
      router.push("/focus");
    } finally {
      setIsLoading(false);
    }
  };

  const loadDocuments = async () => {
    try {
      const response = await fetch(`/api/focus-modes/${id}/documents?page_size=100`);
      if (response.ok) {
        const data = await response.json();
        setDocuments(data.documents || []);
      } else {
        console.error("Failed to load documents for focus mode");
      }
    } catch (error) {
      console.error("Failed to load documents:", error);
    }
  };

  const loadConversations = async () => {
    try {
      const response = await fetch(
        `/api/conversations?focus_mode_id=${id}&page_size=50`
      );
      if (response.ok) {
        const data = await response.json();
        setConversations(data.conversations || []);
      } else {
        console.error("Failed to load conversations for focus mode");
      }
    } catch (error) {
      console.error("Failed to load conversations:", error);
    }
  };

  const loadAvailableDocuments = async () => {
    try {
      setIsLoadingDocuments(true);
      const response = await fetch(
        `/api/focus-modes/documents/available?exclude_focus_mode_id=${id}&page_size=100`
      );

      if (response.ok) {
        const data = await response.json();
        setAvailableDocuments(data.documents || []);
      } else {
        toast.error("Failed to load available documents");
      }
    } catch (error) {
      console.error("Failed to load available documents:", error);
      toast.error("Failed to load available documents");
    } finally {
      setIsLoadingDocuments(false);
    }
  };

  const addDocumentsToFocusMode = async () => {
    if (selectedDocuments.size === 0) {
      toast.error("Please select at least one document");
      return;
    }

    try {
      setIsAddingDocuments(true);
      const response = await fetch(`/api/focus-modes/${id}/documents`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          document_ids: Array.from(selectedDocuments),
        }),
      });

      if (response.ok) {
        toast.success(
          `${selectedDocuments.size} document(s) added to focus mode`
        );
        setAddDocumentsDialogOpen(false);
        setSelectedDocuments(new Set());
        loadDocuments(); // Reload to get updated document list
      } else {
        const error = await response.json();
        toast.error(error.message || "Failed to add documents");
      }
    } catch (error) {
      console.error("Failed to add documents:", error);
      toast.error("Failed to add documents");
    } finally {
      setIsAddingDocuments(false);
    }
  };

  const removeDocumentFromFocusMode = async (documentId: string) => {
    try {
      const response = await fetch(
        `/api/focus-modes/${id}/documents/${documentId}`,
        {
          method: "DELETE",
        }
      );

      if (response.ok) {
        setDocuments((prev) => prev.filter((doc) => doc.id !== documentId));
        toast.success("Document removed from focus mode");
      } else {
        toast.error("Failed to remove document");
      }
    } catch (error) {
      console.error("Failed to remove document:", error);
      toast.error("Failed to remove document");
    }
  };

  const deleteConversation = async (conversationId: string) => {
    try {
      const response = await fetch(`/api/conversations/${conversationId}`, {
        method: "DELETE",
      });

      if (response.ok) {
        setConversations((prev) =>
          prev.filter((conv) => conv.id !== conversationId)
        );
        toast.success("Conversation deleted");
      } else {
        toast.error("Failed to delete conversation");
      }
    } catch (error) {
      console.error("Failed to delete conversation:", error);
      toast.error("Failed to delete conversation");
    }
  };

  const toggleArchiveConversation = async (
    conversationId: string,
    isArchived: boolean
  ) => {
    try {
      const response = await fetch(`/api/conversations/${conversationId}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ is_archived: !isArchived }),
      });

      if (response.ok) {
        setConversations((prev) =>
          prev.map((conv) =>
            conv.id === conversationId
              ? { ...conv, is_archived: !isArchived }
              : conv
          )
        );
        toast.success(
          isArchived ? "Conversation unarchived" : "Conversation archived"
        );
      } else {
        toast.error("Failed to update conversation");
      }
    } catch (error) {
      console.error("Failed to update conversation:", error);
      toast.error("Failed to update conversation");
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
      day: "numeric",
      month: "short",
      year: "numeric",
    });
  };

  const getFileExtension = (document: Document | AvailableDocument) => {
    const displayName = 'display_name' in document ? document.display_name : document.name;
    
    if (displayName) {
      const parts = displayName.split('.');
      if (parts.length > 1) {
        return parts[parts.length - 1];
      }
    }
    
    // Fallback to mime type mapping
    const mimeToExt: { [key: string]: string } = {
      "application/pdf": "pdf",
      "application/msword": "doc",
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": "docx",
      "application/vnd.ms-excel": "xls",
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": "xlsx",
      "application/vnd.ms-powerpoint": "ppt",
      "application/vnd.openxmlformats-officedocument.presentationml.presentation": "pptx",
      "text/plain": "txt",
      "text/csv": "csv",
      "image/jpeg": "jpg",
      "image/png": "png",
      "audio/mpeg": "mp3",
      "video/mp4": "mp4",
      "video/x-msvideo": "avi",
      "text/css": "css",
      "application/javascript": "js",
      "application/xml": "xml",
    };
    
    return mimeToExt[document.mime_type] || "file";
  };

  const getFileIcon = (document: Document | AvailableDocument) => {
    const extension = getFileExtension(document);
    
    const iconMap: { [key: string]: string } = {
      pdf: "/icons/filetypes/pdf.png",
      doc: "/icons/filetypes/word.png",
      docx: "/icons/filetypes/word.png",
      xls: "/icons/filetypes/excel.png",
      xlsx: "/icons/filetypes/excel.png",
      ppt: "/icons/filetypes/ppt.png",
      pptx: "/icons/filetypes/ppt.png",
      txt: "/icons/filetypes/file.png",
      csv: "/icons/filetypes/excel.png",
      jpg: "/icons/filetypes/file.png",
      jpeg: "/icons/filetypes/file.png",
      png: "/icons/filetypes/file.png",
      mp3: "/icons/filetypes/file.png",
      mp4: "/icons/filetypes/file.png",
      avi: "/icons/filetypes/file.png",
      css: "/icons/filetypes/file.png",
      js: "/icons/filetypes/file.png",
      xml: "/icons/filetypes/file.png",
    };
    
    return iconMap[extension.toLowerCase()] || "/icons/filetypes/file.png";
  };

  const filteredAvailableDocuments = availableDocuments.filter((doc) =>
    doc.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  useEffect(() => {
    loadFocusMode();
  }, [id]);

  const DocumentCard = memo(({ document }: { document: Document }) => {
    return (
      <div className="group cursor-pointer relative bg-white border-none rounded-xl p-4 py-[14px] hover:shadow-md transition-all duration-200 hover:border-gray-300 flex flex-col justify-between">
        {/* File Name */}
        <div className="pb-2">
          <p className="text-sm font-medium text-gray-900 font-sans line-clamp-1 leading-tight">
            {document.display_name}
          </p>
        </div>

        {/* Footer */}
        <div className="flex justify-center mt-auto items-center">
          {/* File Icon */}
          <div className="flex items-center">
            <img
              src={getFileIcon(document)}
              alt={getFileExtension(document)}
              className="w-4 h-4"
            />
          </div>

          {/* Date/Time */}
          <div className="flex-1 text-center">
            <p className="text-xs text-black/50 font-sans">
              {formatDate(document.created_at)}
            </p>
          </div>

          {/* Three Dots Menu */}
          <div className="opacity-100 flex items-center">
            <DropdownMenu modal={false}>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-5 w-5 p-0 rounded-full hover:bg-gray-100"
                >
                  <MoreHorizontal className="w-3 h-3" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem
                  onClick={() => {
                    window.open(`/api/documents/${document.id}/download`, "_blank");
                    toast.success(`Downloading ${document.display_name}`);
                  }}
                >
                  <Download className="w-4 h-4 mr-2" />
                  Download
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  onClick={() => removeDocumentFromFocusMode(document.id)}
                  className="text-red-600"
                >
                  <Trash2 className="w-4 h-4 mr-2" />
                  Remove from Focus
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>

        {/* Status Indicator */}
        <div className="absolute -bottom-1 -right-1">
          {document.status === "COMPLETED" ? (
            <div className="w-4 h-4 rounded-full flex items-center justify-center bg-white border-none [box-shadow:inset_0_0_16px_0_rgba(163,188,1,0.4)]">
              <Check className="w-3 h-3 text-custom-dark-green" />
            </div>
          ) : (
            <div className="w-4 h-4 rounded-full flex items-center justify-center bg-red-50 border-none ">
              <CircleAlert className="w-3 h-3 text-red-800" />
            </div>
          )}
        </div>
      </div>
    );
  });

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#A3BC02] mx-auto mb-4"></div>
          <p className="text-gray-500">Loading focus mode...</p>
        </div>
      </div>
    );
  }

  if (!focusMode) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            Focus mode not found
          </h3>
          <p className="text-gray-500 mb-4">
            The focus mode you're looking for doesn't exist or you don't have
            access to it.
          </p>
          <Link href="/focus">
            <Button className="bg-[#A3BC02] hover:bg-[#8BA000] text-white rounded-full font-sans">
              Back to Focus Modes
            </Button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-none">
      <div className="max-w-7xl 2xl:max-w-screen-2xl mx-auto px-6 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-4">
            <span className="text-4xl">{focusMode.icon}</span>
            <h1 className="text-8xl font-medium text-custom-dark-green font-serif">
              {focusMode.name}
            </h1>
          </div>
          <div className="flex items-center gap-2">
            <Button
              onClick={() => router.push('/focus')}
              className="flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans bg-[#eaeaea] text-custom-dark-green border border-gray-200 hover:bg-gray-50"
            >
              <ArrowLeft className="w-4 h-4" />
              Back to Focus Modes
            </Button>
            <Dialog
              open={addDocumentsDialogOpen}
              onOpenChange={setAddDocumentsDialogOpen}
            >
              <DialogTrigger asChild>
                <Button
                  onClick={loadAvailableDocuments}
                  className="flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
                >
                  <Plus className="w-4 h-4" />
                  Add Files To Focus
                </Button>
              </DialogTrigger>
              <DialogContent className="bg-white border border-gray-200 rounded-2xl max-w-4xl max-h-[80vh] overflow-hidden">
                <DialogHeader>
                  <DialogTitle className="text-custom-dark-green font-serif">
                    Add Documents to Focus Mode
                  </DialogTitle>
                  <DialogDescription className="text-gray-600 font-sans">
                    Select documents to add to "{focusMode.name}" focus
                    mode.
                  </DialogDescription>
                </DialogHeader>

                <div className="space-y-4">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                    <Input
                      placeholder="Search documents..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-10 rounded-full"
                    />
                  </div>

                  <div className="max-h-96 overflow-y-auto">
                    {isLoadingDocuments ? (
                      <div className="flex items-center justify-center py-8">
                        <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-[#A3BC02]"></div>
                      </div>
                    ) : filteredAvailableDocuments.length === 0 ? (
                      <div className="text-center py-8 text-gray-500">
                        No available documents found
                      </div>
                    ) : (
                      <div className="space-y-2">
                        {filteredAvailableDocuments.map((document) => (
                          <div
                            key={document.id}
                            className="flex items-center gap-3 p-3 hover:bg-gray-50 rounded-lg"
                          >
                            <Checkbox
                              checked={selectedDocuments.has(document.id)}
                              onCheckedChange={(checked) => {
                                setSelectedDocuments((prev) => {
                                  const newSet = new Set(prev);
                                  if (checked) {
                                    newSet.add(document.id);
                                  } else {
                                    newSet.delete(document.id);
                                  }
                                  return newSet;
                                });
                              }}
                            />
                            <img
                              src={getFileIcon(document)}
                              alt={getFileExtension(document)}
                              className="w-6 h-6"
                            />
                            <div className="flex-1 min-w-0">
                              <p className="text-sm font-medium text-gray-900 truncate">
                                {document.name}
                              </p>
                              <div className="flex items-center gap-2 mt-1">
                                <Badge
                                  variant="secondary"
                                  className="text-xs"
                                >
                                  {getFileExtension(document).toUpperCase()}
                                </Badge>
                                <span className="text-xs text-gray-500">
                                  {formatFileSize(document.file_size_bytes)}
                                </span>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>

                <DialogFooter>
                  <Button
                    variant="outline"
                    onClick={() => {
                      setAddDocumentsDialogOpen(false);
                      setSelectedDocuments(new Set());
                      setSearchQuery("");
                    }}
                    className="rounded-full font-sans"
                  >
                    Cancel
                  </Button>
                  <Button
                    onClick={addDocumentsToFocusMode}
                    disabled={
                      isAddingDocuments || selectedDocuments.size === 0
                    }
                    className="bg-[#A3BC02] hover:bg-[#8BA000] text-white rounded-full font-sans"
                  >
                    {isAddingDocuments
                      ? "Adding..."
                      : `Add ${selectedDocuments.size} Document${
                          selectedDocuments.size !== 1 ? "s" : ""
                        }`}
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>
        </div>

        {/* Description */}
        <div className="mb-8">
          <p className="text-gray-600 text-sm font-sans">
            {focusMode.description || `Manage documents and conversations in the ${focusMode.name} focus mode.`}
          </p>
        </div>

        {/* Documents Section */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-medium text-gray-900 font-serif">
              Documents
            </h2>
          </div>

          {documents.length === 0 ? (
            <div className="text-center py-16">
              <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 mb-6">
                <FileText className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-700 mb-2">
                  No documents yet
                </h3>
                <p className="text-sm text-gray-500 mb-6">
                  Add documents to this focus mode to get started.
                </p>
                <Dialog
                  open={addDocumentsDialogOpen}
                  onOpenChange={setAddDocumentsDialogOpen}
                >
                  <DialogTrigger asChild>
                    <Button
                      onClick={loadAvailableDocuments}
                      className="rounded-full text-custom-dark-green border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
                    >
                      <Plus className="w-4 h-4 mr-2" />
                      Add Your First Document
                    </Button>
                  </DialogTrigger>
                </Dialog>
              </div>
            </div>
          ) : (
            <div className="grid grid-cols md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
              {documents.map((document) => (
                <DocumentCard key={document.id} document={document} />
              ))}
            </div>
          )}
        </div>

        {/* Conversations Section */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-medium text-gray-900 font-serif">
              Conversations
            </h2>
            <Link href={`/chat?focus_mode_id=${id}`}>
              <Button className="bg-[#A3BC02] hover:bg-[#8BA000] text-white rounded-full font-sans flex items-center gap-2">
                <Plus className="w-4 h-4" />
                Start Conversation
              </Button>
            </Link>
          </div>

          {conversations.length === 0 ? (
            <div className="text-center py-16">
              <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 mb-6">
                <MessageSquare className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-700 mb-2">
                  No conversations yet
                </h3>
                <p className="text-sm text-gray-500 mb-6">
                  Start a conversation in this focus mode to see it here.
                </p>
                <Link href={`/chat?focus_mode_id=${id}`}>
                  <Button className="rounded-full text-custom-dark-green border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]">
                    <Plus className="w-4 h-4 mr-2" />
                    Start Your First Conversation
                  </Button>
                </Link>
              </div>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-4">
              {conversations.map((conversation: any) => (
                <Card
                  key={conversation.id}
                  className="group hover:shadow-lg transition-all duration-200 rounded-2xl overflow-hidden border-0 bg-white"
                >
                  <CardContent className="p-4">
                    <div className="space-y-2">
                      {/* Focus Mode Section - Above title */}
                      {conversation.focus_modes && (
                        <div className="flex items-center gap-2 text-xs text-gray-600">
                          <span className="text-xs">{conversation.focus_modes.icon}</span>
                          <span className="font-medium">{conversation.focus_modes.name}</span>
                        </div>
                      )}

                      {conversation.category && (
                        <div className="flex items-center gap-2 text-sm text-gray-600">
                          <Target className="w-4 h-4 text-[#A3BC02]" />
                          <span className="font-medium">{conversation.category}</span>
                        </div>
                      )}

                      <h3 className="font-medium text-black text-lg leading-tight line-clamp-3 font-sans mb-2 h-[4.25rem]">
                        {conversation.title || "Untitled Conversation"}
                      </h3>

                      <hr className="border-black/10" />

                      <div className="flex items-center justify-between">
                        <span className="text-xs text-black/40 font-sans">
                          Created: {formatDate(conversation.created_at)}
                        </span>

                        <div className="flex items-center gap-3 opacity-100 transition-opacity justify-center">
                          {/* Delete Confirmation Dialog */}
                          <AlertDialog>
                            <AlertDialogTrigger asChild>
                              <Button
                                size="sm"
                                variant="ghost"
                                className="h-4 w-4 p-0 rounded-full hover:bg-white/50"
                              >
                                <Trash2 className="w-4 h-4 text-black/40" />
                              </Button>
                            </AlertDialogTrigger>
                            <AlertDialogContent className="bg-white border border-gray-200 rounded-2xl">
                              <AlertDialogHeader>
                                <AlertDialogTitle className="text-custom-dark-green font-serif">
                                  Delete Conversation
                                </AlertDialogTitle>
                                <AlertDialogDescription className="text-gray-600 font-sans">
                                  Are you sure you want to{" "}
                                  <span className="font-semibold text-red-600">delete</span>{" "}
                                  this conversation?
                                  <br />
                                  <span className="block mt-2">
                                    <span className="font-semibold">
                                      {conversation.title || "Untitled Conversation"}
                                    </span>
                                  </span>
                                  <br />
                                  <span className="block mt-2">
                                    This action{" "}
                                    <span className="font-semibold">cannot be undone</span>.
                                    All messages in this conversation will be{" "}
                                    <span className="font-semibold">
                                      permanently removed
                                    </span>
                                    .
                                  </span>
                                </AlertDialogDescription>
                              </AlertDialogHeader>
                              <AlertDialogFooter>
                                <AlertDialogCancel className="bg-gray-100 hover:bg-gray-200 text-gray-700 border-0 rounded-full font-sans">
                                  Cancel
                                </AlertDialogCancel>
                                <AlertDialogAction
                                  onClick={() => deleteConversation(conversation.id)}
                                  className="bg-red-500 hover:bg-red-600 text-white border-0 rounded-full font-sans"
                                >
                                  Delete
                                </AlertDialogAction>
                              </AlertDialogFooter>
                            </AlertDialogContent>
                          </AlertDialog>

                          {/* Archive Confirmation Dialog */}
                          <AlertDialog>
                            <AlertDialogTrigger asChild>
                              <Button
                                size="sm"
                                variant="ghost"
                                className="h-4 w-4 p-0 rounded-full hover:bg-white/50"
                              >
                                <Archive className={`w-4 h-4 ${
                                  conversation.is_archived
                                    ? 'text-[#A3BC02]'
                                    : 'text-black/40'
                                }`} />
                              </Button>
                            </AlertDialogTrigger>
                            <AlertDialogContent className="bg-white border border-gray-200 rounded-2xl">
                              <AlertDialogHeader>
                                <AlertDialogTitle className="text-custom-dark-green font-serif">
                                  {conversation.is_archived ? "Unarchive" : "Archive"}{" "}
                                  Conversation
                                </AlertDialogTitle>
                                <AlertDialogDescription className="text-gray-600 font-sans">
                                  Are you sure you want to{" "}
                                  <span className="font-semibold">
                                    {conversation.is_archived ? "unarchive" : "archive"}
                                  </span>{" "}
                                  this conversation?
                                  <br />
                                  <span className="block mt-2">
                                    <span className="font-semibold">
                                      {conversation.title || "Untitled Conversation"}
                                    </span>
                                  </span>
                                  <br />
                                  <span className="block mt-2">
                                    {conversation.is_archived ? (
                                      <>
                                        This conversation will be{" "}
                                        <span className="font-semibold">
                                          moved back to your active conversations
                                        </span>
                                        .
                                      </>
                                    ) : (
                                      <>
                                        This conversation will be{" "}
                                        <span className="font-semibold">
                                          hidden from your main conversation list
                                        </span>
                                        .
                                      </>
                                    )}
                                  </span>
                                </AlertDialogDescription>
                              </AlertDialogHeader>
                              <AlertDialogFooter>
                                <AlertDialogCancel className="bg-gray-100 hover:bg-gray-200 text-gray-700 border-0 rounded-full font-sans">
                                  Cancel
                                </AlertDialogCancel>
                                <AlertDialogAction
                                  onClick={() =>
                                    toggleArchiveConversation(
                                      conversation.id,
                                      conversation.is_archived
                                    )
                                  }
                                  className="bg-[#A3BC02] hover:bg-[#8BA000] text-white border-0 rounded-full font-sans"
                                >
                                  {conversation.is_archived ? "Unarchive" : "Archive"}
                                </AlertDialogAction>
                              </AlertDialogFooter>
                            </AlertDialogContent>
                          </AlertDialog>

                          <Link href={`/chat?conversation=${conversation.id}`}>
                            <Button
                              size="sm"
                              variant="ghost"
                              className="h-4 w-4 p-0 rounded-full hover:bg-white/50"
                            >
                              <ExternalLink className="w-4 h-4 text-[#A3BC02]" />
                            </Button>
                          </Link>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

================
File: app/(auth)/focus/page.tsx
================
"use client";

import React, { useState, useEffect, useCallback, memo } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "sonner";
import { 
  Trash2, 
  ExternalLink, 
  Plus, 
  FolderOpen, 
  FileText, 
  MessageSquare, 
  Filter, 
  Check, 
  CircleAlert, 
  MoreHorizontal 
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import Link from "next/link";

interface FocusMode {
  id: string;
  name: string;
  description?: string;
  icon: string;
  created_at: string;
  updated_at: string;
  document_count: number;
  is_active: boolean;
}

interface CreateFocusModeData {
  name: string;
  description?: string;
  icon: string;
}

export default function FocusPage() {
  const router = useRouter();
  const [focusModes, setFocusModes] = useState<FocusMode[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [newFocusMode, setNewFocusMode] = useState<CreateFocusModeData>({
    name: "",
    description: "",
    icon: "🎯",
  });
  const [isCreating, setIsCreating] = useState(false);

  const loadFocusModes = async () => {
    try {
      setIsLoading(true);
      const response = await fetch("/api/focus-modes");
      
      if (response.ok) {
        const data = await response.json();
        setFocusModes(data.focus_modes || []);
      } else {
        toast.error("Failed to load focus modes");
      }
    } catch (error) {
      console.error("Failed to load focus modes:", error);
      toast.error("Failed to load focus modes");
    } finally {
      setIsLoading(false);
    }
  };

  const createFocusMode = async () => {
    if (!newFocusMode.name.trim()) {
      toast.error("Focus mode name is required");
      return;
    }

    try {
      setIsCreating(true);
      const response = await fetch("/api/focus-modes", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newFocusMode),
      });

      if (response.ok) {
        const createdFocusMode = await response.json();
        setFocusModes((prev) => [createdFocusMode, ...prev]);
        setCreateDialogOpen(false);
        setNewFocusMode({ name: "", description: "", icon: "🎯" });
        toast.success("Focus mode created successfully");
      } else {
        const error = await response.json();
        toast.error(error.message || "Failed to create focus mode");
      }
    } catch (error) {
      console.error("Failed to create focus mode:", error);
      toast.error("Failed to create focus mode");
    } finally {
      setIsCreating(false);
    }
  };

  const deleteFocusMode = async (focusModeId: string) => {
    try {
      const response = await fetch(`/api/focus-modes/${focusModeId}`, {
        method: "DELETE",
      });

      if (response.ok) {
        setFocusModes((prev) => prev.filter((fm) => fm.id !== focusModeId));
        toast.success("Focus mode deleted");
      } else {
        toast.error("Failed to delete focus mode");
      }
    } catch (error) {
      console.error("Failed to delete focus mode:", error);
      toast.error("Failed to delete focus mode");
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
      day: "numeric",
      month: "long",
      year: "numeric",
    });
  };

  useEffect(() => {
    loadFocusModes();
  }, []);

  const FocusModeCard = memo(({ focusMode }: { focusMode: FocusMode }) => {
    return (
      <div
        className="group cursor-pointer relative bg-white border-none rounded-xl p-4 py-[14px] hover:shadow-md transition-all duration-200 hover:border-gray-300 flex flex-col justify-between"
        onClick={() => router.push(`/focus/${focusMode.id}`)}
      >
        {/* Focus Mode Header */}
        <div className="pb-2">
          <div className="flex items-center gap-2 mb-2">
            <span className="text-xl">{focusMode.icon}</span>
            <h3 className="text-sm font-medium text-gray-900 font-sans line-clamp-1 leading-tight">
              {focusMode.name}
            </h3>
          </div>
          {focusMode.description && (
            <p className="text-xs text-gray-600 line-clamp-2 leading-tight">
              {focusMode.description}
            </p>
          )}
        </div>

        {/* Footer */}
        <div className="flex justify-center mt-auto items-center">
          {/* Document Count */}
          <div className="flex items-center">
            <FileText className="w-4 h-4 text-gray-400" />
          </div>

          {/* Date/Time */}
          <div className="flex-1 text-center">
            <p className="text-xs text-black/50 font-sans">
              {focusMode.document_count} docs
            </p>
          </div>

          {/* Three Dots Menu */}
          <div className="opacity-100 flex items-center">
            <DropdownMenu modal={false}>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-5 w-5 p-0 rounded-full hover:bg-gray-100"
                  onClick={(e) => e.stopPropagation()}
                >
                  <MoreHorizontal className="w-3 h-3" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem
                  onClick={(e) => {
                    e.stopPropagation();
                    router.push(`/focus/${focusMode.id}`);
                  }}
                >
                  <ExternalLink className="w-4 h-4 mr-2" />
                  Open Focus Mode
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  onClick={(e) => {
                    e.stopPropagation();
                    deleteFocusMode(focusMode.id);
                  }}
                  className="text-red-600"
                >
                  <Trash2 className="w-4 h-4 mr-2" />
                  Delete
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>

        {/* Status Indicator */}
        <div className="absolute -bottom-1 -right-1">
          {focusMode.is_active ? (
            <div className="w-4 h-4 rounded-full flex items-center justify-center bg-white border-none [box-shadow:inset_0_0_16px_0_rgba(163,188,1,0.4)]">
              <Check className="w-3 h-3 text-custom-dark-green" />
            </div>
          ) : (
            <div className="w-4 h-4 rounded-full flex items-center justify-center bg-gray-50 border-none ">
              <CircleAlert className="w-3 h-3 text-gray-400" />
            </div>
          )}
        </div>
      </div>
    );
  });

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#A3BC02] mx-auto mb-4"></div>
          <p className="text-gray-500">Loading focus modes...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-none">
      <div className="max-w-7xl 2xl:max-w-screen-2xl mx-auto px-6 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-4">
          <h1 className="text-8xl font-medium text-custom-dark-green font-serif">
            Focus Spaces
          </h1>
          <div className="flex items-center gap-2">
            <Button
              className="flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans bg-[#eaeaea] text-custom-dark-green border border-gray-200 hover:bg-gray-50"
            >
              <Filter className="w-4 h-4" />
              Filter
            </Button>
            <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>
              <DialogTrigger asChild>
                <Button
                  className="flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
                >
                  <Plus className="w-4 h-4" />
                  Create Focus Mode
                </Button>
              </DialogTrigger>
              <DialogContent className="bg-white border border-gray-200 rounded-2xl">
                <DialogHeader>
                  <DialogTitle className="text-custom-dark-green font-serif">
                    Create New Focus Mode
                  </DialogTitle>
                  <DialogDescription className="text-gray-600 font-sans">
                    Create a focused workspace to organize your documents and conversations around a specific topic or project.
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Name *
                    </label>
                    <Input
                      placeholder="e.g., Research Project, Meeting Notes"
                      value={newFocusMode.name}
                      onChange={(e) =>
                        setNewFocusMode((prev) => ({ ...prev, name: e.target.value }))
                      }
                      className="rounded-full"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Description
                    </label>
                    <Textarea
                      placeholder="Optional description for this focus mode..."
                      value={newFocusMode.description}
                      onChange={(e) =>
                        setNewFocusMode((prev) => ({ ...prev, description: e.target.value }))
                      }
                      className="rounded-2xl"
                      rows={3}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Icon
                    </label>
                    <div className="flex items-center gap-2">
                      <Input
                        placeholder="🎯"
                        value={newFocusMode.icon}
                        onChange={(e) =>
                          setNewFocusMode((prev) => ({ ...prev, icon: e.target.value }))
                        }
                        className="rounded-full w-20 text-center"
                        maxLength={2}
                      />
                      <span className="text-sm text-gray-500">
                        Choose an emoji to represent this focus mode
                      </span>
                    </div>
                  </div>
                </div>
                <DialogFooter>
                  <Button
                    variant="outline"
                    onClick={() => setCreateDialogOpen(false)}
                    className="rounded-full font-sans"
                  >
                    Cancel
                  </Button>
                  <Button
                    onClick={createFocusMode}
                    disabled={isCreating || !newFocusMode.name.trim()}
                    className="bg-[#A3BC02] hover:bg-[#8BA000] text-white rounded-full font-sans"
                  >
                    {isCreating ? "Creating..." : "Create Focus Mode"}
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>
        </div>

        {/* Description */}
        <div className="mb-8">
          <p className="text-gray-600 text-sm font-sans">
            Create focused workspaces to organize your documents and conversations around specific topics or projects.
          </p>
        </div>

        {focusModes.length === 0 ? (
          <div className="text-center py-16">
            <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 mb-6">
              <FolderOpen className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-700 mb-2">
                No focus modes yet
              </h3>
              <p className="text-sm text-gray-500 mb-6">
                Create your first focus mode to organize documents and conversations around specific topics or projects.
              </p>
              <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>
                <DialogTrigger asChild>
                  <Button className="rounded-full text-custom-dark-green border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]">
                    <Plus className="w-4 h-4 mr-2" />
                    Create Your First Focus Mode
                  </Button>
                </DialogTrigger>
              </Dialog>
            </div>
          </div>
        ) : (
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-4">
            {focusModes.map((focusMode) => (
              <div key={focusMode.id}>
                <FocusModeCard focusMode={focusMode} />
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

================
File: app/(auth)/history/page.tsx
================
"use client";

import { useState, useEffect, useRef, useCallback, memo } from "react";
import { Button } from "@/components/ui/button";
import { useSearchParams } from "next/navigation";
import { Card, CardContent } from "@/components/ui/card";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { toast } from "sonner";
import { Clock, Trash2, Archive, ExternalLink, Target, Square } from "lucide-react";
import Link from "next/link";
import ChatSidebar from "@/components/history/ChatSidebar";

interface Conversation {
  id: string;
  title?: string;
  created_at: string;
  updated_at: string;
  is_archived: boolean;
  message_count?: number;
  category?: string;
  focus_mode_id?: string;
  metadata?: any;
  user_id?: string;
  tenant_id?: string;
  focus_modes?: {
    id: string;
    name: string;
    icon: string;
  };
}

export default function HistoryPage() {
  const [conversations, setConversations] = useState<Conversation[]>([]);
  const [filteredConversations, setFilteredConversations] = useState<
    Conversation[]
  >([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [page, setPage] = useState(1);
  const [showArchived, setShowArchived] = useState(false);
  const [selectedConversations, setSelectedConversations] = useState<Set<string>>(new Set());
  const [chatSidebarOpen, setChatSidebarOpen] = useState(false);
  const [selectedConversationId, setSelectedConversationId] = useState<string>("");
  const searchParams = useSearchParams();
  const searchQuery = searchParams.get("search") || "";


  const loadConversations = async (resetData = true) => {
    try {
      if (resetData) {
        setIsLoading(true);
        setPage(1);
        setHasMore(true);
      } else {
        setIsLoadingMore(true);
      }

      const response = await fetch(
        `/api/conversations?include_archived=${showArchived}&page_size=50&page=${
          resetData ? 1 : page
        }`
      );
      if (response.ok) {
        const data = await response.json();
        const newConversations = data.conversations || [];

        // Sort conversations by updated_at descending
        const sortedConversations = newConversations.sort((a: Conversation, b: Conversation) =>
          new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()
        );

        if (resetData) {
          setConversations(sortedConversations);
          setPage(2); // Set to 2 for next load
        } else {
          // Prevent duplicates by filtering out conversations we already have
          setConversations((prev) => {
            const existingIds = new Set(prev.map((conv) => conv.id));
            const uniqueNewConversations = sortedConversations.filter(
              (conv: Conversation) => !existingIds.has(conv.id)
            );
            return [...prev, ...uniqueNewConversations];
          });
          setPage((prev) => prev + 1); // Increment for next load
        }

        const hasMoreData = newConversations.length === 50;
        setHasMore(hasMoreData);
      } else {
        toast.error("Failed to load conversation history");
      }
    } catch (error) {
      console.error("Failed to load conversations:", error);
      toast.error("Failed to load conversation history");
    } finally {
      setIsLoading(false);
      setIsLoadingMore(false);
    }
  };

  const loadMoreConversations = async () => {
    if (isLoadingMore || !hasMore) return;
    await loadConversations(false);
  };

  const filterConversations = () => {
    let filtered = conversations;

    if (searchQuery.trim()) {
      filtered = conversations.filter((conv) =>
        conv.title?.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    setFilteredConversations(filtered);
  };

  useEffect(() => {
    loadConversations();
  }, [showArchived]);

  useEffect(() => {
    filterConversations();
  }, [conversations, searchQuery]);


  const deleteConversation = async (conversationId: string) => {
    try {
      const response = await fetch(`/api/conversations/${conversationId}`, {
        method: "DELETE",
      });

      if (response.ok) {
        setConversations((prev) =>
          prev.filter((conv) => conv.id !== conversationId)
        );
        toast.success("Conversation deleted");
      } else {
        toast.error("Failed to delete conversation");
      }
    } catch (error) {
      console.error("Failed to delete conversation:", error);
      toast.error("Failed to delete conversation");
    }
  };

  const toggleArchiveConversation = async (
    conversationId: string,
    isArchived: boolean
  ) => {
    try {
      const response = await fetch(`/api/conversations/${conversationId}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ is_archived: !isArchived }),
      });

      if (response.ok) {
        setConversations((prev) =>
          prev.map((conv) =>
            conv.id === conversationId
              ? { ...conv, is_archived: !isArchived }
              : conv
          )
        );
        toast.success(
          isArchived ? "Conversation unarchived" : "Conversation archived"
        );
      } else {
        toast.error("Failed to update conversation");
      }
    } catch (error) {
      console.error("Failed to update conversation:", error);
      toast.error("Failed to update conversation");
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
      day: "numeric",
      month: "long",
      year: "numeric",
    });
  };

  const groupConversationsByPeriod = () => {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const weekStart = new Date(today);
    weekStart.setDate(today.getDate() - today.getDay());
    const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);

    const groups = {
      today: [] as Conversation[],
      thisWeek: [] as Conversation[],
      thisMonth: [] as Conversation[],
      older: [] as Conversation[],
    };

    filteredConversations.forEach((conv) => {
      const convDate = new Date(conv.created_at);
      const convDateOnly = new Date(
        convDate.getFullYear(),
        convDate.getMonth(),
        convDate.getDate()
      );

      if (convDateOnly.getTime() === today.getTime()) {
        groups.today.push(conv);
      } else if (convDate >= weekStart && convDate < today) {
        groups.thisWeek.push(conv);
      } else if (convDate >= monthStart && convDate < weekStart) {
        groups.thisMonth.push(conv);
      } else {
        groups.older.push(conv);
      }
    });

    return groups;
  };

  // Selection functions
  const toggleConversationSelection = useCallback((conversationId: string) => {
    setSelectedConversations(prev => {
      const newSelection = new Set(prev);
      if (newSelection.has(conversationId)) {
        newSelection.delete(conversationId);
      } else {
        newSelection.add(conversationId);
      }
      return newSelection;
    });
  }, []);

  const selectAllInSection = (conversations: Conversation[]) => {
    const conversationIds = conversations.map(conv => conv.id);
    const selectedInSection = conversationIds.filter(id => selectedConversations.has(id));
    const allSelected = selectedInSection.length === conversationIds.length;

    setSelectedConversations(prev => {
      const newSelection = new Set(prev);
      if (allSelected) {
        // Unselect all in this section
        conversationIds.forEach(id => newSelection.delete(id));
      } else {
        // Select all in this section
        conversationIds.forEach(id => newSelection.add(id));
      }
      return newSelection;
    });
  };

  const bulkArchive = async (conversationIds: string[], archive: boolean) => {
    try {
      const response = await fetch('/api/conversations/batch/archive', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          conversation_ids: conversationIds,
          is_archived: archive
        })
      });

      if (!response.ok) {
        throw new Error('Batch archive operation failed');
      }

      const result = await response.json();

      setConversations(prev =>
        prev.map(conv =>
          conversationIds.includes(conv.id)
            ? { ...conv, is_archived: archive }
            : conv
        )
      );
      setSelectedConversations(new Set());

      if (result.failed_count > 0) {
        toast.warning(`${result.success_count} conversations ${archive ? 'archived' : 'unarchived'}, ${result.failed_count} failed`);
      } else {
        toast.success(`${result.success_count} conversations ${archive ? 'archived' : 'unarchived'}`);
      }
    } catch (error) {
      console.error('Bulk archive error:', error);
      toast.error("Failed to update conversations");
    }
  };

  const bulkDelete = async (conversationIds: string[]) => {
    try {
      const response = await fetch('/api/conversations/batch/delete', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          conversation_ids: conversationIds
        })
      });

      if (!response.ok) {
        throw new Error('Batch delete operation failed');
      }

      const result = await response.json();

      setConversations(prev => prev.filter(conv => !conversationIds.includes(conv.id)));
      setSelectedConversations(new Set());

      if (result.failed_count > 0) {
        toast.warning(`${result.success_count} conversations deleted, ${result.failed_count} failed`);
      } else {
        toast.success(`${result.success_count} conversations deleted`);
      }
    } catch (error) {
      console.error('Bulk delete error:', error);
      toast.error("Failed to delete conversations");
    }
  };

  const conversationGroups = groupConversationsByPeriod();

  const ConversationCard = memo(({
    conversation,
  }: {
    conversation: Conversation;
  }) => {
    const isSelected = selectedConversations.has(conversation.id);

    const handleCardClick = useCallback((e: React.MouseEvent) => {
      // Don't select if clicking on action buttons
      const target = e.target as HTMLElement;
      if (target.closest('button') || target.closest('a')) return;
      toggleConversationSelection(conversation.id);
    }, [conversation.id, toggleConversationSelection]);

    return (
      <Card
        className={`group hover:shadow-lg transition-all duration-200 rounded-2xl overflow-hidden cursor-pointer ${
          isSelected
            ? 'border-1 bg-gradient-to-r from-white via-[#a3bc0144] to-[#a3bc016b] p-[2px]'
            : 'border-0 bg-white'
        }`}
        onClick={handleCardClick}
      >
        {isSelected ? (
          <div className="bg-gradient-to-r from-white via-[#fefff8] to-[#FCFFEC] rounded-2xl h-full">
            <CardContent className="p-4">
              <div className="space-y-2">
                {/* Focus Mode Section - Above title */}
                {conversation.focus_modes && (
                  <div className="flex items-center gap-2 text-xs text-gray-600">
                    <span className="text-xs">{conversation.focus_modes.icon}</span>
                    <span className="font-medium">{conversation.focus_modes.name}</span>
                  </div>
                )}

                {conversation.category && (
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <Target className="w-4 h-4 text-[#A3BC02]" />
                    <span className="font-medium">{conversation.category}</span>
                  </div>
                )}

                <h3 className="font-medium text-black text-lg leading-tight line-clamp-3 font-sans mb-2 h-[4.25rem]">
                  {conversation.title || "Untitled Conversation"}
                </h3>

                <hr className="border-black/10" />

                <div className="flex items-center justify-between">
                  <span className="text-xs text-black/40 font-sans">
                    Created: {formatDate(conversation.created_at)}
                  </span>

                  <div className="flex items-center gap-3 opacity-100 transition-opacity justify-center">
                    {/* Delete Confirmation Dialog */}
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button
                          size="sm"
                          variant="ghost"
                          className="h-4 w-4 p-0 rounded-full hover:bg-white/50"
                        >
                          <Trash2 className="w-4 h-4 text-black/40" />
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent className="bg-white border border-gray-200 rounded-2xl">
                        <AlertDialogHeader>
                          <AlertDialogTitle className="text-custom-dark-green font-serif">
                            Delete Conversation
                          </AlertDialogTitle>
                          <AlertDialogDescription className="text-gray-600 font-sans">
                            Are you sure you want to{" "}
                            <span className="font-semibold text-red-600">delete</span>{" "}
                            this conversation?
                            <br />
                            <span className="block mt-2">
                              <span className="font-semibold">
                                {conversation.title || "Untitled Conversation"}
                              </span>
                            </span>
                            <br />
                            <span className="block mt-2">
                              This action{" "}
                              <span className="font-semibold">cannot be undone</span>.
                              All messages in this conversation will be{" "}
                              <span className="font-semibold">
                                permanently removed
                              </span>
                              .
                            </span>
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel className="bg-gray-100 hover:bg-gray-200 text-gray-700 border-0 rounded-full font-sans">
                            Cancel
                          </AlertDialogCancel>
                          <AlertDialogAction
                            onClick={() => deleteConversation(conversation.id)}
                            className="bg-red-500 hover:bg-red-600 text-white border-0 rounded-full font-sans"
                          >
                            Delete
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>

                    {/* Archive Confirmation Dialog */}
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button
                          size="sm"
                          variant="ghost"
                          className="h-4 w-4 p-0 rounded-full hover:bg-white/50"
                        >
                          <Archive className={`w-4 h-4 ${
                            conversation.is_archived
                              ? 'text-[#A3BC02]'
                              : 'text-black/40'
                          }`} />
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent className="bg-white border border-gray-200 rounded-2xl">
                        <AlertDialogHeader>
                          <AlertDialogTitle className="text-custom-dark-green font-serif">
                            {conversation.is_archived ? "Unarchive" : "Archive"}{" "}
                            Conversation
                          </AlertDialogTitle>
                          <AlertDialogDescription className="text-gray-600 font-sans">
                            Are you sure you want to{" "}
                            <span className="font-semibold">
                              {conversation.is_archived ? "unarchive" : "archive"}
                            </span>{" "}
                            this conversation?
                            <br />
                            <span className="block mt-2">
                              <span className="font-semibold">
                                {conversation.title || "Untitled Conversation"}
                              </span>
                            </span>
                            <br />
                            <span className="block mt-2">
                              {conversation.is_archived ? (
                                <>
                                  This conversation will be{" "}
                                  <span className="font-semibold">
                                    moved back to your active conversations
                                  </span>
                                  .
                                </>
                              ) : (
                                <>
                                  This conversation will be{" "}
                                  <span className="font-semibold">
                                    hidden from your main conversation list
                                  </span>
                                  .
                                </>
                              )}
                            </span>
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel className="bg-gray-100 hover:bg-gray-200 text-gray-700 border-0 rounded-full font-sans">
                            Cancel
                          </AlertDialogCancel>
                          <AlertDialogAction
                            onClick={() =>
                              toggleArchiveConversation(
                                conversation.id,
                                conversation.is_archived
                              )
                            }
                            className="bg-[#A3BC02] hover:bg-[#8BA000] text-white border-0 rounded-full font-sans"
                          >
                            {conversation.is_archived ? "Unarchive" : "Archive"}
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>

                    <Button
                      size="sm"
                      variant="ghost"
                      className="h-4 w-4 p-0 rounded-full hover:bg-white/50"
                      onClick={() => {
                        setSelectedConversationId(conversation.id);
                        setChatSidebarOpen(true);
                      }}
                    >
                      <ExternalLink className="w-4 h-4 text-[#A3BC02]" />
                    </Button>
                  </div>
                </div>
              </div>
            </CardContent>
          </div>
        ) : (
          <CardContent className="p-4">
            <div className="space-y-2">
              {/* Focus Mode Section - Above title */}
              {conversation.focus_modes && (
                <div className="flex items-center gap-2 text-xs text-gray-600">
                  <span className="text-xs">{conversation.focus_modes.icon}</span>
                  <span className="font-medium">{conversation.focus_modes.name}</span>
                </div>
              )}

              {conversation.category && (
                <div className="flex items-center gap-2 text-sm text-gray-600">
                  <Target className="w-4 h-4 text-[#A3BC02]" />
                  <span className="font-medium">{conversation.category}</span>
                </div>
              )}

              <h3 className="font-medium text-black text-lg leading-tight line-clamp-3 font-sans mb-2 h-[4.25rem]">
                {conversation.title || "Untitled Conversation"}
              </h3>

              <hr className="border-black/10" />

              <div className="flex items-center justify-between">
                <span className="text-xs text-black/40 font-sans">
                  Created: {formatDate(conversation.created_at)}
                </span>

                <div className="flex items-center gap-3 opacity-100 transition-opacity justify-center">
                  {/* Delete Confirmation Dialog */}
                  <AlertDialog>
                    <AlertDialogTrigger asChild>
                      <Button
                        size="sm"
                        variant="ghost"
                        className="h-4 w-4 p-0 rounded-full hover:bg-white/50"
                      >
                        <Trash2 className="w-4 h-4 text-black/40" />
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent className="bg-white border border-gray-200 rounded-2xl">
                      <AlertDialogHeader>
                        <AlertDialogTitle className="text-custom-dark-green font-serif">
                          Delete Conversation
                        </AlertDialogTitle>
                        <AlertDialogDescription className="text-gray-600 font-sans">
                          Are you sure you want to{" "}
                          <span className="font-semibold text-red-600">delete</span>{" "}
                          this conversation?
                          <br />
                          <span className="block mt-2">
                            <span className="font-semibold">
                              {conversation.title || "Untitled Conversation"}
                            </span>
                          </span>
                          <br />
                          <span className="block mt-2">
                            This action{" "}
                            <span className="font-semibold">cannot be undone</span>.
                            All messages in this conversation will be{" "}
                            <span className="font-semibold">
                              permanently removed
                            </span>
                            .
                          </span>
                        </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel className="bg-gray-100 hover:bg-gray-200 text-gray-700 border-0 rounded-full font-sans">
                          Cancel
                        </AlertDialogCancel>
                        <AlertDialogAction
                          onClick={() => deleteConversation(conversation.id)}
                          className="bg-red-500 hover:bg-red-600 text-white border-0 rounded-full font-sans"
                        >
                          Delete
                        </AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>

                  {/* Archive Confirmation Dialog */}
                  <AlertDialog>
                    <AlertDialogTrigger asChild>
                      <Button
                        size="sm"
                        variant="ghost"
                        className="h-4 w-4 p-0 rounded-full hover:bg-white/50"
                      >
                        <Archive className={`w-4 h-4 ${
                          conversation.is_archived
                            ? 'text-[#A3BC02]'
                            : 'text-black/40'
                        }`} />
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent className="bg-white border border-gray-200 rounded-2xl">
                      <AlertDialogHeader>
                        <AlertDialogTitle className="text-custom-dark-green font-serif">
                          {conversation.is_archived ? "Unarchive" : "Archive"}{" "}
                          Conversation
                        </AlertDialogTitle>
                        <AlertDialogDescription className="text-gray-600 font-sans">
                          Are you sure you want to{" "}
                          <span className="font-semibold">
                            {conversation.is_archived ? "unarchive" : "archive"}
                          </span>{" "}
                          this conversation?
                          <br />
                          <span className="block mt-2">
                            <span className="font-semibold">
                              {conversation.title || "Untitled Conversation"}
                            </span>
                          </span>
                          <br />
                          <span className="block mt-2">
                            {conversation.is_archived ? (
                              <>
                                This conversation will be{" "}
                                <span className="font-semibold">
                                  moved back to your active conversations
                                </span>
                                .
                              </>
                            ) : (
                              <>
                                This conversation will be{" "}
                                <span className="font-semibold">
                                  hidden from your main conversation list
                                </span>
                                .
                              </>
                            )}
                          </span>
                        </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel className="bg-gray-100 hover:bg-gray-200 text-gray-700 border-0 rounded-full font-sans">
                          Cancel
                        </AlertDialogCancel>
                        <AlertDialogAction
                          onClick={() =>
                            toggleArchiveConversation(
                              conversation.id,
                              conversation.is_archived
                            )
                          }
                          className="bg-[#A3BC02] hover:bg-[#8BA000] text-white border-0 rounded-full font-sans"
                        >
                          {conversation.is_archived ? "Unarchive" : "Archive"}
                        </AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>

                  <Button
                    size="sm"
                    variant="ghost"
                    className="h-4 w-4 p-0 rounded-full hover:bg-white/50"
                    onClick={() => {
                      setSelectedConversationId(conversation.id);
                      setChatSidebarOpen(true);
                    }}
                  >
                    <ExternalLink className="w-4 h-4 text-[#A3BC02]" />
                  </Button>
                </div>
              </div>
            </div>
          </CardContent>
        )}
      </Card>
    );
  });

  const ConversationSection = ({
    title,
    conversations,
  }: {
    title: string;
    conversations: Conversation[];
  }) => {
    if (conversations.length === 0) return null;

    const sectionConversationIds = conversations.map(conv => conv.id);
    const selectedInSection = sectionConversationIds.filter(id => selectedConversations.has(id));
    const hasSelections = selectedInSection.length > 0;
    const allSelected = selectedInSection.length === sectionConversationIds.length;

    return (
      <div className="mb-8">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-lg font-medium text-gray-900 font-sans">
            {title}
          </h2>

          <div className="flex items-center gap-2">
            {/* Archive Button - only show when selections exist */}

            {/* Selected Count - only show when selections exist */}
            {hasSelections && (
              <div className="flex items-center gap-1 text-xs text-gray-600 bg-[#A3BC02]/10 px-2 py-1 rounded-full">
                <div className="w-2 h-2 bg-[#A3BC02] rounded-full"></div>
                {selectedInSection.length} Selected
              </div>
            )}
            {hasSelections && (
              <AlertDialog>
                <AlertDialogTrigger asChild>
                  <Button
                    size="sm"
                    variant="outline"
                    className="flex items-center px-4 py-2 text-sm bg-white border-none text-black rounded-full"
                  >
                    <Archive className="w-3 h-3" />
                    Archive
                  </Button>
                </AlertDialogTrigger>
                <AlertDialogContent className="bg-white border border-gray-200 rounded-2xl">
                  <AlertDialogHeader>
                    <AlertDialogTitle className="text-custom-dark-green font-serif">
                      Archive Conversations
                    </AlertDialogTitle>
                    <AlertDialogDescription className="text-gray-600 font-sans">
                      Are you sure you want to <span className="font-semibold">archive</span> {selectedInSection.length} conversation{selectedInSection.length > 1 ? 's' : ''}?
                      <br /><br />
                      <span className="block">
                        These conversations will be <span className="font-semibold">hidden from your main conversation list</span>.
                      </span>
                    </AlertDialogDescription>
                  </AlertDialogHeader>
                  <AlertDialogFooter>
                    <AlertDialogCancel className="bg-gray-100 hover:bg-gray-200 text-gray-700 border-0 rounded-full font-sans">
                      Cancel
                    </AlertDialogCancel>
                    <AlertDialogAction
                      onClick={() => bulkArchive(selectedInSection, true)}
                      className="bg-[#A3BC02] hover:bg-[#8BA000] text-white border-0 rounded-full font-sans"
                    >
                      Archive {selectedInSection.length} Conversation{selectedInSection.length > 1 ? 's' : ''}
                    </AlertDialogAction>
                  </AlertDialogFooter>
                </AlertDialogContent>
              </AlertDialog>
            )}

            {/* Delete Button - only show when selections exist */}
            {hasSelections && (
              <AlertDialog>
                <AlertDialogTrigger asChild>
                  <Button
                    size="sm"
                    variant="outline"
                    className="flex items-center px-4 py-2 text-sm bg-white border-none text-black rounded-full"
                  >
                    <Trash2 className="w-3 h-3" />
                    Delete
                  </Button>
                </AlertDialogTrigger>
                <AlertDialogContent className="bg-white border border-gray-200 rounded-2xl">
                  <AlertDialogHeader>
                    <AlertDialogTitle className="text-custom-dark-green font-serif">
                      Delete Conversations
                    </AlertDialogTitle>
                    <AlertDialogDescription className="text-gray-600 font-sans">
                      Are you sure you want to <span className="font-semibold text-red-600">delete</span> {selectedInSection.length} conversation{selectedInSection.length > 1 ? 's' : ''}?
                      <br /><br />
                      <span className="block">
                        This action <span className="font-semibold">cannot be undone</span>. All messages in these conversations will be <span className="font-semibold">permanently removed</span>.
                      </span>
                    </AlertDialogDescription>
                  </AlertDialogHeader>
                  <AlertDialogFooter>
                    <AlertDialogCancel className="bg-gray-100 hover:bg-gray-200 text-gray-700 border-0 rounded-full font-sans">
                      Cancel
                    </AlertDialogCancel>
                    <AlertDialogAction
                      onClick={() => bulkDelete(selectedInSection)}
                      className="bg-red-500 hover:bg-red-600 text-white border-0 rounded-full font-sans"
                    >
                      Delete {selectedInSection.length} Conversation{selectedInSection.length > 1 ? 's' : ''}
                    </AlertDialogAction>
                  </AlertDialogFooter>
                </AlertDialogContent>
              </AlertDialog>
            )}

            {/* Select All Button - always show */}
            <Button
              size="sm"
              variant="outline"
              onClick={() => selectAllInSection(conversations)}
              className={`flex items-center gap-2 rounded-full font-sans ${
                allSelected
                  ? 'border-1 bg-gradient-to-r from-[#a3bc010a] via-[#a3bc0144] to-[#a3bc016b] p-[2px]'
                  : 'bg-white border-gray-200'
              }`}
            >
              {allSelected ? (
                <div className="bg-gradient-to-r from-white via-[#fefff8] to-[#FCFFEC] rounded-full px-2 py-[6px] flex items-center gap-2">
                  <Square className="w-3 h-3 fill-[#A3BC02] text-[#A3BC02]" />
                  Unselect All
                </div>
              ) : (
                <>
                  <Square className="w-3 h-3 text-[#A3BC02]" />
                  Select All
                </>
              )}
            </Button>
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-4">
          {conversations.map((conversation) => (
            <div key={conversation.id}>
              <ConversationCard conversation={conversation} />
            </div>
          ))}
        </div>
      </div>
    );
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#A3BC02] mx-auto mb-4"></div>
          <p className="text-gray-500">Loading conversations...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-none">
      <div className="max-w-7xl 2xl:max-w-screen-2xl mx-auto px-6 py-8">
        <div className="flex items-center justify-between mb-8">
          <h1 className="text-8xl font-medium text-custom-dark-green font-serif">
            Conversation History
          </h1>
          <div className="flex items-center gap-6">
            <span className="text-sm text-gray-500 font-sans">
              {searchQuery.trim()
                ? `${filteredConversations.length} of ${conversations.length} shown`
                : `${conversations.length} loaded${hasMore ? "+" : ""}`}
            </span>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setShowArchived(!showArchived)}
              className="flex items-center gap-2 rounded-full font-sans bg-[#F0F0F0]"
            >
              <Clock className="w-4 h-4" />
              {showArchived ? "Hide Archived" : "Show Archived"}
            </Button>
          </div>
        </div>

        {filteredConversations.length === 0 ? (
          <div className="flex items-center justify-center py-12">
            <div className="text-center max-w-md">
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                {searchQuery
                  ? "No conversations found"
                  : "No conversations yet"}
              </h3>
              <p className="text-gray-500 mb-4">
                {searchQuery
                  ? "Try adjusting your search query"
                  : "Start a conversation with the AI assistant to see your history here"}
              </p>
              {!searchQuery && (
                <Link href="/chat">
                  <Button className="bg-[#A3BC02] hover:bg-[#8BA000]">
                    Start New Conversation
                  </Button>
                </Link>
              )}
            </div>
          </div>
        ) : (
          <>
            <ConversationSection
              title="Today"
              conversations={conversationGroups.today}
            />
            <ConversationSection
              title="This Week"
              conversations={conversationGroups.thisWeek}
            />
            <ConversationSection
              title="This Month"
              conversations={conversationGroups.thisMonth}
            />
            <ConversationSection
              title="Older"
              conversations={conversationGroups.older}
            />


            {/* Loading Indicator */}
            {isLoadingMore && (
              <div className="flex items-center justify-center py-8">
                <div className="text-center">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#A3BC02] mx-auto mb-4"></div>
                  <p className="text-gray-500 font-sans">
                    Loading more conversations...
                  </p>
                </div>
              </div>
            )}

            {/* Manual Load More Button */}
            {hasMore && !isLoadingMore && (
              <div className="flex items-center justify-center py-8">
                <Button
                  onClick={loadMoreConversations}
                  variant="outline"
                  className="bg-white border-[#A3BC02] text-[#A3BC02] hover:bg-[#A3BC02] hover:text-white rounded-full font-sans"
                >
                  Load more conversations
                </Button>
              </div>
            )}
          </>
        )}
      </div>

      {/* Chat Sidebar */}
      <ChatSidebar
        isOpen={chatSidebarOpen}
        onClose={() => setChatSidebarOpen(false)}
        conversationId={selectedConversationId}
      />
    </div>
  );
}

================
File: app/(auth)/library/[[...path]]/page.tsx
================
"use client";

import { useState, useEffect, useCallback, useRef } from "react";
import { useRouter, useParams, useSearchParams } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { clientApiRequestJson } from "@/lib/client-api";
import { toast } from "sonner";
import {
  Folder,
  File,
  Upload,
  Search,
  FolderPlus,
  ChevronRight,
  MoreHorizontal,
  Trash2,
  Edit3,
  Download,
  Eye,
  FileText,
  Loader2,
  Star,
  Filter,
  CloudUpload,
  Home,
  Check,
  AlertTriangle,
  CircleAlert,
  Clock,
  CheckCircle,
  XCircle,
} from "lucide-react";
import Image from "next/image";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { FileUploadDialog } from "@/components/upload/FileUploadDialog";
import { DocumentViewer } from "@/components/document/DocumentViewer";
import { format } from "date-fns";
import { Badge } from "@/components/ui/badge";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Alert } from "@/components/ui/alert";
import { useIntegrations } from "@/lib/integrations-context";

// Types
interface FolderType {
  id: string;
  name: string;
  description?: string;
  parent_id?: string;
  created_at: string;
  updated_at: string;
  document_count: number;
  subdirectory_count: number;
  total_size_bytes: number;
  path: string;
}

interface Document {
  id: string;
  name: string;
  source_type: string;
  status: string;
  created_at: string;
  updated_at: string;
  file_size_bytes?: number | null;
  extension?: string | null;
  processing_status: string;
  uploaded_by?: string | null;
  chunk_count?: number | null;
  has_permission?: boolean;
  view_url?: string | null;
  thumbnail_url?: string | null;
  folder_id?: string | null;
}

interface FolderResponse {
  items: FolderType[];
  total: number;
  page: number;
  size: number;
  has_more: boolean;
}

interface DocumentsResponse {
  items: Document[];
  total: number;
  page: number;
  size: number;
  has_more: boolean;
}

interface BreadcrumbItem {
  id: string | null;
  name: string;
  path: string;
}

export default function LibraryPage() {
  const router = useRouter();
  const params = useParams();
  const searchParams = useSearchParams();
  const { googleDriveConnections } = useIntegrations();

  // Extract current folder ID from URL params
  const getCurrentFolderId = (): string | null => {
    if (!params.path || !Array.isArray(params.path)) return null;
    if (params.path.length >= 2 && params.path[0] === "f") {
      return params.path[1];
    }
    return null;
  };

  const [currentFolder, setCurrentFolder] = useState<FolderType | null>(null);
  const [breadcrumbs, setBreadcrumbs] = useState<BreadcrumbItem[]>([]);
  const [documents, setDocuments] = useState<Document[]>([]);
  const [currentFolderId, setCurrentFolderId] = useState<string | null>(
    getCurrentFolderId()
  );
  const [isLoading, setIsLoading] = useState(true);
  const [isLoadingDocuments, setIsLoadingDocuments] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [viewMode, setViewMode] = useState<"folders" | "recent" | "starred">(
    "folders"
  );
  const [isFilterOpen, setIsFilterOpen] = useState(false);
  const [activeFilters, setActiveFilters] = useState<{
    documentTypes: string[];
    processingStatus: string[];
  }>({
    documentTypes: [],
    processingStatus: [],
  });

  // Dialog states
  const [isUploadOpen, setIsUploadOpen] = useState(false);
  const [isCreateFolderOpen, setIsCreateFolderOpen] = useState(false);
  const [isViewerOpen, setIsViewerOpen] = useState(false);
  const [viewingDocument, setViewingDocument] = useState<Document | null>(null);
  const [editingFolder, setEditingFolder] = useState<FolderType | null>(null);
  const [isEditFolderOpen, setIsEditFolderOpen] = useState(false);

  // Form states
  const [newFolderName, setNewFolderName] = useState("");
  const [newFolderDescription, setNewFolderDescription] = useState("");

  // Drag and drop states
  const [isDragging, setIsDragging] = useState(false);
  const [isProcessingDrop, setIsProcessingDrop] = useState(false);
  const dragCounter = useRef(0);

  // Update current folder ID when URL changes
  useEffect(() => {
    const folderId = getCurrentFolderId();
    setCurrentFolderId(folderId);
  }, [params]);

  // Navigation functions
  const navigateToFolder = (folderId: string | null) => {
    if (folderId === null) {
      router.push("/library");
    } else {
      router.push(`/library/f/${folderId}`);
    }
  };

  // Fetch current folder and build breadcrumbs
  const fetchCurrentFolder = useCallback(async (folderId: string | null) => {
    if (!folderId) {
      setCurrentFolder(null);
      setBreadcrumbs([{ id: null, name: "Library", path: "/library" }]);
      return;
    }

    try {
      const { data, error } = await clientApiRequestJson<FolderType>(
        `/api/folders/${folderId}`
      );

      if (error) {
        console.error("Error fetching folder:", error);
        // Navigate back to root if folder not found
        navigateToFolder(null);
        return;
      }

      if (data) {
        setCurrentFolder(data);
        // Build breadcrumbs by traversing up the hierarchy
        await buildBreadcrumbs(data);
      }
    } catch (error) {
      console.error("Failed to load folder:", error);
      navigateToFolder(null);
    }
  }, []);

  // Build breadcrumbs for current folder
  const buildBreadcrumbs = async (folder: FolderType) => {
    const crumbs: BreadcrumbItem[] = [
      { id: null, name: "Library", path: "/library" },
    ];

    // Build path by traversing parents
    const ancestors: FolderType[] = [];
    let current = folder;

    while (current.parent_id) {
      try {
        const { data } = await clientApiRequestJson<FolderType>(
          `/api/folders/${current.parent_id}`
        );
        if (data) {
          ancestors.unshift(data);
          current = data;
        } else {
          break;
        }
      } catch {
        break;
      }
    }

    // Add ancestors to breadcrumbs
    ancestors.forEach((ancestor) => {
      crumbs.push({
        id: ancestor.id,
        name: ancestor.name,
        path: `/library/f/${ancestor.id}`,
      });
    });

    // Add current folder
    crumbs.push({
      id: folder.id,
      name: folder.name,
      path: `/library/f/${folder.id}`,
    });

    setBreadcrumbs(crumbs);
  };

  // Fetch documents in current folder
  const fetchDocuments = useCallback(async (folderId?: string | null) => {
    setIsLoadingDocuments(true);
    try {
      let url;
      if (folderId) {
        // Get documents in specific folder
        url = `/api/folders/${folderId}/documents?size=50&source_types=upload`;
      } else {
        // Get only root-level documents (not in any folder) - use "root" as special folder ID
        url = `/api/folders/root/documents?size=50&source_types=upload`;
      }

      const { data, error } = await clientApiRequestJson<DocumentsResponse>(
        url
      );

      if (error) {
        console.error("Error fetching documents:", error);
        setDocuments([]);
      } else if (data && data.items) {
        setDocuments(data.items);
      } else {
        setDocuments([]);
      }
    } catch (error) {
      console.error("Failed to load documents:", error);
      setDocuments([]);
    } finally {
      setIsLoadingDocuments(false);
    }
  }, []);

  useEffect(() => {
    setIsLoading(true);
    fetchCurrentFolder(currentFolderId);
    if (viewMode === "folders") {
      fetchDocuments(currentFolderId);
    }
    setIsLoading(false);
  }, [fetchCurrentFolder, fetchDocuments, currentFolderId, viewMode]);

  const createFolder = async () => {
    if (!newFolderName.trim()) {
      toast.error("Please enter a folder name");
      return;
    }

    try {
      const { data, error } = await clientApiRequestJson("/api/folders", {
        method: "POST",
        body: JSON.stringify({
          name: newFolderName,
          description: newFolderDescription || undefined,
          parent_id: currentFolderId || undefined,
        }),
      });

      if (error) throw new Error(error.message);

      toast.success("Folder created successfully");
      setIsCreateFolderOpen(false);
      setNewFolderName("");
      setNewFolderDescription("");
      // Refresh both documents and folders
      fetchDocuments(currentFolderId);
      fetchChildFolders(currentFolderId);
    } catch (error) {
      toast.error("Failed to create folder");
    }
  };

  const updateFolder = async () => {
    if (!editingFolder || !newFolderName.trim()) return;

    try {
      const { error } = await clientApiRequestJson(
        `/api/folders/${editingFolder.id}`,
        {
          method: "PUT",
          body: JSON.stringify({
            name: newFolderName,
            description: newFolderDescription || undefined,
          }),
        }
      );

      if (error) throw new Error(error.message);

      toast.success("Folder updated successfully");
      setIsEditFolderOpen(false);
      setEditingFolder(null);
      setNewFolderName("");
      setNewFolderDescription("");
      fetchCurrentFolder(currentFolderId);
      fetchDocuments(currentFolderId);
      fetchChildFolders(currentFolderId);
    } catch (error) {
      toast.error("Failed to update folder");
    }
  };

  const deleteFolder = async (folderId: string) => {
    if (
      !confirm(
        "Are you sure you want to delete this folder and all its contents?"
      )
    ) {
      return;
    }

    try {
      const { error } = await clientApiRequestJson(
        `/api/folders/${folderId}?force=true`,
        {
          method: "DELETE",
        }
      );

      if (error) throw new Error(error.message);

      toast.success("Folder deleted successfully");
      // Navigate to parent if we deleted the current folder
      if (currentFolderId === folderId) {
        const parentId = currentFolder?.parent_id || null;
        navigateToFolder(parentId);
      } else {
        fetchDocuments(currentFolderId);
        fetchChildFolders(currentFolderId);
      }
    } catch (error) {
      toast.error("Failed to delete folder");
    }
  };

  const deleteDocument = async (doc: Document) => {
    if (!confirm(`Are you sure you want to delete "${doc.name}"?`)) {
      return;
    }

    try {
      const { error } = await clientApiRequestJson(`/api/documents/${doc.id}`, {
        method: "DELETE",
      });

      if (error) throw new Error(error.message);

      toast.success("Document deleted successfully");
      fetchDocuments(currentFolderId);
    } catch (error) {
      toast.error("Failed to delete document");
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + " " + sizes[i];
  };

  const getFileIcon = (extension?: string | null): string => {
    const extToIcon: Record<string, string> = {
      // Microsoft Office
      doc: "/icons/filetypes/word.png",
      docx: "/icons/filetypes/word.png",
      xls: "/icons/filetypes/excel.png",
      xlsx: "/icons/filetypes/excel.png",
      ppt: "/icons/filetypes/ppt.png",
      pptx: "/icons/filetypes/ppt.png",

      // Adobe
      pdf: "/icons/filetypes/pdf.png",

      // Text files - using generic file icon
      txt: "/icons/filetypes/file.png",
      csv: "/icons/filetypes/excel.png",
      rtf: "/icons/filetypes/file.png",
      xml: "/icons/filetypes/file.png",

      // Web files - using generic file icon
      js: "/icons/filetypes/file.png",
      css: "/icons/filetypes/file.png",

      // Images - using generic file icon
      jpg: "/icons/filetypes/file.png",
      jpeg: "/icons/filetypes/file.png",
      png: "/icons/filetypes/file.png",

      // Audio/Video - using generic file icon
      mp3: "/icons/filetypes/file.png",
      mp4: "/icons/filetypes/file.png",
      avi: "/icons/filetypes/file.png",

      // Other - using generic file icon
      dwg: "/icons/filetypes/file.png",
      iso: "/icons/filetypes/file.png",
      dbf: "/icons/filetypes/file.png",
      fla: "/icons/filetypes/file.png",
    };

    return (
      extToIcon[extension?.toLowerCase() || ""] || "/icons/filetypes/file.png"
    );
  };

  const formatDate = (dateString: string): string => {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - date.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    const isToday = date.toDateString() === now.toDateString();
    const isYesterday = diffDays === 1;

    if (isToday) {
      return `Today ${date.toLocaleTimeString("en-US", {
        hour: "numeric",
        minute: "2-digit",
        hour12: true,
      })}`;
    } else if (isYesterday) {
      return `Yesterday ${date.toLocaleTimeString("en-US", {
        hour: "numeric",
        minute: "2-digit",
        hour12: true,
      })}`;
    } else if (diffDays <= 7) {
      return date.toLocaleDateString("en-US", {
        weekday: "long",
        hour: "numeric",
        minute: "2-digit",
        hour12: true,
      });
    } else {
      return date.toLocaleDateString("en-US", {
        month: "short",
        day: "numeric",
        year: "numeric",
      });
    }
  };

  // Process dropped items (files and folders)
  const processDroppedItems = async (items: DataTransferItemList) => {
    setIsProcessingDrop(true);

    const files: File[] = [];
    const folderStructure: { [path: string]: File[] } = {};

    // Helper function to scan entries recursively
    const scanEntry = async (entry: any, path = ""): Promise<void> => {
      try {
        if (entry.isFile) {
          const file = await new Promise<File>((resolve, reject) => {
            entry.file(resolve, reject);
          });
          const fullPath = path + file.name;
          files.push(file);

          // Group files by their folder path
          if (path) {
            if (!folderStructure[path]) {
              folderStructure[path] = [];
            }
            folderStructure[path].push(file);
          }
        } else if (entry.isDirectory) {
          const dirReader = entry.createReader();
          const entries = await new Promise<any[]>((resolve, reject) => {
            dirReader.readEntries(resolve, reject);
          });

          for (const childEntry of entries) {
            await scanEntry(childEntry, path + entry.name + "/");
          }
        }
      } catch (error) {
        console.error(`Error scanning entry ${entry.name}:`, error);
      }
    };

    // Process all dropped items
    // First, collect all entries (DataTransferItemList can become stale)
    const entries = [];
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      const entry = item.webkitGetAsEntry();
      if (entry) {
        entries.push(entry);
      }
    }

    // Now process all entries
    for (let i = 0; i < entries.length; i++) {
      try {
        const entry = entries[i];
        await scanEntry(entry);
      } catch (error) {
        console.error(`Error processing entry ${i}:`, error);
      }
    }

    try {
      // If we have folder structure, create folders first
      if (Object.keys(folderStructure).length > 0) {
        await createFolderStructure(folderStructure);
      } else if (files.length > 0) {
        // Just files, upload them to current folder
        await uploadFiles(files, currentFolderId);
      }

      // Refresh documents and folders (in case folders were created)
      await fetchDocuments(currentFolderId);
      await fetchChildFolders(currentFolderId);

      const folderCount = Object.keys(folderStructure).length;
      if (folderCount > 0) {
        toast.success(
          `Successfully created ${folderCount} folder(s) and uploaded ${files.length} file(s)`
        );
      } else {
        toast.success(`Successfully uploaded ${files.length} file(s)`);
      }
    } catch (error) {
      console.error("Error processing dropped items:", error);
      toast.error("Failed to process dropped items");
    } finally {
      setIsProcessingDrop(false);
    }
  };

  // Create folder structure from dropped folders
  const createFolderStructure = async (folderStructure: {
    [path: string]: File[];
  }) => {
    const paths = Object.keys(folderStructure).sort();

    // If we're in a specific folder, create folders directly inside it
    if (currentFolderId) {
      // Create folders one by one in the current folder
      const folderMap = new Map<string, string>(); // path -> folder_id

      for (const path of paths) {
        const parts = path.split("/").filter((p) => p);
        let currentPath = "";
        let parentId = currentFolderId;

        for (const part of parts) {
          currentPath += "/" + part;

          if (!folderMap.has(currentPath)) {
            // Create this folder
            const { data, error } = await clientApiRequestJson("/api/folders", {
              method: "POST",
              body: JSON.stringify({
                name: part,
                parent_id: parentId,
              }),
            });

            if (error) {
              console.error(`Failed to create folder ${part}:`, error);
              // If folder creation fails, don't try to upload files to it
              // This prevents files from being uploaded to root when folder creation fails
              continue;
            }

            folderMap.set(currentPath, data.id);
            parentId = data.id;
          } else {
            parentId = folderMap.get(currentPath)!;
          }
        }

        // Upload files to this folder
        const filesToUpload = folderStructure[path];
        if (filesToUpload.length > 0) {
          const targetFolderId = parentId || currentFolderId;
          await uploadFiles(filesToUpload, targetFolderId);
        }
      }
    } else {
      // At root level, use bulk creation
      const allFolderPaths = new Set<string>();
      paths.forEach((path) => {
        const parts = path.split("/").filter((p) => p);
        let currentPath = "";
        parts.forEach((part) => {
          currentPath += "/" + part;
          allFolderPaths.add(currentPath);
        });
      });

      if (allFolderPaths.size > 0) {
        // Prepare bulk folder creation request
        const foldersToCreate = Array.from(allFolderPaths).map((path) => ({
          path: path,
          name:
            path
              .split("/")
              .filter((p) => p)
              .pop() || "",
        }));

        // Create all folders in bulk
        const { data, error } = await clientApiRequestJson(
          "/api/folders/bulk",
          {
            method: "POST",
            body: JSON.stringify({
              folders: foldersToCreate,
              create_parents: true,
              skip_existing: true,
            }),
          }
        );

        if (error) {
          console.error("Failed to create folder structure:", error);
          throw new Error("Failed to create folder structure");
        }

        // Build path to folder ID mapping
        const pathToId = new Map<string, string>();

        if (data && data.created_folders) {
          data.created_folders.forEach((folder: any) => {
            pathToId.set(folder.path, folder.id);
          });
        }

        if (data && data.existing_folders) {
          data.existing_folders.forEach((folder: any) => {
            pathToId.set(folder.path, folder.id);
          });
        }

        // Now upload files to their respective folders
        for (const [path, files] of Object.entries(folderStructure)) {
          if (files.length > 0) {
            // The folderStructure keys have trailing slashes (e.g., "MyFolder/")
            // but the pathToId mapping uses paths without trailing slashes (e.g., "/MyFolder")
            const normalizedPath = "/" + path.replace(/\/$/, "");
            let folderId = pathToId.get(normalizedPath);

            // If not found, try alternate path formats
            if (!folderId) {
              const alternatePaths = [
                path.replace(/\/$/, ""), // "MyFolder/"" -> "MyFolder"
                "/" + path.replace(/\/$/, ""), // "MyFolder/" -> "/MyFolder"
                path, // Original path "MyFolder/"
                normalizedPath.replace(/^\/+/, "/"), // Clean up multiple leading slashes
              ];

              for (const altPath of alternatePaths) {
                folderId = pathToId.get(altPath);
                if (folderId) break;
              }
            }

            if (folderId) {
              await uploadFiles(files, folderId);
            } else {
              console.error(
                `Failed to find folder ID for path: "${path}". Files will be uploaded to root.`
              );
              await uploadFiles(files, null);
            }
          }
        }
      }
    }
  };

  // Upload files helper
  const uploadFiles = async (files: File[], folderId: string | null) => {
    const formData = new FormData();
    files.forEach((file) => {
      formData.append("files", file);
    });

    const url = folderId
      ? `/api/upload/batch?folder_id=${folderId}`
      : "/api/upload/batch";

    const response = await fetch(url, {
      method: "POST",
      body: formData,
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "Upload failed");
    }

    return response.json();
  };

  // Drag and drop handlers
  const handleDragEnter = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter.current++;

    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {
      setIsDragging(true);
    }
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    dragCounter.current--;

    if (dragCounter.current === 0) {
      setIsDragging(false);
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDrop = async (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
    dragCounter.current = 0;

    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {
      await processDroppedItems(e.dataTransfer.items);
    }
  };

  // Fetch folders in current directory for display
  const [childFolders, setChildFolders] = useState<FolderType[]>([]);

  const fetchChildFolders = useCallback(async (parentId: string | null) => {
    try {
      const { data, error } = await clientApiRequestJson<FolderResponse>(
        `/api/folders?parent_id=${parentId || ""}&size=100`
      );

      if (error) {
        console.error("Error fetching child folders:", error);
        setChildFolders([]);
      } else if (data && data.items) {
        setChildFolders(data.items);
      } else {
        setChildFolders([]);
      }
    } catch (error) {
      console.error("Failed to load child folders:", error);
      setChildFolders([]);
    }
  }, []);

  useEffect(() => {
    fetchChildFolders(currentFolderId);
  }, [fetchChildFolders, currentFolderId]);

  // Helper function to categorize documents
  const categorizeDocuments = (docs: Document[]) => {
    const documents = docs.filter(
      (doc) =>
        !["pdf"].includes(doc.extension?.toLowerCase() || "") &&
        !["jpg", "jpeg", "png", "gif", "bmp", "webp"].includes(
          doc.extension?.toLowerCase() || ""
        )
    );
    const pdfs = docs.filter((doc) => doc.extension?.toLowerCase() === "pdf");
    const images = docs.filter((doc) =>
      ["jpg", "jpeg", "png", "gif", "bmp", "webp"].includes(
        doc.extension?.toLowerCase() || ""
      )
    );

    return { documents, pdfs, images };
  };

  // Filter definitions
  const filterDefinitions = {
    documentTypes: [
      {
        id: "spreadsheets",
        label: "Spreadsheets",
        icon: "/icons/filetypes/excel.png",
        extensions: ["csv", "xls", "xlsx"],
      },
      {
        id: "documents",
        label: "Documents",
        icon: "/icons/filetypes/word.png",
        extensions: ["doc", "docx", "txt", "rtf", "md"],
      },
      {
        id: "pdfs",
        label: "PDFs",
        icon: "/icons/filetypes/pdf.png",
        extensions: ["pdf"],
      },
      {
        id: "presentations",
        label: "Presentations",
        icon: "/icons/filetypes/ppt.png",
        extensions: ["ppt", "pptx"],
      },
      {
        id: "images",
        label: "Images",
        icon: "/icons/filetypes/file.png",
        extensions: ["jpg", "jpeg", "png", "gif", "bmp", "webp"],
      },
      {
        id: "others",
        label: "Others",
        icon: "/icons/filetypes/file.png",
        extensions: [], // This will be handled differently in the filter logic
      },
    ],
    processingStatus: [
      { id: "failed", label: "Failed", icon: XCircle },
      { id: "pending", label: "Pending", icon: Clock },
      { id: "processing", label: "Processing", icon: Loader2 },
      { id: "completed", label: "Completed", icon: CheckCircle },
    ],
  };

  // Filter handling functions
  const toggleDocumentTypeFilter = (typeId: string) => {
    setActiveFilters((prev) => ({
      ...prev,
      documentTypes: prev.documentTypes.includes(typeId)
        ? prev.documentTypes.filter((id) => id !== typeId)
        : [...prev.documentTypes, typeId],
    }));
  };

  const toggleProcessingStatusFilter = (statusId: string) => {
    setActiveFilters((prev) => ({
      ...prev,
      processingStatus: prev.processingStatus.includes(statusId)
        ? prev.processingStatus.filter((id) => id !== statusId)
        : [...prev.processingStatus, statusId],
    }));
  };

  const clearAllFilters = () => {
    setActiveFilters({
      documentTypes: [],
      processingStatus: [],
    });
  };

  // Filter folders and documents based on search query and active filters
  const filteredFolders = childFolders.filter(
    (folder) =>
      searchQuery.trim() === "" ||
      folder.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const filteredDocuments = documents.filter((doc) => {
    // Search filter
    const matchesSearch =
      searchQuery.trim() === "" ||
      doc.name.toLowerCase().includes(searchQuery.toLowerCase());

    // Document type filter
    let matchesDocumentType = true;
    if (activeFilters.documentTypes.length > 0) {
      matchesDocumentType = activeFilters.documentTypes.some((typeId) => {
        const typeConfig = filterDefinitions.documentTypes.find(
          (t) => t.id === typeId
        );
        if (!typeConfig) return false;

        // Handle "Others" category
        if (typeId === "others") {
          const docExt = doc.extension?.toLowerCase() || "";
          // Check if extension is NOT in any of the other categories
          const allOtherExtensions = filterDefinitions.documentTypes
            .filter((type) => type.id !== "others")
            .flatMap((type) => type.extensions);
          return !allOtherExtensions.includes(docExt);
        }

        return typeConfig.extensions.includes(
          doc.extension?.toLowerCase() || ""
        );
      });
    }

    // Processing status filter with correct logic
    let matchesProcessingStatus = true;
    if (activeFilters.processingStatus.length > 0) {
      const docStatus = doc.processing_status?.toUpperCase() || "";

      matchesProcessingStatus = activeFilters.processingStatus.some(
        (statusId) => {
          switch (statusId) {
            case "failed":
              return docStatus.includes("FAILED");
            case "pending":
              return docStatus === "PENDING";
            case "processing":
              return docStatus === "PARSING" || docStatus === "QUEUED";
            case "completed":
              return docStatus === "COMPLETED";
            default:
              return false;
          }
        }
      );
    }

    return matchesSearch && matchesDocumentType && matchesProcessingStatus;
  });

  const {
    documents: regularDocuments,
    pdfs,
    images,
  } = categorizeDocuments(filteredDocuments);

  return (
    <div className="min-h-screen bg-none">
      <div className="max-w-7xl 2xl:max-w-screen-2xl mx-auto px-6 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-4">
          <h1 className="text-8xl font-medium text-custom-dark-green font-serif">
            Document Library
          </h1>

          <div className="flex items-center gap-2">
            {googleDriveConnections.length === 0 ? (
              <Button
                onClick={() => router.push("/settings?tab=integrations")}
                className="flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans bg-[#00AC47] text-white hover:bg-[#00AC47]/90"
              >
                <CloudUpload className="w-4 h-4" />
                Connect Google Drive
              </Button>
            ) : googleDriveConnections.length === 1 ? (
              <Button
                onClick={() =>
                  router.push(`/library/drive/${googleDriveConnections[0].id}`)
                }
                className="flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans bg-[#00AC47] text-white hover:bg-[#00AC47]/90"
              >
                <CloudUpload className="w-4 h-4" />
                Google Drive
              </Button>
            ) : (
              <DropdownMenu modal={false}>
                <DropdownMenuTrigger asChild>
                  <Button className="flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans bg-[#00AC47] text-white hover:bg-[#00AC47]/90">
                    <CloudUpload className="w-4 h-4" />
                    Google Drive
                    <ChevronRight className="w-4 h-4 rotate-90" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent>
                  {googleDriveConnections.map((connection) => (
                    <DropdownMenuItem
                      key={connection.id}
                      onClick={() =>
                        router.push(`/library/drive/${connection.id}`)
                      }
                    >
                      <Image
                        src="/icons/integrations/drive.png"
                        alt="Google Drive"
                        width={16}
                        height={16}
                        className="mr-2"
                      />
                      {connection.name}
                    </DropdownMenuItem>
                  ))}
                  <DropdownMenuSeparator />
                  <DropdownMenuItem
                    onClick={() => router.push("/settings?tab=integrations")}
                  >
                    <CloudUpload className="w-4 h-4 mr-2" />
                    Add Another Account
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            )}
            <Button
              onClick={() => setIsCreateFolderOpen(true)}
              className="flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans bg-[#eaeaea] text-custom-dark-green border border-gray-200 hover:bg-gray-50"
            >
              <FolderPlus className="w-4 h-4" />
              New Folder
            </Button>
            <Button
              onClick={() => setIsUploadOpen(true)}
              className="flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
            >
              <Upload className="w-4 h-4" />
              Upload Files
            </Button>
          </div>
        </div>

        {/* Description */}
        <div className="mb-8">
          <p className="text-gray-600 text-sm font-sans">
            Organize and manage your uploaded documents with folders. Drag and
            drop files or entire folders from your desktop. For Google Drive
            files, use the Google Drive library.
          </p>
        </div>

        {/* Breadcrumbs and Search/Filter */}
        <div className="mb-6 flex items-center justify-between">
          <nav className="flex items-center space-x-2 text-sm text-custom-dark-green">
            {breadcrumbs.map((crumb, index) => (
              <div key={crumb.path} className="flex items-center">
                {index > 0 && (
                  <ChevronRight className="w-4 h-4 ml-0 mr-2 text-gray-400" />
                )}
                {index === breadcrumbs.length - 1 ? (
                  <span className="font-medium text-gray-900">
                    {crumb.name}
                  </span>
                ) : (
                  <button
                    onClick={() => navigateToFolder(crumb.id)}
                    className="hover:text-[#A3BC02] transition-colors"
                  >
                    {crumb.name}
                  </button>
                )}
              </div>
            ))}
          </nav>

          <div className="flex items-center space-x-4">
            <DropdownMenu
              modal={false}
              open={isFilterOpen}
              onOpenChange={setIsFilterOpen}
            >
              <DropdownMenuTrigger asChild>
                <Button className={`flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans ${
                  activeFilters.documentTypes.length > 0 || activeFilters.processingStatus.length > 0
                    ? "text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
                    : "bg-[#eaeaea] text-custom-dark-green border border-gray-200 hover:bg-gray-50"
                }`}>
                  <Filter className="w-4 h-4" />
                  Filter
                  {(activeFilters.documentTypes.length > 0 ||
                    activeFilters.processingStatus.length > 0) && (
                    <span className="ml-1 px-2 py-1 text-xs bg-[#A3BC02] text-white rounded-full">
                      {activeFilters.documentTypes.length +
                        activeFilters.processingStatus.length}
                    </span>
                  )}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent
                align="end"
                className="w-80 bg-white border border-[#A3BC01] rounded-lg [box-shadow:inset_0_0_60px_0_rgba(163,188,1,0.2),0_2px_24px_0_rgba(163,188,1,0.08)] p-4"
              >
                <div className="space-y-8">
                  {/* Document Types Section */}
                  <div>
                    <div className="flex items-center justify-between pb-2 mb-4 border-b-custom-dark-green/10 border-b-[1px]">
                      <h4 className="font-medium text-md text-custom-dark-green">
                        Types
                      </h4>
                      {(activeFilters.documentTypes.length > 0 ||
                        activeFilters.processingStatus.length > 0) && (
                        <button
                          onClick={clearAllFilters}
                          className="text-xs text-gray-500 opacity-75 hover:opacity-100 transition-opacity"
                        >
                          Clear
                        </button>
                      )}
                    </div>
                    <div className="space-y-4">
                      {filterDefinitions.documentTypes.map((type) => (
                        <div
                          key={type.id}
                          className="flex items-center justify-between"
                        >
                          <div className="flex items-center space-x-3">
                            <Image
                              src={type.icon}
                              alt={type.label}
                              width={16}
                              height={16}
                              className="flex-shrink-0"
                            />
                            <label
                              htmlFor={`doc-type-${type.id}`}
                              className="text-sm font-medium leading-none cursor-pointer text-custom-dark-green"
                            >
                              {type.label}
                            </label>
                          </div>
                          <div className="relative">
                            <input
                              id={`doc-type-${type.id}`}
                              type="checkbox"
                              checked={activeFilters.documentTypes.includes(
                                type.id
                              )}
                              onChange={() => toggleDocumentTypeFilter(type.id)}
                              className="sr-only"
                            />
                            <div
                              className={`w-4 h-4 rounded border-2 cursor-pointer transition-colors ${
                                activeFilters.documentTypes.includes(type.id)
                                  ? "bg-[#A3BC02] border-[#A3BC02]"
                                  : "border-[#A3BC02] bg-white hover:border-[#A3BC02]"
                              }`}
                              onClick={() => toggleDocumentTypeFilter(type.id)}
                            />
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Processing Status Section */}
                  <div>
                    <h4 className="font-medium text-md text-custom-dark-green pb-2 mb-4 border-b-custom-dark-green/10 border-b-[1px]">
                      Status
                    </h4>
                    <div className="space-y-4">
                      {filterDefinitions.processingStatus.map((status) => {
                        const IconComponent = status.icon;
                        return (
                          <div
                            key={status.id}
                            className="flex items-center justify-between"
                          >
                            <div className="flex items-center space-x-3">
                              <IconComponent className="w-4 h-4 text-gray-600 flex-shrink-0" />
                              <label
                                htmlFor={`status-${status.id}`}
                                className="text-sm font-medium leading-none cursor-pointer text-custom-dark-green"
                              >
                                {status.label}
                              </label>
                            </div>
                            <div className="relative">
                              <input
                                id={`status-${status.id}`}
                                type="checkbox"
                                checked={activeFilters.processingStatus.includes(
                                  status.id
                                )}
                                onChange={() =>
                                  toggleProcessingStatusFilter(status.id)
                                }
                                className="sr-only"
                              />
                              <div
                                className={`w-4 h-4 rounded border-2 cursor-pointer transition-colors ${
                                  activeFilters.processingStatus.includes(
                                    status.id
                                  )
                                    ? "bg-[#A3BC02] border-[#A3BC02]"
                                    : "border-[#A3BC02] bg-white hover:border-[#A3BC02]"
                                }`}
                                onClick={() =>
                                  toggleProcessingStatusFilter(status.id)
                                }
                              />
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>
              </DropdownMenuContent>
            </DropdownMenu>
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-custom-dark-green" />
              <Input
                placeholder="Search"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 w-64 h-10 rounded-full bg-[#F6F6F6] font-sans border border-gray-400"
              />
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div
          className="rounded-xl relative"
          onDragEnter={handleDragEnter}
          onDragLeave={handleDragLeave}
          onDragOver={handleDragOver}
          onDrop={handleDrop}
        >
          {/* Drag overlay */}
          {isDragging && (
            <div className="absolute inset-0 bg-white/90 backdrop-blur-sm rounded-xl flex items-center justify-center z-50">
              <div className="text-center">
                <CloudUpload className="w-16 h-16 text-[#A3BC02] mx-auto mb-4 animate-bounce" />
                <h3 className="text-xl font-medium text-gray-900 mb-2">
                  Drop files or folders here
                </h3>
                <p className="text-sm text-gray-500">
                  {currentFolder
                    ? `Files will be uploaded to "${currentFolder.name}"`
                    : "Files will be uploaded to root directory"}
                </p>
              </div>
            </div>
          )}

          {/* Processing overlay */}
          {isProcessingDrop && (
            <div className="absolute inset-0 bg-white/90 backdrop-blur-sm rounded-xl flex items-center justify-center z-50">
              <div className="text-center">
                <Loader2 className="w-16 h-16 text-[#A3BC02] mx-auto mb-4 animate-spin" />
                <h3 className="text-xl font-medium text-gray-900 mb-2">
                  Processing dropped items...
                </h3>
                <p className="text-sm text-gray-500">
                  Creating folders and uploading files
                </p>
              </div>
            </div>
          )}

          {/* Folders and Documents Grid */}
          {isLoadingDocuments ? (
            <div className="flex items-center justify-center py-16">
              <Loader2 className="w-8 h-8 animate-spin text-[#A3BC02]" />
            </div>
          ) : (
            <div className="space-y-6">
              {/* Folders Section */}
              {filteredFolders.length > 0 && (
                <div>
                  <div className="grid grid-cols-4 md:grid-cols-6 lg:grid-cols-8 xl:grid-cols-10 gap-4 mb-8">
                    {filteredFolders.map((folder) => (
                      <div
                        key={folder.id}
                        className="group cursor-pointer relative"
                        onClick={() => navigateToFolder(folder.id)}
                      >
                        <div className="flex flex-col items-center p-2 rounded-lg hover:bg-gray-50 transition-all duration-200">
                          <div className="relative mb-2">
                            <Image
                              src="/icons/filetypes/folder-icon.png"
                              alt="Folder"
                              width={76}
                              height={67}
                              className="w-[76px] h-[67px]"
                            />
                          </div>
                          <div className="text-center w-[76px]">
                            <p className="text-sm font-medium text-gray-900 font-sans break-words leading-tight line-clamp-3">
                              {folder.name}
                            </p>
                          </div>
                        </div>
                        <div className="absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity">
                          <DropdownMenu modal={false}>
                            <DropdownMenuTrigger asChild>
                              <Button
                                variant="ghost"
                                size="sm"
                                className="h-5 w-5 p-0 rounded-full bg-white shadow-sm"
                                onClick={(e) => e.stopPropagation()}
                              >
                                <MoreHorizontal className="w-3 h-3" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuItem
                                onClick={(e) => {
                                  e.stopPropagation();
                                  setEditingFolder(folder);
                                  setNewFolderName(folder.name);
                                  setNewFolderDescription(
                                    folder.description || ""
                                  );
                                  setIsEditFolderOpen(true);
                                }}
                              >
                                <Edit3 className="w-4 h-4 mr-2" />
                                Rename
                              </DropdownMenuItem>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem
                                onClick={(e) => {
                                  e.stopPropagation();
                                  deleteFolder(folder.id);
                                }}
                                className="text-red-600"
                              >
                                <Trash2 className="w-4 h-4 mr-2" />
                                Delete
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              {filteredFolders.length > 0 && (
                <hr className="h-px bg-black/20 border-0 " />
              )}
              {/* Documents Section - Non-PDF/Image files */}
              {regularDocuments.length > 0 && (
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-custom-dark-green mb-4">
                    Documents
                  </h3>
                  <div className="grid grid-cols md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
                    {regularDocuments.map((doc) => (
                      <div
                        key={doc.id}
                        className="group cursor-pointer relative bg-white border-none rounded-xl p-4 py-[14px] hover:shadow-md transition-all duration-200 hover:border-gray-300 flex flex-col justify-between"
                        onClick={() => {
                          setViewingDocument(doc);
                          setIsViewerOpen(true);
                        }}
                      >
                        {/* File Name */}
                        <div className="pb-2">
                          <p className="text-sm font-medium text-gray-900 font-sans line-clamp-1 leading-tight">
                            {doc.name}
                          </p>
                        </div>

                        {/* Footer */}
                        <div className="flex justify-center mt-auto items-center">
                          {/* File Icon */}
                          <div className="flex items-center">
                            <Image
                              src={getFileIcon(doc.extension)}
                              alt={doc.extension || "file"}
                              width={16}
                              height={16}
                              className="w-[16px] h-[16px]"
                            />
                          </div>

                          {/* Date/Time */}
                          <div className="flex-1 text-center">
                            <p className="text-xs text-black/50 font-sans">
                              {formatDate(doc.created_at)}
                            </p>
                          </div>

                          {/* Three Dots Menu */}
                          <div className="opacity-100 flex items-center">
                            <DropdownMenu modal={false}>
                              <DropdownMenuTrigger asChild>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  className="h-5 w-5 p-0 rounded-full hover:bg-gray-100"
                                  onClick={(e) => e.stopPropagation()}
                                >
                                  <MoreHorizontal className="w-3 h-3" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end">
                                <DropdownMenuItem
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    window.open(
                                      `/api/documents/${doc.id}/download`,
                                      "_blank"
                                    );
                                    toast.success(`Downloading ${doc.name}`);
                                  }}
                                >
                                  <Download className="w-4 h-4 mr-2" />
                                  Download
                                </DropdownMenuItem>
                                <DropdownMenuItem
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    toast.info("Bookmark feature coming soon!");
                                  }}
                                >
                                  <Star className="w-4 h-4 mr-2" />
                                  Add to Starred
                                </DropdownMenuItem>
                                <DropdownMenuSeparator />
                                <DropdownMenuItem
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    deleteDocument(doc);
                                  }}
                                  className="text-red-600"
                                >
                                  <Trash2 className="w-4 h-4 mr-2" />
                                  Delete
                                </DropdownMenuItem>
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </div>
                        </div>

                        {/* Status Indicator */}
                        <div className="absolute -bottom-1 -right-1">
                          {doc.processing_status === "COMPLETED" ? (
                            <div className="w-4 h-4 rounded-full flex items-center justify-center bg-white border-none [box-shadow:inset_0_0_16px_0_rgba(163,188,1,0.4)]">
                              <Check className="w-3 h-3 text-custom-dark-green" />
                            </div>
                          ) : (
                            <div className="w-4 h-4 rounded-full flex items-center justify-center bg-red-50 border-none ">
                              <CircleAlert className="w-3 h-3 text-red-800" />
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* PDFs Section */}
              {pdfs.length > 0 && (
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-custom-dark-green mb-4">
                    PDFs
                  </h3>
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 xl:grid-cols-7 gap-4">
                    {pdfs.map((doc) => (
                      <div
                        key={doc.id}
                        className="group cursor-pointer relative hover:scale-110 transition-all duration-200"
                        onClick={() => {
                          setViewingDocument(doc);
                          setIsViewerOpen(true);
                        }}
                      >
                        {/* Thumbnail or Placeholder */}
                        <div className="w-full h-24 bg-gray-50 flex items-center justify-center relative overflow-hidden rounded-xl">
                          {doc.thumbnail_url ? (
                            <Image
                              src={`/api/documents/${doc.id}/thumbnail`}
                              alt={doc.name}
                              fill
                              className="object-cover rounded-xl"
                              onError={(e) => {
                                console.error(
                                  `Failed to load thumbnail for ${doc.id}:`,
                                  e
                                );
                                const target = e.target as HTMLImageElement;
                                target.style.display = "none";
                                const parent = target.parentElement;
                                if (parent) {
                                  parent.innerHTML = `<img src="/placeholder/thumbnail_placeholder.jpg" alt="${doc.name}" class="w-full h-full object-cover rounded-xl" />`;
                                }
                              }}
                            />
                          ) : (
                            <Image
                              src="/placeholder/thumbnail_placeholder.jpg"
                              alt={doc.name}
                              fill
                              className="object-cover rounded-xl"
                            />
                          )}

                          {/* Status Indicator on Thumbnail */}
                          <div className="absolute bottom-1 right-1">
                            {doc.processing_status === "COMPLETED" ? (
                              <div className="w-4 h-4 rounded-full flex items-center justify-center bg-white border-none [box-shadow:inset_0_0_16px_0_rgba(163,188,1,0.4)]">
                                <Check className="w-3 h-3 text-custom-dark-green" />
                              </div>
                            ) : (
                              <div className="w-4 h-4 rounded-full flex items-center justify-center bg-red-50 border-none ">
                                <CircleAlert className="w-3 h-3 text-red-800" />
                              </div>
                            )}
                          </div>
                        </div>

                        {/* File Name and Three Dots */}
                        <div className="pt-2 relative">
                          <p className="text-xs font-medium text-gray-900 font-sans truncate text-center px-4">
                            {doc.name}
                          </p>
                          <div className="absolute top-2 right-0">
                            <DropdownMenu modal={false}>
                              <DropdownMenuTrigger asChild>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  className="h-4 w-4 p-0 rounded-full hover:bg-gray-100 opacity-60 hover:opacity-100"
                                  onClick={(e) => e.stopPropagation()}
                                >
                                  <MoreHorizontal className="w-3 h-3" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end">
                                <DropdownMenuItem
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    window.open(
                                      `/api/documents/${doc.id}/download`,
                                      "_blank"
                                    );
                                    toast.success(`Downloading ${doc.name}`);
                                  }}
                                >
                                  <Download className="w-4 h-4 mr-2" />
                                  Download
                                </DropdownMenuItem>
                                <DropdownMenuItem
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    toast.info("Bookmark feature coming soon!");
                                  }}
                                >
                                  <Star className="w-4 h-4 mr-2" />
                                  Add to Starred
                                </DropdownMenuItem>
                                <DropdownMenuSeparator />
                                <DropdownMenuItem
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    deleteDocument(doc);
                                  }}
                                  className="text-red-600"
                                >
                                  <Trash2 className="w-4 h-4 mr-2" />
                                  Delete
                                </DropdownMenuItem>
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Images Section */}
              {images.length > 0 && (
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-custom-dark-green mb-4">
                    Images
                  </h3>
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 xl:grid-cols-7 gap-4">
                    {images.map((doc) => (
                      <div
                        key={doc.id}
                        className="group cursor-pointer relative hover:scale-110 transition-all duration-200"
                        onClick={() => {
                          setViewingDocument(doc);
                          setIsViewerOpen(true);
                        }}
                      >
                        {/* Thumbnail or Placeholder */}
                        <div className="w-full h-24 bg-gray-50 flex items-center justify-center relative overflow-hidden rounded-xl">
                          {doc.thumbnail_url ? (
                            <Image
                              src={`/api/documents/${doc.id}/thumbnail`}
                              alt={doc.name}
                              fill
                              className="object-cover rounded-xl"
                              onError={(e) => {
                                console.error(
                                  `Failed to load thumbnail for ${doc.id}:`,
                                  e
                                );
                                const target = e.target as HTMLImageElement;
                                target.style.display = "none";
                                const parent = target.parentElement;
                                if (parent) {
                                  parent.innerHTML = `<img src="/placeholder/thumbnail_placeholder.jpg" alt="${doc.name}" class="w-full h-full object-cover rounded-xl" />`;
                                }
                              }}
                            />
                          ) : (
                            <Image
                              src="/placeholder/thumbnail_placeholder.jpg"
                              alt={doc.name}
                              fill
                              className="object-cover rounded-xl"
                            />
                          )}

                          {/* Status Indicator on Thumbnail */}
                          <div className="absolute bottom-1 right-1">
                            {doc.processing_status === "COMPLETED" ? (
                              <div className="w-4 h-4 rounded-full flex items-center justify-center bg-white border-none [box-shadow:inset_0_0_16px_0_rgba(163,188,1,0.4)]">
                                <Check className="w-3 h-3 text-custom-dark-green" />
                              </div>
                            ) : (
                              <div className="w-4 h-4 rounded-full flex items-center justify-center bg-red-50 border-none ">
                                <CircleAlert className="w-3 h-3 text-red-800" />
                              </div>
                            )}
                          </div>
                        </div>

                        {/* File Name and Three Dots */}
                        <div className="pt-2 relative">
                          <p className="text-xs font-medium text-gray-900 font-sans truncate text-center px-4">
                            {doc.name}
                          </p>
                          <div className="absolute top-2 right-0">
                            <DropdownMenu modal={false}>
                              <DropdownMenuTrigger asChild>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  className="h-4 w-4 p-0 rounded-full hover:bg-gray-100 opacity-60 hover:opacity-100"
                                  onClick={(e) => e.stopPropagation()}
                                >
                                  <MoreHorizontal className="w-3 h-3" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end">
                                <DropdownMenuItem
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    window.open(
                                      `/api/documents/${doc.id}/download`,
                                      "_blank"
                                    );
                                    toast.success(`Downloading ${doc.name}`);
                                  }}
                                >
                                  <Download className="w-4 h-4 mr-2" />
                                  Download
                                </DropdownMenuItem>
                                <DropdownMenuItem
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    toast.info("Bookmark feature coming soon!");
                                  }}
                                >
                                  <Star className="w-4 h-4 mr-2" />
                                  Add to Starred
                                </DropdownMenuItem>
                                <DropdownMenuSeparator />
                                <DropdownMenuItem
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    deleteDocument(doc);
                                  }}
                                  className="text-red-600"
                                >
                                  <Trash2 className="w-4 h-4 mr-2" />
                                  Delete
                                </DropdownMenuItem>
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              {/* Empty State - Only show if no folders AND no documents */}
              {filteredFolders.length === 0 &&
                regularDocuments.length === 0 &&
                pdfs.length === 0 &&
                images.length === 0 && (
                  <div className="text-center py-16">
                    <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 mb-6">
                      <CloudUpload className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                      <h3 className="text-lg font-medium text-gray-700 mb-2">
                        {searchQuery.trim()
                          ? "No matches found"
                          : "No documents yet"}
                      </h3>
                      <p className="text-sm text-gray-500 mb-6">
                        {searchQuery.trim()
                          ? `No files or folders match "${searchQuery}".`
                          : "Drag and drop files or folders here, or click to upload"}
                      </p>
                      <Button
                        onClick={() => setIsUploadOpen(true)}
                        className="rounded-full text-custom-dark-green border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
                      >
                        <Upload className="w-4 h-4 mr-2" />
                        Upload Files
                      </Button>
                    </div>
                  </div>
                )}
            </div>
          )}
        </div>
      </div>

      {/* Create Folder Dialog */}
      <Dialog open={isCreateFolderOpen} onOpenChange={setIsCreateFolderOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle className="text-2xl font-serif text-custom-dark-green">
              Create New Folder
            </DialogTitle>
            <DialogDescription className="text-sm text-gray-600 font-sans">
              Create a new folder to organize your documents
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label
                htmlFor="folderName"
                className="text-sm font-medium text-black font-sans"
              >
                Folder Name
              </Label>
              <Input
                id="folderName"
                value={newFolderName}
                onChange={(e) => setNewFolderName(e.target.value)}
                placeholder="Enter folder name"
                className="h-12 rounded-full border-[#F6F6F6] bg-[#F6F6F6] font-sans"
              />
            </div>

            <div className="space-y-2">
              <Label
                htmlFor="folderDescription"
                className="text-sm font-medium text-black font-sans"
              >
                Description (optional)
              </Label>
              <Textarea
                id="folderDescription"
                value={newFolderDescription}
                onChange={(e) => setNewFolderDescription(e.target.value)}
                placeholder="Add a description"
                className="min-h-[80px] rounded-lg border-[#F6F6F6] bg-[#F6F6F6] font-sans resize-none"
              />
            </div>
          </div>

          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => {
                setIsCreateFolderOpen(false);
                setNewFolderName("");
                setNewFolderDescription("");
              }}
              className="rounded-full"
            >
              Cancel
            </Button>
            <Button
              onClick={createFolder}
              className="rounded-full text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
            >
              Create Folder
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Edit Folder Dialog */}
      <Dialog open={isEditFolderOpen} onOpenChange={setIsEditFolderOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle className="text-2xl font-serif text-custom-dark-green">
              Edit Folder
            </DialogTitle>
            <DialogDescription className="text-sm text-gray-600 font-sans">
              Update folder details
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label
                htmlFor="editFolderName"
                className="text-sm font-medium text-black font-sans"
              >
                Folder Name
              </Label>
              <Input
                id="editFolderName"
                value={newFolderName}
                onChange={(e) => setNewFolderName(e.target.value)}
                placeholder="Enter folder name"
                className="h-12 rounded-full border-[#F6F6F6] bg-[#F6F6F6] font-sans"
              />
            </div>

            <div className="space-y-2">
              <Label
                htmlFor="editFolderDescription"
                className="text-sm font-medium text-black font-sans"
              >
                Description (optional)
              </Label>
              <Textarea
                id="editFolderDescription"
                value={newFolderDescription}
                onChange={(e) => setNewFolderDescription(e.target.value)}
                placeholder="Add a description"
                className="min-h-[80px] rounded-lg border-[#F6F6F6] bg-[#F6F6F6] font-sans resize-none"
              />
            </div>
          </div>

          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => {
                setIsEditFolderOpen(false);
                setEditingFolder(null);
                setNewFolderName("");
                setNewFolderDescription("");
              }}
              className="rounded-full"
            >
              Cancel
            </Button>
            <Button
              onClick={updateFolder}
              className="rounded-full text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
            >
              Save Changes
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Document Viewer */}
      <Dialog open={isViewerOpen} onOpenChange={setIsViewerOpen}>
        <DialogContent className="max-w-[90vw] max-h-[90vh] w-full h-full p-0 overflow-hidden">
          <DialogTitle className="sr-only">
            {viewingDocument
              ? `Viewing ${viewingDocument.name}`
              : "Document Viewer"}
          </DialogTitle>
          {viewingDocument && (
            <DocumentViewer
              documentId={viewingDocument.id}
              documentName={viewingDocument.name}
              fileType={viewingDocument.extension || undefined}
              className="h-full"
            />
          )}
        </DialogContent>
      </Dialog>

      {/* Upload Dialog */}
      <FileUploadDialog
        open={isUploadOpen}
        onOpenChange={setIsUploadOpen}
        onUploadComplete={(files) => {
          toast.success(`Successfully uploaded ${files.length} file(s)`);
          fetchDocuments(currentFolderId);
        }}
        folderId={currentFolderId || undefined}
        title="Upload Documents"
        description="Upload your documents to the selected folder. We support PDF, Word, Excel, and more."
        maxFiles={10}
        maxSize={10 * 1024 * 1024}
      />
    </div>
  );
}

================
File: app/(auth)/library/drive/[connectionId]/[[...path]]/page.tsx
================
"use client";

import { useState, useEffect, useCallback } from "react";
import { useRouter, useParams } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { clientApiRequestJson } from "@/lib/client-api";
import { toast } from "sonner";
import {
  Search,
  ChevronRight,
  MoreHorizontal,
  Download,
  Loader2,
  ArrowLeft,
  ExternalLink,
  RefreshCw,
  Check,
  CloudUpload,
  AlertTriangle,
  X,
  Cloud,
  Filter,
  CheckCircle,
  XCircle,
  Clock,
} from "lucide-react";
import Image from "next/image";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Dialog,
  DialogContent,
  DialogTitle,
} from "@/components/ui/dialog";
import { DocumentViewer } from "@/components/document/DocumentViewer";
import { format } from "date-fns";
import { useIntegrations } from "@/lib/integrations-context";
import {
  Alert,
  AlertDescription,
  AlertTitle,
} from "@/components/ui/alert";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

// Types - matching backend response
interface GoogleDriveFolder {
  id: string;
  name: string;
  mime_type: string;
  parent_id?: string;
  created_time?: string;
  modified_time?: string;
  has_children: boolean;
  drive_type: string;
  drive_id?: string;
  has_synced_content?: boolean;
  synced_file_count?: number;
}

interface GoogleDriveDocument {
  id: string;
  name: string;
  mime_type: string;
  size_bytes?: number;
  parent_id?: string;
  created_time?: string;
  modified_time?: string;
  web_view_link?: string;
  starred: boolean;
  drive_type: string;
  drive_id?: string;

  // Sync status fields
  is_synced?: boolean;
  sync_status?: string; // 'synced', 'syncing', 'sync_failed', 'not_synced'
  last_synced_at?: string;
  local_document_id?: string;
  sync_error?: string;
  thumbnail_url?: string | null;
}

interface GoogleDriveContentResponse {
  folders: GoogleDriveFolder[];
  files: GoogleDriveDocument[];
  next_page_token?: string;
  parent_folder?: GoogleDriveFolder;
}

interface BreadcrumbItem {
  id: string | null;
  name: string;
  path: string;
}

interface GoogleDriveAuthError {
  error: 'authentication_expired' | 'authentication_failed';
  message: string;
  connection_id: string;
  action_required: 'reconnect';
  reconnect_url: string;
}


export default function GoogleDriveConnectionPage() {
  const router = useRouter();
  const params = useParams();
  const { googleDriveConnections, isLoading: integrationsLoading, refreshConnections } = useIntegrations();

  // Extract connection ID and folder ID from URL params
  const getConnectionId = (): string | undefined => {
    return Array.isArray(params.connectionId) ? params.connectionId[0] : params.connectionId;
  };

  const getCurrentFolderId = (): string | null => {
    if (!params.path || !Array.isArray(params.path)) return null;
    if (params.path.length >= 2 && params.path[0] === "f") {
      return params.path[1];
    }
    return null;
  };

  const connectionId = getConnectionId();
  const currentFolderId = getCurrentFolderId();

  const [currentFolder, setCurrentFolder] = useState<GoogleDriveFolder | null>(null);
  const [folders, setFolders] = useState<GoogleDriveFolder[]>([]);
  const [documents, setDocuments] = useState<GoogleDriveDocument[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [breadcrumbs, setBreadcrumbs] = useState<BreadcrumbItem[]>([]);
  
  // Filter states
  const [isFilterOpen, setIsFilterOpen] = useState(false);
  const [activeFilters, setActiveFilters] = useState<{
    documentTypes: string[];
    syncStatus: string[];
  }>({
    documentTypes: [],
    syncStatus: [],
  });

  // Dialog states
  const [isViewerOpen, setIsViewerOpen] = useState(false);
  const [viewingDocument, setViewingDocument] = useState<GoogleDriveDocument | null>(null);

  // Auth error states
  const [authError, setAuthError] = useState<GoogleDriveAuthError | null>(null);
  const [isReconnecting, setIsReconnecting] = useState(false);

  // Verify connection exists
  const selectedConnection = googleDriveConnections.find(conn => conn.id === connectionId);

  // Fetch Google Drive content
  const fetchContent = useCallback(async () => {
    if (!connectionId) return;

    setIsLoading(true);
    try {
      let url = `/api/proxy/v1/google-drive/browse/${connectionId}?include_sync_status=true`;
      if (currentFolderId) {
        url += `&folder_id=${currentFolderId}`;
      }

      const { data, error } = await clientApiRequestJson<GoogleDriveContentResponse>(url);

      if (error) {
        console.error("Error fetching Google Drive content:", error);

        // Check if it's a Google Drive authentication error
        // The error structure is: { error: { code: 'UNAUTHORIZED', message: "{'error': 'authentication_failed', ...}" } }
        let googleDriveError = null;

        if (error.error?.code === 'UNAUTHORIZED' && error.error?.message) {
          try {
            // Convert Python dictionary format to JSON by replacing single quotes with double quotes
            const jsonString = error.error.message.replace(/'/g, '"');
            const parsedError = JSON.parse(jsonString);

            if (parsedError.error === 'authentication_expired' || parsedError.error === 'authentication_failed') {
              // Fix the reconnect URL to use Next.js proxy routing
              if (parsedError.reconnect_url && parsedError.reconnect_url.startsWith('/api/v1/')) {
                parsedError.reconnect_url = parsedError.reconnect_url.replace('/api/v1/', '/api/proxy/v1/');
              }
              googleDriveError = parsedError;
            }
          } catch (e) {
            console.error("Failed to parse Google Drive error:", e);

            // Fallback: check for authentication keywords in the message
            const message = error.error.message;
            if (message.includes('authentication_failed') || message.includes('authentication_expired')) {
              // Create a fallback error object
              const connectionIdMatch = message.match(/connection_id['"]: ['"]([^'"]+)['"]/);
              const connectionId = connectionIdMatch ? connectionIdMatch[1] : '';

              googleDriveError = {
                error: 'authentication_failed',
                message: 'Google Drive authentication has expired. Please reconnect your account.',
                connection_id: connectionId,
                action_required: 'reconnect',
                reconnect_url: `/api/proxy/v1/oauth/authorize/google_drive?connection_id=${connectionId}`
              };
            }
          }
        }

        if (googleDriveError) {
          setAuthError(googleDriveError as GoogleDriveAuthError);
          // Clear existing data
          setFolders([]);
          setDocuments([]);
          return;
        }

        toast.error(`Failed to load Google Drive content: ${error.message || error}`);
        setFolders([]);
        setDocuments([]);
        return;
      }

      if (data) {
        setFolders(data.folders || []);
        setDocuments(data.files || []);

        // Set current folder info
        if (data.parent_folder) {
          setCurrentFolder(data.parent_folder);
        } else if (currentFolderId) {
          // We requested a specific folder but no parent_folder returned
          setCurrentFolder({
            id: currentFolderId,
            name: 'Unknown Folder',
            mime_type: 'application/vnd.google-apps.folder',
            has_children: false,
            drive_type: 'my_drive'
          });
        } else {
          // We're at root level
          setCurrentFolder(null);
        }

        // Build breadcrumbs
        const crumbs: BreadcrumbItem[] = [
          { id: null, name: "Google Drive", path: `/library/drive/${connectionId}` },
        ];

        if (data.parent_folder && currentFolderId) {
          crumbs.push({
            id: data.parent_folder.id,
            name: data.parent_folder.name,
            path: `/library/drive/${connectionId}/f/${data.parent_folder.id}`,
          });
        }

        setBreadcrumbs(crumbs);
      }
    } catch (error) {
      console.error("Failed to load Google Drive content:", error);
      toast.error("Failed to load Google Drive content");
      setFolders([]);
      setDocuments([]);
    } finally {
      setIsLoading(false);
    }
  }, [connectionId, currentFolderId]);

  useEffect(() => {
    if (connectionId && selectedConnection) {
      fetchContent();
    }
  }, [connectionId, currentFolderId, selectedConnection, fetchContent]);

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + " " + sizes[i];
  };

  const getFileIcon = (mimeType?: string, fileName?: string) => {
    // Get extension from filename
    const extension = fileName?.split('.').pop()?.toLowerCase();

    // Handle Google Workspace files by mime type
    if (mimeType?.includes('document')) {
      return "/icons/filetypes/word.png";
    }
    if (mimeType?.includes('spreadsheet')) {
      return "/icons/filetypes/excel.png";
    }
    if (mimeType?.includes('presentation')) {
      return "/icons/filetypes/ppt.png";
    }

    // Handle regular files by extension
    switch (extension) {
      case "pdf":
        return "/icons/filetypes/pdf.png";
      case "doc":
      case "docx":
        return "/icons/filetypes/word.png";
      case "xls":
      case "xlsx":
        return "/icons/filetypes/excel.png";
      case "ppt":
      case "pptx":
        return "/icons/filetypes/ppt.png";
      default:
        return "/icons/filetypes/file.png";
    }
  };

  const formatDate = (dateString: string) => {
    return format(new Date(dateString), "MMM d, yyyy");
  };

  // Smart filename truncation that preserves file extensions
  const truncateFileName = (fileName: string, maxLength: number = 25) => {
    if (fileName.length <= maxLength) return fileName;

    const lastDotIndex = fileName.lastIndexOf('.');

    // If no extension or extension is very long, just truncate normally
    if (lastDotIndex === -1 || fileName.length - lastDotIndex > 10) {
      return fileName.substring(0, maxLength - 3) + '...';
    }

    const name = fileName.substring(0, lastDotIndex);
    const extension = fileName.substring(lastDotIndex);

    // Calculate how much space we have for the name part
    const availableForName = maxLength - extension.length - 3; // 3 for "..."

    if (availableForName <= 0) {
      // Extension is too long, just truncate the whole thing
      return fileName.substring(0, maxLength - 3) + '...';
    }

    return name.substring(0, availableForName) + '...' + extension;
  };

  const getSyncStatusBadge = (syncStatus?: string) => {
    // Base circle styling - matching library page
    const baseCircle = "w-4 h-4 rounded-full flex items-center justify-center bg-white border-none";

    switch (syncStatus) {
      case 'synced':
        return (
          <Tooltip>
            <TooltipTrigger asChild>
              <div className={`${baseCircle} [box-shadow:inset_0_0_16px_0_rgba(163,188,1,0.4)]`}>
                <Check className="w-3 h-3 text-custom-dark-green" />
              </div>
            </TooltipTrigger>
            <TooltipContent className="z-50">
              <p>Synced to your library</p>
            </TooltipContent>
          </Tooltip>
        );
      case 'syncing':
        return (
          <Tooltip>
            <TooltipTrigger asChild>
              <div className={`${baseCircle} [box-shadow:inset_0_0_16px_0_rgba(234,179,8,0.4)]`}>
                <RefreshCw className="w-3 h-3 text-yellow-600 animate-spin" />
              </div>
            </TooltipTrigger>
            <TooltipContent className="z-50">
              <p>Currently syncing...</p>
            </TooltipContent>
          </Tooltip>
        );
      case 'sync_failed':
        return (
          <Tooltip>
            <TooltipTrigger asChild>
              <div className={`${baseCircle} [box-shadow:inset_0_0_16px_0_rgba(239,68,68,0.4)]`}>
                <X className="w-3 h-3 text-red-600" />
              </div>
            </TooltipTrigger>
            <TooltipContent className="z-50">
              <p>Sync failed</p>
            </TooltipContent>
          </Tooltip>
        );
      default:
        // Show cloud icon for any file without sync status
        return (
          <Tooltip>
            <TooltipTrigger asChild>
              <div className={`${baseCircle} [box-shadow:inset_0_0_16px_0_rgba(59,130,246,0.4)]`}>
                <Cloud className="w-3 h-3 text-blue-600" />
              </div>
            </TooltipTrigger>
            <TooltipContent className="z-50">
              <p>Available in Google Drive</p>
            </TooltipContent>
          </Tooltip>
        );
    }
  };

  // Navigation functions
  const navigateToFolder = (folderId: string) => {
    router.push(`/library/drive/${connectionId}/f/${folderId}`);
  };

  const navigateToBreadcrumb = (item: BreadcrumbItem) => {
    router.push(item.path);
  };

  const refreshContent = () => {
    fetchContent();
    toast.success("Content refreshed");
  };

  // Handle Google Drive reconnection
  const handleGoogleDriveReconnection = useCallback(async () => {
    if (!authError) return;

    setIsReconnecting(true);

    try {
      // First, call the OAuth authorization endpoint to get the authorization URL
      const { data, error } = await clientApiRequestJson<{
        authorization_url: string;
        state: string;
        connector_type: string;
      }>(authError.reconnect_url);

      if (error || !data?.authorization_url) {
        console.error('Failed to get authorization URL:', error);
        toast.error('Failed to start reconnection process');
        setIsReconnecting(false);
        return;
      }

      // Store state for OAuth callback validation
      sessionStorage.setItem("oauth_state", data.state);

      // Open Google OAuth in a popup
      const popup = window.open(
        data.authorization_url,
        'google-drive-reconnect',
        'width=600,height=600,scrollbars=yes,resizable=yes'
      );

      if (!popup) {
        toast.error('Please allow popups for this site to reconnect Google Drive');
        setIsReconnecting(false);
        return;
      }

      // Check if popup is closed
      const checkClosed = setInterval(() => {
        if (popup.closed) {
          clearInterval(checkClosed);
          setIsReconnecting(false);

          // Wait a moment then refresh connections and try fetching content again
          setTimeout(async () => {
            await refreshConnections();
            setAuthError(null);
            await fetchContent();
          }, 1000);
        }
      }, 1000);

    } catch (error) {
      console.error('Error during reconnection:', error);
      toast.error('Failed to start reconnection process');
      setIsReconnecting(false);
    }
  }, [authError, refreshConnections, fetchContent]);

  const dismissAuthError = useCallback(() => {
    setAuthError(null);
  }, []);

  // Categorize documents like library page
  const categorizeDocuments = (docs: GoogleDriveDocument[]) => {
    const getExtension = (name: string) => name.split('.').pop()?.toLowerCase() || '';

    const documents = docs.filter((doc) => {
      const ext = getExtension(doc.name);
      return !["pdf", "jpg", "jpeg", "png", "gif", "bmp", "webp"].includes(ext) &&
             !doc.mime_type.includes('image/');
    });

    const pdfs = docs.filter((doc) => {
      const ext = getExtension(doc.name);
      return ext === "pdf" || doc.mime_type === "application/pdf";
    });

    const images = docs.filter((doc) => {
      const ext = getExtension(doc.name);
      return ["jpg", "jpeg", "png", "gif", "bmp", "webp"].includes(ext) ||
             doc.mime_type.startsWith('image/');
    });

    return { documents, pdfs, images };
  };

  // Filter definitions for Google Drive
  const filterDefinitions = {
    documentTypes: [
      {
        id: "spreadsheets",
        label: "Spreadsheets",
        icon: "/icons/filetypes/excel.png",
        extensions: ["csv", "xls", "xlsx"],
        mimeTypes: ["application/vnd.google-apps.spreadsheet"],
      },
      {
        id: "documents",
        label: "Documents",
        icon: "/icons/filetypes/word.png",
        extensions: ["doc", "docx", "txt", "rtf", "md"],
        mimeTypes: ["application/vnd.google-apps.document"],
      },
      {
        id: "pdfs",
        label: "PDFs",
        icon: "/icons/filetypes/pdf.png",
        extensions: ["pdf"],
        mimeTypes: ["application/pdf"],
      },
      {
        id: "presentations",
        label: "Presentations",
        icon: "/icons/filetypes/ppt.png",
        extensions: ["ppt", "pptx"],
        mimeTypes: ["application/vnd.google-apps.presentation"],
      },
      {
        id: "images",
        label: "Images",
        icon: "/icons/filetypes/file.png",
        extensions: ["jpg", "jpeg", "png", "gif", "bmp", "webp"],
        mimeTypes: ["image/"],
      },
      {
        id: "others",
        label: "Others",
        icon: "/icons/filetypes/file.png",
        extensions: [],
        mimeTypes: [],
      },
    ],
    syncStatus: [
      { id: "synced", label: "Synced", icon: CheckCircle },
      { id: "not_synced", label: "Not Synced", icon: XCircle },
      { id: "syncing", label: "Syncing", icon: Clock },
    ],
  };

  // Filter handling functions
  const toggleDocumentTypeFilter = (typeId: string) => {
    setActiveFilters((prev) => ({
      ...prev,
      documentTypes: prev.documentTypes.includes(typeId)
        ? prev.documentTypes.filter((id) => id !== typeId)
        : [...prev.documentTypes, typeId],
    }));
  };

  const toggleSyncStatusFilter = (statusId: string) => {
    setActiveFilters((prev) => ({
      ...prev,
      syncStatus: prev.syncStatus.includes(statusId)
        ? prev.syncStatus.filter((id) => id !== statusId)
        : [...prev.syncStatus, statusId],
    }));
  };

  const clearAllFilters = () => {
    setActiveFilters({
      documentTypes: [],
      syncStatus: [],
    });
  };

  // Filter folders and documents based on search query
  const filteredFolders = folders.filter((folder) =>
    searchQuery.trim() === "" ||
    folder.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const filteredDocuments = documents.filter((doc) => {
    // Search filter
    const matchesSearch =
      searchQuery.trim() === "" ||
      doc.name.toLowerCase().includes(searchQuery.toLowerCase());

    // Document type filter
    let matchesDocumentType = true;
    if (activeFilters.documentTypes.length > 0) {
      matchesDocumentType = activeFilters.documentTypes.some((typeId) => {
        const typeConfig = filterDefinitions.documentTypes.find(
          (t) => t.id === typeId
        );
        if (!typeConfig) return false;

        // Handle "Others" category
        if (typeId === "others") {
          const docExt = doc.name.split('.').pop()?.toLowerCase() || "";
          const docMime = doc.mime_type;
          // Check if extension/mime type is NOT in any of the other categories
          const allOtherExtensions = filterDefinitions.documentTypes
            .filter((type) => type.id !== "others")
            .flatMap((type) => type.extensions);
          const allOtherMimeTypes = filterDefinitions.documentTypes
            .filter((type) => type.id !== "others")
            .flatMap((type) => type.mimeTypes);
          
          return !allOtherExtensions.includes(docExt) &&
                 !allOtherMimeTypes.some((mime) => docMime.includes(mime));
        }

        // Check by extension or mime type
        const docExt = doc.name.split('.').pop()?.toLowerCase() || "";
        return typeConfig.extensions.includes(docExt) ||
               typeConfig.mimeTypes.some((mime) => doc.mime_type.includes(mime));
      });
    }

    // Sync status filter
    let matchesSyncStatus = true;
    if (activeFilters.syncStatus.length > 0) {
      matchesSyncStatus = activeFilters.syncStatus.some((statusId) => {
        switch (statusId) {
          case "synced":
            return doc.is_synced === true;
          case "not_synced":
            return doc.is_synced === false || doc.is_synced === undefined;
          case "syncing":
            return doc.sync_status === "syncing";
          default:
            return false;
        }
      });
    }

    return matchesSearch && matchesDocumentType && matchesSyncStatus;
  });

  const {
    documents: regularDocuments,
    pdfs,
    images,
  } = categorizeDocuments(filteredDocuments);

  if (integrationsLoading) {
    return (
      <div className="min-h-screen bg-none">
        <div className="max-w-7xl 2xl:max-w-screen-2xl mx-auto px-6 py-8">
          <div className="flex items-center justify-center py-16">
            <Loader2 className="w-8 h-8 animate-spin text-[#A3BC02]" />
          </div>
        </div>
      </div>
    );
  }

  if (!selectedConnection) {
    return (
      <div className="min-h-screen bg-none">
        <div className="max-w-7xl 2xl:max-w-screen-2xl mx-auto px-6 py-8">
          <div className="text-center py-16">
            <h2 className="text-2xl font-serif font-medium text-gray-900 mb-2">
              Connection Not Found
            </h2>
            <p className="text-gray-500 mb-6 font-sans">
              The requested Google Drive connection could not be found. It may have been disconnected or removed.
            </p>
            <div className="flex items-center gap-4 justify-center">
              <Button
                onClick={() => router.push('/library')}
                className="rounded-full text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
              >
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back to Library
              </Button>
              <Button
                onClick={() => router.push('/settings?tab=integrations')}
                className="rounded-full bg-[#00AC47] text-white hover:bg-[#00AC47]/90"
              >
                <CloudUpload className="w-4 h-4 mr-2" />
                Manage Connections
              </Button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <TooltipProvider>
      <div className="min-h-screen bg-none">
      <div className="max-w-7xl 2xl:max-w-screen-2xl mx-auto px-6 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-4">
          <h1 className="text-8xl font-medium text-custom-dark-green font-serif">
            Google Drive
          </h1>

          <div className="flex items-center gap-2">
            {/* Account Switcher - Always show current connection */}
            {selectedConnection && (
              <DropdownMenu modal={false}>
                <DropdownMenuTrigger asChild>
                  <Button
                    className="flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans bg-[#eaeaea] text-custom-dark-green border border-gray-200 hover:bg-gray-200"
                  >
                    <Image
                      src="/icons/integrations/drive.png"
                      alt="Google Drive"
                      width={16}
                      height={16}
                      className="mr-1"
                    />
                    {selectedConnection.name}
                    {googleDriveConnections.length > 1 && (
                      <ChevronRight className="w-4 h-4 rotate-90" />
                    )}
                  </Button>
                </DropdownMenuTrigger>
                {googleDriveConnections.length > 1 && (
                  <DropdownMenuContent>
                  {googleDriveConnections.map((connection) => (
                    <DropdownMenuItem
                      key={connection.id}
                      onClick={() => {
                        if (currentFolderId) {
                          router.push(`/library/drive/${connection.id}/f/${currentFolderId}`);
                        } else {
                          router.push(`/library/drive/${connection.id}`);
                        }
                      }}
                      className={connectionId === connection.id ? "bg-gray-100" : ""}
                    >
                      <Image
                        src="/icons/integrations/drive.png"
                        alt="Google Drive"
                        width={16}
                        height={16}
                        className="mr-2"
                      />
                      {connection.name}
                      {connectionId === connection.id && <span className="ml-auto text-xs text-gray-500">Current</span>}
                    </DropdownMenuItem>
                  ))}
                  </DropdownMenuContent>
                )}
              </DropdownMenu>
            )}

            <Button
              onClick={() => router.push('/library')}
              className="flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans bg-[#eaeaea] text-custom-dark-green border border-gray-200 hover:bg-gray-50"
            >
              <ArrowLeft className="w-4 h-4" />
              Back to Library
            </Button>

            <Button
              onClick={refreshContent}
              className="flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
            >
              <RefreshCw className="w-4 h-4" />
              Refresh
            </Button>
          </div>
        </div>

        {/* Authentication Error Banner */}
        {authError && (
          <div className="mb-6">
            <Alert className="border-orange-200 bg-orange-50">
              <AlertTriangle className="h-4 w-4 text-orange-600" />
              <AlertTitle className="text-orange-800">
                Google Drive Connection Expired
              </AlertTitle>
              <AlertDescription className="text-orange-700 mt-2">
                <p className="mb-3">{authError.message}</p>
                <div className="flex items-center gap-3">
                  <Button
                    onClick={handleGoogleDriveReconnection}
                    disabled={isReconnecting}
                    className="bg-orange-600 hover:bg-orange-700 text-white"
                  >
                    {isReconnecting ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        Reconnecting...
                      </>
                    ) : (
                      'Reconnect Google Drive'
                    )}
                  </Button>
                  <Button
                    onClick={dismissAuthError}
                    variant="outline"
                    className="text-orange-700 border-orange-300 hover:bg-orange-100"
                  >
                    Dismiss
                  </Button>
                </div>
              </AlertDescription>
            </Alert>
          </div>
        )}

        {/* Description */}
        <div className="mb-8">
          <p className="text-gray-600 text-sm font-sans">
            Browse your Google Drive content. Files marked with sync status can be downloaded from your local library.
          </p>
        </div>

        {/* Breadcrumbs and Search */}
        <div className="mb-6 flex items-center justify-between">
          <nav className="flex items-center space-x-2 text-sm text-custom-dark-green">
            {breadcrumbs.map((item, index) => (
              <div key={item.path} className="flex items-center">
                {index > 0 && <ChevronRight className="w-4 h-4 mx-1 text-gray-400" />}
                <button
                  onClick={() => navigateToBreadcrumb(item)}
                  className="hover:text-[#A3BC02] transition-colors font-sans"
                >
                  {item.name}
                </button>
              </div>
            ))}
          </nav>

          <div className="flex items-center space-x-4">
            <DropdownMenu
              modal={false}
              open={isFilterOpen}
              onOpenChange={setIsFilterOpen}
            >
              <DropdownMenuTrigger asChild>
                <Button className={`flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans ${
                  activeFilters.documentTypes.length > 0 || activeFilters.syncStatus.length > 0
                    ? "text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
                    : "bg-[#eaeaea] text-custom-dark-green border border-gray-200 hover:bg-gray-50"
                }`}>
                  <Filter className="w-4 h-4" />
                  Filter
                  {(activeFilters.documentTypes.length > 0 ||
                    activeFilters.syncStatus.length > 0) && (
                    <span className="ml-1 px-2 py-1 text-xs bg-[#A3BC02] text-white rounded-full">
                      {activeFilters.documentTypes.length +
                        activeFilters.syncStatus.length}
                    </span>
                  )}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent
                align="end"
                className="w-80 bg-white border border-[#A3BC01] rounded-lg [box-shadow:inset_0_0_60px_0_rgba(163,188,1,0.2),0_2px_24px_0_rgba(163,188,1,0.08)] p-4"
              >
                <div className="space-y-8">
                  {/* Document Types Section */}
                  <div>
                    <div className="flex items-center justify-between pb-2 mb-4 border-b-custom-dark-green/10 border-b-[1px]">
                      <h4 className="font-medium text-md text-custom-dark-green">
                        Types
                      </h4>
                      {(activeFilters.documentTypes.length > 0 ||
                        activeFilters.syncStatus.length > 0) && (
                        <button
                          onClick={clearAllFilters}
                          className="text-xs text-gray-500 opacity-75 hover:opacity-100 transition-opacity"
                        >
                          Clear
                        </button>
                      )}
                    </div>
                    <div className="space-y-4">
                      {filterDefinitions.documentTypes.map((type) => (
                        <div
                          key={type.id}
                          className="flex items-center justify-between"
                        >
                          <div className="flex items-center space-x-3">
                            <Image
                              src={type.icon}
                              alt={type.label}
                              width={16}
                              height={16}
                              className="flex-shrink-0"
                            />
                            <label
                              htmlFor={`doc-type-${type.id}`}
                              className="text-sm font-medium leading-none cursor-pointer text-custom-dark-green"
                            >
                              {type.label}
                            </label>
                          </div>
                          <div className="relative">
                            <input
                              id={`doc-type-${type.id}`}
                              type="checkbox"
                              checked={activeFilters.documentTypes.includes(
                                type.id
                              )}
                              onChange={() => toggleDocumentTypeFilter(type.id)}
                              className="sr-only"
                            />
                            <div
                              className={`w-4 h-4 rounded border-2 cursor-pointer transition-colors ${
                                activeFilters.documentTypes.includes(type.id)
                                  ? "bg-[#A3BC02] border-[#A3BC02]"
                                  : "border-[#A3BC02] bg-white hover:border-[#A3BC02]"
                              }`}
                              onClick={() => toggleDocumentTypeFilter(type.id)}
                            />
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Sync Status Section */}
                  <div>
                    <h4 className="font-medium text-md text-custom-dark-green pb-2 mb-4 border-b-custom-dark-green/10 border-b-[1px]">
                      Sync Status
                    </h4>
                    <div className="space-y-4">
                      {filterDefinitions.syncStatus.map((status) => {
                        const IconComponent = status.icon;
                        return (
                          <div
                            key={status.id}
                            className="flex items-center justify-between"
                          >
                            <div className="flex items-center space-x-3">
                              <IconComponent className="w-4 h-4 text-gray-600 flex-shrink-0" />
                              <label
                                htmlFor={`status-${status.id}`}
                                className="text-sm font-medium leading-none cursor-pointer text-custom-dark-green"
                              >
                                {status.label}
                              </label>
                            </div>
                            <div className="relative">
                              <input
                                id={`status-${status.id}`}
                                type="checkbox"
                                checked={activeFilters.syncStatus.includes(
                                  status.id
                                )}
                                onChange={() =>
                                  toggleSyncStatusFilter(status.id)
                                }
                                className="sr-only"
                              />
                              <div
                                className={`w-4 h-4 rounded border-2 cursor-pointer transition-colors ${
                                  activeFilters.syncStatus.includes(
                                    status.id
                                  )
                                    ? "bg-[#A3BC02] border-[#A3BC02]"
                                    : "border-[#A3BC02] bg-white hover:border-[#A3BC02]"
                                }`}
                                onClick={() =>
                                  toggleSyncStatusFilter(status.id)
                                }
                              />
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>
              </DropdownMenuContent>
            </DropdownMenu>
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-custom-dark-green" />
              <Input
                placeholder="Search Google Drive..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 w-64 h-10 rounded-full bg-[#F6F6F6] font-sans border border-gray-400"
              />
            </div>
          </div>
        </div>

        {/* Main content area */}
        <div className="min-h-[600px] relative">
          {authError ? (
            <div className="text-center py-16">
              <div className="border-2 border-dashed border-orange-300 rounded-xl p-8 bg-orange-50/30">
                <AlertTriangle className="w-12 h-12 mx-auto text-orange-600 mb-4" />
                <h3 className="text-lg font-medium text-orange-800 mb-2">
                  Google Drive Connection Required
                </h3>
                <p className="text-sm text-orange-700 mb-4">
                  Your Google Drive connection has expired. Please reconnect to continue browsing your files.
                </p>
                <Button
                  onClick={handleGoogleDriveReconnection}
                  disabled={isReconnecting}
                  className="bg-orange-600 hover:bg-orange-700 text-white"
                >
                  {isReconnecting ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Reconnecting...
                    </>
                  ) : (
                    'Reconnect Google Drive'
                  )}
                </Button>
              </div>
            </div>
          ) : isLoading ? (
            <div className="flex items-center justify-center py-16">
              <Loader2 className="w-8 h-8 animate-spin text-[#A3BC02]" />
            </div>
          ) : (
            <div className="space-y-8">
              {/* Folders Section */}
              {filteredFolders.length > 0 && (
                <div>
                  <div className="grid grid-cols-4 md:grid-cols-6 lg:grid-cols-8 xl:grid-cols-10 gap-4 mb-8">
                    {filteredFolders.map((folder) => (
                      <div
                        key={folder.id}
                        className="group cursor-pointer relative"
                        onClick={() => navigateToFolder(folder.id)}
                      >
                        <div className="flex flex-col items-center p-2 rounded-lg hover:bg-gray-50 transition-all duration-200">
                          <div className="relative mb-2">
                            <Image
                              src="/icons/filetypes/folder-icon.png"
                              alt="Folder"
                              width={76}
                              height={67}
                              className="w-[76px] h-[67px]"
                            />
                            {/* Sync status indicator for folders */}
                            {folder.has_synced_content && (
                              <div className="absolute -top-1 -right-1">
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <div className="w-4 h-4 rounded-full flex items-center justify-center bg-white border-none [box-shadow:inset_0_0_16px_0_rgba(163,188,1,0.4)]">
                                      <Check className="w-3 h-3 text-custom-dark-green" />
                                    </div>
                                  </TooltipTrigger>
                                  <TooltipContent className="z-50">
                                    <p>Contains synced files</p>
                                  </TooltipContent>
                                </Tooltip>
                              </div>
                            )}
                          </div>
                          <div className="text-center w-[76px]">
                            <p className="text-sm font-medium text-gray-900 font-sans break-words leading-tight line-clamp-3">
                              {folder.name}
                            </p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {filteredFolders.length > 0 && regularDocuments.length > 0 && (
                <hr className="h-px bg-black/20 border-0" />
              )}

              {/* Documents Section */}
              {regularDocuments.length > 0 && (
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-custom-dark-green mb-4">
                    Documents
                  </h3>
                  <div className="grid grid-cols md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
                    {regularDocuments.map((doc) => (
                      <div
                        key={doc.id}
                        className="group cursor-pointer relative bg-white border-none rounded-xl p-4 py-[14px] hover:shadow-md transition-all duration-200 hover:border-gray-300 flex flex-col justify-between"
                        onClick={() => {
                          setViewingDocument(doc);
                          setIsViewerOpen(true);
                        }}
                      >
                        {/* Sync Status Indicator - Top Right */}
                        <div className="absolute top-2 right-2">
                          {getSyncStatusBadge(doc.sync_status)}
                        </div>

                        {/* File Name */}
                        <div className="pb-2">
                          <p className="text-sm font-medium text-gray-900 font-sans leading-tight" title={doc.name}>
                            {truncateFileName(doc.name)}
                          </p>
                        </div>

                        {/* Footer */}
                        <div className="flex justify-center mt-auto items-center">
                          {/* File Icon */}
                          <div className="flex items-center">
                            <Image
                              src={getFileIcon(doc.mime_type, doc.name)}
                              alt="file icon"
                              width={16}
                              height={16}
                              className="w-[16px] h-[16px]"
                            />
                          </div>

                          {/* Date/Time */}
                          <div className="flex-1 text-center">
                            <p className="text-xs text-black/50 font-sans">
                              {doc.created_time ? formatDate(doc.created_time) : ""}
                            </p>
                          </div>

                          {/* Three Dots Menu */}
                          <div className="opacity-100 flex items-center">
                            <DropdownMenu modal={false}>
                              <DropdownMenuTrigger asChild>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  className="h-5 w-5 p-0 rounded-full hover:bg-gray-100"
                                  onClick={(e) => e.stopPropagation()}
                                >
                                  <MoreHorizontal className="w-3 h-3" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end">
                                <DropdownMenuItem
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    if (doc.web_view_link) {
                                      window.open(doc.web_view_link, "_blank");
                                    }
                                  }}
                                >
                                  <ExternalLink className="w-4 h-4 mr-2" />
                                  Open in Google Drive
                                </DropdownMenuItem>
                                {doc.is_synced && doc.local_document_id && (
                                  <>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        window.open(`/api/documents/${doc.local_document_id}/download`, "_blank");
                                        toast.success(`Downloading ${doc.name}`);
                                      }}
                                    >
                                      <Download className="w-4 h-4 mr-2" />
                                      Download from Library
                                    </DropdownMenuItem>
                                  </>
                                )}
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* PDFs Section */}
              {pdfs.length > 0 && (
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-custom-dark-green mb-4">
                    PDFs
                  </h3>
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 xl:grid-cols-7 gap-4">
                    {pdfs.map((doc) => (
                      <div
                        key={doc.id}
                        className="group cursor-pointer relative hover:scale-110 transition-all duration-200"
                        onClick={() => {
                          setViewingDocument(doc);
                          setIsViewerOpen(true);
                        }}
                      >
                        {/* Thumbnail or Placeholder */}
                        <div className="w-full h-24 bg-gray-50 flex items-center justify-center relative overflow-hidden rounded-xl">
                          {doc.is_synced && doc.local_document_id && doc.thumbnail_url ? (
                            <Image
                              src={`/api/documents/${doc.local_document_id}/thumbnail`}
                              alt={doc.name}
                              fill
                              className="object-cover rounded-xl"
                              onError={(e) => {
                                console.error(`Failed to load thumbnail for ${doc.local_document_id}:`, e);
                                const target = e.target as HTMLImageElement;
                                target.style.display = "none";
                                const parent = target.parentElement;
                                if (parent) {
                                  parent.innerHTML = `<img src="/placeholder/thumbnail_placeholder.jpg" alt="${doc.name}" class="w-full h-full object-cover rounded-xl" />`;
                                }
                              }}
                            />
                          ) : (
                            <Image
                              src="/placeholder/thumbnail_placeholder.jpg"
                              alt={doc.name}
                              fill
                              className="object-cover rounded-xl"
                            />
                          )}

                          {/* Sync Status Indicator on Thumbnail */}
                          <div className="absolute bottom-1 right-1">
                            {getSyncStatusBadge(doc.sync_status)}
                          </div>
                        </div>

                        {/* File Name and Three Dots */}
                        <div className="pt-2 relative">
                          <p className="text-xs font-medium text-gray-900 font-sans text-center px-4" title={doc.name}>
                            {truncateFileName(doc.name, 20)}
                          </p>
                          <div className="absolute top-2 right-0">
                            <DropdownMenu modal={false}>
                              <DropdownMenuTrigger asChild>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  className="h-4 w-4 p-0 rounded-full hover:bg-gray-100 opacity-60 hover:opacity-100"
                                  onClick={(e) => e.stopPropagation()}
                                >
                                  <MoreHorizontal className="w-3 h-3" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end">
                                <DropdownMenuItem
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    if (doc.web_view_link) {
                                      window.open(doc.web_view_link, "_blank");
                                    }
                                  }}
                                >
                                  <ExternalLink className="w-4 h-4 mr-2" />
                                  Open in Google Drive
                                </DropdownMenuItem>
                                {doc.is_synced && doc.local_document_id && (
                                  <>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        window.open(`/api/documents/${doc.local_document_id}/download`, "_blank");
                                        toast.success(`Downloading ${doc.name}`);
                                      }}
                                    >
                                      <Download className="w-4 h-4 mr-2" />
                                      Download from Library
                                    </DropdownMenuItem>
                                  </>
                                )}
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Images Section */}
              {images.length > 0 && (
                <div className="mb-8">
                  <h3 className="text-lg font-medium text-custom-dark-green mb-4">
                    Images
                  </h3>
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 xl:grid-cols-7 gap-4">
                    {images.map((doc) => (
                      <div
                        key={doc.id}
                        className="group cursor-pointer relative hover:scale-110 transition-all duration-200"
                        onClick={() => {
                          setViewingDocument(doc);
                          setIsViewerOpen(true);
                        }}
                      >
                        {/* Thumbnail or Placeholder */}
                        <div className="w-full h-24 bg-gray-50 flex items-center justify-center relative overflow-hidden rounded-xl">
                          {doc.is_synced && doc.local_document_id && doc.thumbnail_url ? (
                            <Image
                              src={`/api/documents/${doc.local_document_id}/thumbnail`}
                              alt={doc.name}
                              fill
                              className="object-cover rounded-xl"
                              onError={(e) => {
                                console.error(`Failed to load thumbnail for ${doc.local_document_id}:`, e);
                                const target = e.target as HTMLImageElement;
                                target.style.display = "none";
                                const parent = target.parentElement;
                                if (parent) {
                                  parent.innerHTML = `<img src="/placeholder/thumbnail_placeholder.jpg" alt="${doc.name}" class="w-full h-full object-cover rounded-xl" />`;
                                }
                              }}
                            />
                          ) : (
                            <Image
                              src="/placeholder/thumbnail_placeholder.jpg"
                              alt={doc.name}
                              fill
                              className="object-cover rounded-xl"
                            />
                          )}

                          {/* Sync Status Indicator on Thumbnail */}
                          <div className="absolute bottom-1 right-1">
                            {getSyncStatusBadge(doc.sync_status)}
                          </div>
                        </div>

                        {/* File Name and Three Dots */}
                        <div className="pt-2 relative">
                          <p className="text-xs font-medium text-gray-900 font-sans text-center px-4" title={doc.name}>
                            {truncateFileName(doc.name, 20)}
                          </p>
                          <div className="absolute top-2 right-0">
                            <DropdownMenu modal={false}>
                              <DropdownMenuTrigger asChild>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  className="h-4 w-4 p-0 rounded-full hover:bg-gray-100 opacity-60 hover:opacity-100"
                                  onClick={(e) => e.stopPropagation()}
                                >
                                  <MoreHorizontal className="w-3 h-3" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end">
                                <DropdownMenuItem
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    if (doc.web_view_link) {
                                      window.open(doc.web_view_link, "_blank");
                                    }
                                  }}
                                >
                                  <ExternalLink className="w-4 h-4 mr-2" />
                                  Open in Google Drive
                                </DropdownMenuItem>
                                {doc.is_synced && doc.local_document_id && (
                                  <>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        window.open(`/api/documents/${doc.local_document_id}/download`, "_blank");
                                        toast.success(`Downloading ${doc.name}`);
                                      }}
                                    >
                                      <Download className="w-4 h-4 mr-2" />
                                      Download from Library
                                    </DropdownMenuItem>
                                  </>
                                )}
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Empty State */}
              {!isLoading && filteredFolders.length === 0 && filteredDocuments.length === 0 && (
                <div className="text-center py-16">
                  <div className="border-2 border-dashed border-gray-300 rounded-xl p-8">
                    <h3 className="text-lg font-medium text-gray-700 mb-2">
                      {searchQuery.trim() ? "No matches found" : "No content found"}
                    </h3>
                    <p className="text-sm text-gray-500 mb-4">
                      {searchQuery.trim()
                        ? `No files or folders match "${searchQuery}".`
                        : "This folder appears to be empty."}
                    </p>
                    <Button
                      onClick={refreshContent}
                      variant="outline"
                      className="rounded-full"
                    >
                      <RefreshCw className="w-4 h-4 mr-2" />
                      Refresh
                    </Button>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Document Viewer */}
      <Dialog open={isViewerOpen} onOpenChange={setIsViewerOpen}>
        <DialogContent className="max-w-[90vw] max-h-[90vh] w-full h-full p-0 overflow-hidden">
          <DialogTitle className="sr-only">
            {viewingDocument ? `Viewing ${viewingDocument.name}` : 'Document Viewer'}
          </DialogTitle>
          {viewingDocument && (
            <DocumentViewer
              documentId={viewingDocument.id}
              documentName={viewingDocument.name}
              fileType={viewingDocument.name.split('.').pop()?.toLowerCase() || undefined}
              className="h-full"
            />
          )}
        </DialogContent>
      </Dialog>
      </div>
    </TooltipProvider>
  );
}

================
File: app/(auth)/library/drive/page.tsx
================
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { Loader2 } from "lucide-react";
import { useIntegrations } from "@/lib/integrations-context";

export default function GoogleDriveRedirectPage() {
  const router = useRouter();
  const { googleDriveConnections, isLoading } = useIntegrations();

  useEffect(() => {
    if (isLoading) return;

    // Redirect to first available connection or settings if none
    if (googleDriveConnections.length > 0) {
      router.replace(`/library/drive/${googleDriveConnections[0].id}`);
    } else {
      router.replace('/settings?tab=integrations');
    }
  }, [googleDriveConnections, isLoading, router]);

  return (
    <div className="min-h-screen bg-none">
      <div className="max-w-7xl 2xl:max-w-screen-2xl mx-auto px-6 py-8">
        <div className="flex items-center justify-center py-16">
          <Loader2 className="w-8 h-8 animate-spin text-[#A3BC02]" />
        </div>
      </div>
    </div>
  );
}

================
File: app/(auth)/organization/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";
import {
  Building2,
  Save,
  Users,
  Calendar,
  Globe,
  MapPin,
  Phone,
  Loader2,
  Crown,
  AlertCircle,
} from "lucide-react";

interface Organization {
  id: string;
  name: string;
  description?: string;
  website?: string;
  phone?: string;
  address?: string;
  industry?: string;
  size?: string;
  created_at: string;
  updated_at: string;
  member_count?: number;
  admin_count?: number;
}

interface CurrentUser {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
  role: string;
  tenant: {
    id: string;
    name: string;
  };
}

export default function OrganizationPage() {
  const router = useRouter();
  const [organization, setOrganization] = useState<Organization | null>(null);
  const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [hasPermission, setHasPermission] = useState(false);
  
  // Form fields
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [website, setWebsite] = useState("");
  const [phone, setPhone] = useState("");
  const [address, setAddress] = useState("");
  const [industry, setIndustry] = useState("");
  const [size, setSize] = useState("");

  useEffect(() => {
    checkPermissionsAndLoadData();
  }, []);

  const checkPermissionsAndLoadData = async () => {
    try {
      setIsLoading(true);
      
      // First check user permissions
      const userResponse = await fetch("/api/users/profile");
      if (userResponse.ok) {
        const userData = await userResponse.json();
        setCurrentUser(userData);
        
        // Check if user is admin or owner
        const isAdmin = userData.role === 'admin' || userData.role === 'owner';
        setHasPermission(isAdmin);
        
        if (!isAdmin) {
          // Redirect non-admin users to dashboard
          toast.error("You don't have permission to access organization settings");
          router.push("/dashboard");
          return;
        }
        
        // If admin, load organization data
        await loadOrganization();
      } else {
        toast.error("Failed to verify permissions");
        router.push("/dashboard");
      }
    } catch (error) {
      console.error("Failed to check permissions:", error);
      toast.error("Failed to verify permissions");
      router.push("/dashboard");
    }
  };

  const loadOrganization = async () => {
    try {
      const response = await fetch("/api/organizations/current");
      if (response.ok) {
        const data = await response.json();
        setOrganization(data);
        
        // Populate form fields
        setName(data.name || "");
        setDescription(data.description || "");
        setWebsite(data.website || "");
        setPhone(data.phone || "");
        setAddress(data.address || "");
        setIndustry(data.industry || "");
        setSize(data.size || "");
      } else {
        toast.error("Failed to load organization details");
      }
    } catch (error) {
      console.error("Failed to load organization:", error);
      toast.error("Failed to load organization details");
    } finally {
      setIsLoading(false);
    }
  };

  const saveOrganization = async () => {
    try {
      setIsSaving(true);
      const response = await fetch("/api/organizations/current", {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: name.trim(),
          description: description.trim() || null,
          website: website.trim() || null,
          phone: phone.trim() || null,
          address: address.trim() || null,
          industry: industry.trim() || null,
          size: size.trim() || null,
        }),
      });

      if (response.ok) {
        const updatedOrg = await response.json();
        setOrganization(updatedOrg);
        toast.success("Organization updated successfully");
      } else {
        const error = await response.json();
        toast.error(error.message || "Failed to update organization");
      }
    } catch (error) {
      console.error("Failed to save organization:", error);
      toast.error("Failed to update organization");
    } finally {
      setIsSaving(false);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  if (isLoading) {
    return (
      <div className="container mx-auto px-6 py-8 max-w-4xl">
        <div className="flex items-center justify-center py-12">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#A3BC02] mx-auto mb-4"></div>
            <p className="text-gray-500">Loading organization details...</p>
          </div>
        </div>
      </div>
    );
  }

  // Show unauthorized message if user doesn't have permission
  if (currentUser && !hasPermission) {
    return (
      <div className="container mx-auto px-6 py-8 max-w-4xl">
        <div className="flex items-center justify-center py-12">
          <div className="text-center">
            <div className="mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4">
              <AlertCircle className="w-8 h-8 text-red-600" />
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">Access Denied</h3>
            <p className="text-gray-500 mb-4">
              You don't have permission to access organization settings.
              <br />
              Contact your administrator for access.
            </p>
            <Button onClick={() => router.push("/dashboard")} className="bg-[#A3BC02] hover:bg-[#8BA000]">
              Return to Dashboard
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-6 py-8 max-w-4xl">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center gap-3 mb-2">
          <div className="p-2 bg-[#A3BC02]/10 rounded-lg">
            <Building2 className="w-6 h-6 text-[#A3BC02]" />
          </div>
          <h1 className="text-2xl font-bold text-gray-900">Organization Settings</h1>
        </div>
        <p className="text-gray-600">
          Manage your organization's information and settings
        </p>
      </div>

      {/* Organization Stats */}
      {organization && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Total Members</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {organization.member_count || 0}
                  </p>
                </div>
                <Users className="w-8 h-8 text-[#A3BC02]" />
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Administrators</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {organization.admin_count || 0}
                  </p>
                </div>
                <Crown className="w-8 h-8 text-yellow-500" />
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Created</p>
                  <p className="text-lg font-bold text-gray-900">
                    {formatDate(organization.created_at)}
                  </p>
                </div>
                <Calendar className="w-8 h-8 text-blue-500" />
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      <div className="space-y-6">
        {/* Basic Information */}
        <Card>
          <CardHeader>
            <CardTitle>Basic Information</CardTitle>
            <CardDescription>
              Update your organization's basic details and contact information
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="orgName">Organization Name *</Label>
              <Input
                id="orgName"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="Enter organization name"
                required
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder="Describe what your organization does..."
                className="min-h-[100px]"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="website">Website</Label>
                <div className="relative">
                  <Globe className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                  <Input
                    id="website"
                    value={website}
                    onChange={(e) => setWebsite(e.target.value)}
                    placeholder="https://yourcompany.com"
                    className="pl-10"
                    type="url"
                  />
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="phone">Phone Number</Label>
                <div className="relative">
                  <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                  <Input
                    id="phone"
                    value={phone}
                    onChange={(e) => setPhone(e.target.value)}
                    placeholder="+1 (555) 123-4567"
                    className="pl-10"
                    type="tel"
                  />
                </div>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="address">Address</Label>
              <div className="relative">
                <MapPin className="absolute left-3 top-3 w-4 h-4 text-gray-400" />
                <Textarea
                  id="address"
                  value={address}
                  onChange={(e) => setAddress(e.target.value)}
                  placeholder="Enter your organization's address..."
                  className="pl-10 min-h-[80px]"
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="industry">Industry</Label>
                <Input
                  id="industry"
                  value={industry}
                  onChange={(e) => setIndustry(e.target.value)}
                  placeholder="e.g., Technology, Healthcare, Finance"
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="size">Company Size</Label>
                <Input
                  id="size"
                  value={size}
                  onChange={(e) => setSize(e.target.value)}
                  placeholder="e.g., 1-10, 11-50, 51-200, 200+"
                />
              </div>
            </div>

            <Button 
              onClick={saveOrganization} 
              disabled={isSaving || !name.trim()}
              className="bg-[#A3BC02] hover:bg-[#8BA000]"
            >
              {isSaving ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Saving...
                </>
              ) : (
                <>
                  <Save className="w-4 h-4 mr-2" />
                  Save Changes
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        {/* Organization Status */}
        {organization && (
          <Card>
            <CardHeader>
              <CardTitle>Organization Status</CardTitle>
              <CardDescription>
                View your organization's current status and important information
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <Label className="text-sm font-medium text-gray-600">Organization ID</Label>
                  <p className="text-sm text-gray-900 font-mono bg-gray-50 p-2 rounded mt-1">
                    {organization.id}
                  </p>
                </div>
                <div>
                  <Label className="text-sm font-medium text-gray-600">Last Updated</Label>
                  <p className="text-sm text-gray-900 mt-1">
                    {formatDate(organization.updated_at)}
                  </p>
                </div>
              </div>
              
              <div className="pt-4 border-t">
                <div className="flex items-center gap-2">
                  <Badge className="bg-green-100 text-green-800">
                    Active
                  </Badge>
                  <span className="text-sm text-gray-600">
                    Your organization is active and all features are available
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

================
File: app/(auth)/profile/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { toast } from "sonner";
import { Upload, Trash2, Save, User, Mail, Building, Shield, Calendar } from "lucide-react";

interface UserProfile {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
  role: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
  avatar_url?: string;
  tenant: {
    id: string;
    name: string;
    slug?: string;
    company_size?: string;
    industry?: string;
  };
}

export default function ProfilePage() {
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [formData, setFormData] = useState({
    first_name: "",
    last_name: "",
  });
  const [deleteEmail, setDeleteEmail] = useState("");
  const [deleteReason, setDeleteReason] = useState("");
  const router = useRouter();

  const fetchProfile = async () => {
    try {
      const response = await fetch("/api/users/profile");
      if (!response.ok) {
        throw new Error("Failed to fetch profile");
      }
      const data = await response.json();
      setProfile(data);
      setFormData({
        first_name: data.first_name,
        last_name: data.last_name,
      });
    } catch (error) {
      console.error("Error fetching profile:", error);
      toast.error("Failed to load profile");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProfile();
  }, []);

  const handleSaveProfile = async (e: React.FormEvent) => {
    e.preventDefault();
    setSaving(true);
    
    try {
      const response = await fetch("/api/users/profile", {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Failed to update profile");
      }

      await fetchProfile(); // Refresh profile data
      toast.success("Profile updated successfully");
    } catch (error: any) {
      console.error("Error updating profile:", error);
      toast.error(error.message || "Failed to update profile");
    } finally {
      setSaving(false);
    }
  };

  const handleAvatarUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Validate file type
    if (!file.type.startsWith("image/")) {
      toast.error("Please select an image file");
      return;
    }

    // Validate file size (5MB)
    if (file.size > 5 * 1024 * 1024) {
      toast.error("Image must be smaller than 5MB");
      return;
    }

    setUploading(true);
    
    try {
      const formData = new FormData();
      formData.append("avatar", file);

      const response = await fetch("/api/users/avatar", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Failed to upload avatar");
      }

      await fetchProfile(); // Refresh profile data
      toast.success("Avatar updated successfully");
    } catch (error: any) {
      console.error("Error uploading avatar:", error);
      toast.error(error.message || "Failed to upload avatar");
    } finally {
      setUploading(false);
    }
  };

  const handleDeleteAvatar = async () => {
    try {
      const response = await fetch("/api/users/avatar", {
        method: "DELETE",
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Failed to delete avatar");
      }

      await fetchProfile(); // Refresh profile data
      toast.success("Avatar deleted successfully");
    } catch (error: any) {
      console.error("Error deleting avatar:", error);
      toast.error(error.message || "Failed to delete avatar");
    }
  };

  const handleDeleteAccount = async () => {
    if (deleteEmail !== profile?.email) {
      toast.error("Email confirmation does not match");
      return;
    }

    try {
      const response = await fetch("/api/users/account", {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          confirm_email: deleteEmail,
          reason: deleteReason || undefined,
        }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Failed to delete account");
      }

      toast.success("Account deleted successfully. Redirecting...");
      setTimeout(() => {
        router.push("/login");
      }, 2000);
    } catch (error: any) {
      console.error("Error deleting account:", error);
      toast.error(error.message || "Failed to delete account");
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center space-y-4">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 mx-auto"></div>
          <p className="text-gray-500">Loading profile...</p>
        </div>
      </div>
    );
  }

  if (!profile) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center space-y-4">
          <p className="text-red-500">Failed to load profile</p>
          <Button onClick={fetchProfile}>Retry</Button>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="flex items-center gap-3">
        <User className="h-6 w-6" />
        <h1 className="text-2xl font-bold">User Profile</h1>
      </div>

      {/* Avatar and Basic Info */}
      <Card>
        <CardHeader>
          <CardTitle>Profile Information</CardTitle>
          <CardDescription>
            Manage your profile details and avatar
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Avatar Section */}
          <div className="flex items-center gap-6">
            <Avatar className="h-24 w-24">
              <AvatarImage src={profile.avatar_url} />
              <AvatarFallback className="text-lg">
                {profile.first_name[0]}{profile.last_name[0]}
              </AvatarFallback>
            </Avatar>
            
            <div className="space-y-2">
              <div className="flex gap-2">
                <label htmlFor="avatar-upload">
                  <Button
                    variant="outline"
                    size="sm"
                    disabled={uploading}
                    asChild
                  >
                    <span className="cursor-pointer">
                      <Upload className="h-4 w-4 mr-2" />
                      {uploading ? "Uploading..." : "Upload Avatar"}
                    </span>
                  </Button>
                </label>
                <input
                  id="avatar-upload"
                  type="file"
                  accept="image/*"
                  onChange={handleAvatarUpload}
                  className="hidden"
                />
                
                {profile.avatar_url && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleDeleteAvatar}
                  >
                    <Trash2 className="h-4 w-4 mr-2" />
                    Remove
                  </Button>
                )}
              </div>
              <p className="text-sm text-gray-500">
                Upload a profile picture. Max size: 5MB
              </p>
            </div>
          </div>

          <Separator />

          {/* Profile Form */}
          <form onSubmit={handleSaveProfile} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="first_name">First Name</Label>
                <Input
                  id="first_name"
                  value={formData.first_name}
                  onChange={(e) => setFormData({ ...formData, first_name: e.target.value })}
                  required
                />
              </div>
              <div>
                <Label htmlFor="last_name">Last Name</Label>
                <Input
                  id="last_name"
                  value={formData.last_name}
                  onChange={(e) => setFormData({ ...formData, last_name: e.target.value })}
                  required
                />
              </div>
            </div>
            
            <Button type="submit" disabled={saving}>
              <Save className="h-4 w-4 mr-2" />
              {saving ? "Saving..." : "Save Changes"}
            </Button>
          </form>
        </CardContent>
      </Card>

      {/* Account Information */}
      <Card>
        <CardHeader>
          <CardTitle>Account Information</CardTitle>
          <CardDescription>
            Your account details and organization membership
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid gap-4">
            <div className="flex items-center gap-3">
              <Mail className="h-4 w-4 text-gray-500" />
              <div>
                <p className="font-medium">Email</p>
                <p className="text-sm text-gray-500">{profile.email}</p>
              </div>
            </div>
            
            <div className="flex items-center gap-3">
              <Shield className="h-4 w-4 text-gray-500" />
              <div>
                <p className="font-medium">Role</p>
                <Badge variant={profile.role === "admin" ? "default" : "secondary"}>
                  {profile.role}
                </Badge>
              </div>
            </div>
            
            <div className="flex items-center gap-3">
              <Building className="h-4 w-4 text-gray-500" />
              <div>
                <p className="font-medium">Organization</p>
                <p className="text-sm text-gray-500">{profile.tenant.name}</p>
                {profile.tenant.industry && (
                  <p className="text-xs text-gray-400">{profile.tenant.industry}</p>
                )}
              </div>
            </div>
            
            <div className="flex items-center gap-3">
              <Calendar className="h-4 w-4 text-gray-500" />
              <div>
                <p className="font-medium">Member Since</p>
                <p className="text-sm text-gray-500">
                  {new Date(profile.created_at).toLocaleDateString()}
                </p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Danger Zone */}
      <Card className="border-red-200">
        <CardHeader>
          <CardTitle className="text-red-600">Danger Zone</CardTitle>
          <CardDescription>
            Irreversible actions that will permanently affect your account
          </CardDescription>
        </CardHeader>
        <CardContent>
          <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button variant="destructive">
                <Trash2 className="h-4 w-4 mr-2" />
                Delete Account
              </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Delete Account</AlertDialogTitle>
                <AlertDialogDescription>
                  This action cannot be undone. This will permanently delete your account
                  and remove all associated data.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <div className="space-y-4">
                <div>
                  <Label htmlFor="confirm-email">
                    Confirm your email address: {profile.email}
                  </Label>
                  <Input
                    id="confirm-email"
                    type="email"
                    placeholder="Enter your email to confirm"
                    value={deleteEmail}
                    onChange={(e) => setDeleteEmail(e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="delete-reason">
                    Reason for deletion (optional)
                  </Label>
                  <Input
                    id="delete-reason"
                    placeholder="Why are you deleting your account?"
                    value={deleteReason}
                    onChange={(e) => setDeleteReason(e.target.value)}
                  />
                </div>
              </div>
              <AlertDialogFooter>
                <AlertDialogCancel onClick={() => {
                  setDeleteEmail("");
                  setDeleteReason("");
                }}>
                  Cancel
                </AlertDialogCancel>
                <AlertDialogAction
                  onClick={handleDeleteAccount}
                  className="bg-red-600 hover:bg-red-700"
                  disabled={deleteEmail !== profile.email}
                >
                  Delete Account
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: app/(auth)/search/page.tsx
================
"use client";

import { useState, useEffect, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { toast } from "sonner";
import {
  Search,
  Filter,
  SortAsc,
  FileText,
  Download,
  Eye,
  X,
  ChevronDown,
  ChevronUp,
  FileSpreadsheet,
  FileImage,
  File,
  Loader2,
  TrendingUp,
  Clock,
  Star,
  MoreVertical,
  Bookmark,
} from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";

interface SearchResult {
  id: string;
  filename: string;
  title?: string;
  content: string;
  document_type: string;
  categories?: string[];
  topics?: string[];
  scores?: {
    text: number;
    semantic: number;
    sparse: number;
    combined: number;
  };
  relevance_score?: number; // For backward compatibility
  created_at?: string;
  file_size?: number;
  highlights?: string[];
  metadata?: Record<string, any>;
}

interface SearchFilters {
  documentTypes: string[];
  categories: string[];
  topics: string[];
  sortBy: "relevance" | "date" | "name";
  sortOrder: "asc" | "desc";
}

const documentTypeOptions = [
  { value: "pdf", label: "PDF", icon: FileText },
  { value: "docx", label: "Word", icon: FileText },
  { value: "xlsx", label: "Excel", icon: FileSpreadsheet },
  { value: "document", label: "Documents", icon: FileText },
  { value: "spreadsheet", label: "Spreadsheets", icon: FileSpreadsheet },
  { value: "image", label: "Images", icon: FileImage },
];

const categoryOptions = [
  { value: "financial", label: "Financial" },
  { value: "legal", label: "Legal" },
  { value: "hr", label: "HR & Personnel" },
  { value: "marketing", label: "Marketing" },
  { value: "technical", label: "Technical" },
  { value: "administrative", label: "Administrative" },
];

export default function SearchPage() {
  const [searchQuery, setSearchQuery] = useState("");
  const [results, setResults] = useState<SearchResult[]>([]);
  const [isSearching, setIsSearching] = useState(false);
  const [showFilters, setShowFilters] = useState(true);
  const [filters, setFilters] = useState<SearchFilters>({
    documentTypes: [],
    categories: [],
    topics: [],
    sortBy: "relevance",
    sortOrder: "desc",
  });
  const [totalResults, setTotalResults] = useState(0);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(false);

  // Recent searches from localStorage
  const [recentSearches, setRecentSearches] = useState<string[]>([]);
  
  // Instant search and suggestions
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [instantResults, setInstantResults] = useState<SearchResult[]>([]);
  const [isLoadingSuggestions, setIsLoadingSuggestions] = useState(false);

  useEffect(() => {
    const stored = localStorage.getItem("recentSearches");
    if (stored) {
      setRecentSearches(JSON.parse(stored));
    }
  }, []);

  const saveRecentSearch = (query: string) => {
    const updated = [query, ...recentSearches.filter((q) => q !== query)].slice(0, 10);
    setRecentSearches(updated);
    localStorage.setItem("recentSearches", JSON.stringify(updated));
  };

  // Debounced function for instant search and suggestions
  const debouncedSearch = useCallback(
    debounce(async (query: string) => {
      if (query.trim().length < 2) {
        setSuggestions([]);
        setInstantResults([]);
        setShowSuggestions(false);
        return;
      }

      setIsLoadingSuggestions(true);
      
      try {
        // Get suggestions and instant results in parallel
        const [suggestionsResponse, instantResponse] = await Promise.all([
          fetch(`/api/search/suggestions?query=${encodeURIComponent(query)}&limit=5`),
          fetch('/api/search/instant', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ query, limit: 3 })
          })
        ]);

        if (suggestionsResponse.ok) {
          const suggestionsData = await suggestionsResponse.json();
          setSuggestions(suggestionsData.suggestions || []);
        }

        if (instantResponse.ok) {
          const instantData = await instantResponse.json();
          setInstantResults(instantData.results || []);
        }

        setShowSuggestions(true);
      } catch (error) {
        console.error('Failed to fetch suggestions:', error);
        // Silently fail for suggestions, don't show error toast
        setSuggestions([]);
        setInstantResults([]);
        setShowSuggestions(false);
      } finally {
        setIsLoadingSuggestions(false);
      }
    }, 300),
    []
  );

  // Handle search input changes
  const handleSearchInputChange = (value: string) => {
    setSearchQuery(value);
    if (value.trim()) {
      debouncedSearch(value);
    } else {
      setShowSuggestions(false);
      setSuggestions([]);
      setInstantResults([]);
    }
  };

  // Helper function for debouncing
  function debounce(func: Function, wait: number) {
    let timeout: NodeJS.Timeout;
    return function executedFunction(...args: any[]) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  const performSearch = async (query: string, pageNum: number = 1) => {
    if (!query.trim()) return;

    setIsSearching(true);
    setShowSuggestions(false); // Hide suggestions when performing full search
    saveRecentSearch(query);

    try {
      const response = await fetch("/api/search/full", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          query,
          page: pageNum,
          size: 20,
          include_summary: true,
          filters: {
            ...(filters.documentTypes.length > 0 && { document_type: filters.documentTypes }),
            ...(filters.categories.length > 0 && { categories: filters.categories }),
            ...(filters.topics.length > 0 && { topics: filters.topics }),
          },
          sort_by: filters.sortBy,
          sort_order: filters.sortOrder,
        }),
      });

      if (!response.ok) {
        throw new Error("Search failed");
      }

      const data = await response.json();
      
      if (pageNum === 1) {
        setResults(data.results || []);
      } else {
        setResults((prev) => [...prev, ...(data.results || [])]);
      }
      
      setTotalResults(data.total || 0);
      setHasMore(data.has_more || false);
      setPage(pageNum);
    } catch (error: any) {
      console.error("Search error:", error);
      
      // More specific error handling
      if (error.message?.includes("404")) {
        toast.error("Search service not available. Please ensure documents are uploaded and indexed.");
      } else if (error.message?.includes("401") || error.message?.includes("403")) {
        toast.error("Authentication required. Please log in again.");
      } else {
        toast.error("Search failed. Please try again later.");
      }
      
      // Set empty results on error
      setResults([]);
      setTotalResults(0);
      setHasMore(false);
    } finally {
      setIsSearching(false);
    }
  };

  const handleSearch = () => {
    performSearch(searchQuery, 1);
  };

  const handleLoadMore = () => {
    performSearch(searchQuery, page + 1);
  };

  const handleFilterChange = (newFilters: Partial<SearchFilters>) => {
    setFilters((prev) => ({ ...prev, ...newFilters }));
    // Re-run search if we have a query
    if (searchQuery) {
      performSearch(searchQuery, 1);
    }
  };

  const getFileIcon = (type: string) => {
    const docType = type?.toLowerCase();
    switch (docType) {
      case "pdf":
        return <FileText className="w-4 h-4 text-red-500" />;
      case "xlsx":
      case "xls":
      case "spreadsheet":
        return <FileSpreadsheet className="w-4 h-4 text-green-600" />;
      case "image":
      case "png":
      case "jpg":
      case "jpeg":
        return <FileImage className="w-4 h-4 text-purple-600" />;
      case "docx":
      case "doc":
      case "document":
        return <FileText className="w-4 h-4 text-blue-500" />;
      default:
        return <File className="w-4 h-4 text-gray-500" />;
    }
  };

  const formatFileSize = (bytes?: number) => {
    if (!bytes) return "";
    const sizes = ["B", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return `${(bytes / Math.pow(1024, i)).toFixed(1)} ${sizes[i]}`;
  };

  return (
    <div className="flex h-full">
      {/* Filters Sidebar */}
      <AnimatePresence>
        {showFilters && (
          <motion.div
            initial={{ width: 0, opacity: 0 }}
            animate={{ width: 280, opacity: 1 }}
            exit={{ width: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
            className="border-r bg-gray-50/50 overflow-hidden"
          >
            <div className="p-6 h-full overflow-y-auto">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-lg font-semibold">Filters</h2>
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => setShowFilters(false)}
                >
                  <X className="w-4 h-4" />
                </Button>
              </div>

              {/* Document Types */}
              <div className="mb-6">
                <Label className="text-sm font-medium mb-3 block">Document Type</Label>
                <div className="space-y-2">
                  {documentTypeOptions.map((type) => (
                    <div key={type.value} className="flex items-center">
                      <Checkbox
                        id={type.value}
                        checked={filters.documentTypes.includes(type.value)}
                        onCheckedChange={(checked) => {
                          if (checked) {
                            handleFilterChange({
                              documentTypes: [...filters.documentTypes, type.value],
                            });
                          } else {
                            handleFilterChange({
                              documentTypes: filters.documentTypes.filter(
                                (t) => t !== type.value
                              ),
                            });
                          }
                        }}
                      />
                      <label
                        htmlFor={type.value}
                        className="ml-2 text-sm cursor-pointer flex items-center gap-2"
                      >
                        <type.icon className="w-4 h-4" />
                        {type.label}
                      </label>
                    </div>
                  ))}
                </div>
              </div>

              <Separator className="my-6" />

              {/* Categories */}
              <div className="mb-6">
                <Label className="text-sm font-medium mb-3 block">Category</Label>
                <div className="space-y-2">
                  {categoryOptions.map((category) => (
                    <div key={category.value} className="flex items-center">
                      <Checkbox
                        id={category.value}
                        checked={filters.categories.includes(category.value)}
                        onCheckedChange={(checked) => {
                          if (checked) {
                            handleFilterChange({
                              categories: [...filters.categories, category.value],
                            });
                          } else {
                            handleFilterChange({
                              categories: filters.categories.filter(
                                (c) => c !== category.value
                              ),
                            });
                          }
                        }}
                      />
                      <label
                        htmlFor={category.value}
                        className="ml-2 text-sm cursor-pointer"
                      >
                        {category.label}
                      </label>
                    </div>
                  ))}
                </div>
              </div>

              <Separator className="my-6" />

              {/* Topics */}
              <div className="mb-6">
                <Label className="text-sm font-medium mb-3 block">Topics</Label>
                <div className="space-y-2">
                  <Input
                    placeholder="Enter topics (comma-separated)"
                    value={filters.topics.join(", ")}
                    onChange={(e) => {
                      const topics = e.target.value
                        .split(",")
                        .map(t => t.trim())
                        .filter(t => t.length > 0);
                      handleFilterChange({ topics });
                    }}
                    className="text-sm"
                  />
                  <p className="text-xs text-gray-500">
                    Enter topics like "budget, planning, strategy"
                  </p>
                </div>
              </div>

              <Separator className="my-6" />

              {/* Sort */}
              <div>
                <Label className="text-sm font-medium mb-3 block">Sort By</Label>
                <RadioGroup
                  value={filters.sortBy}
                  onValueChange={(value) =>
                    handleFilterChange({ sortBy: value as any })
                  }
                >
                  <div className="flex items-center space-x-2 mb-2">
                    <RadioGroupItem value="relevance" id="relevance" />
                    <label htmlFor="relevance" className="text-sm cursor-pointer">
                      Relevance
                    </label>
                  </div>
                  <div className="flex items-center space-x-2 mb-2">
                    <RadioGroupItem value="date" id="date" />
                    <label htmlFor="date" className="text-sm cursor-pointer">
                      Date
                    </label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="name" id="name" />
                    <label htmlFor="name" className="text-sm cursor-pointer">
                      Name
                    </label>
                  </div>
                </RadioGroup>
              </div>

              {/* Clear Filters */}
              {(filters.documentTypes.length > 0 ||
                filters.categories.length > 0 ||
                filters.topics.length > 0) && (
                <Button
                  variant="outline"
                  size="sm"
                  className="w-full mt-6"
                  onClick={() => {
                    setFilters({
                      documentTypes: [],
                      categories: [],
                      topics: [],
                      sortBy: "relevance",
                      sortOrder: "desc",
                    });
                    if (searchQuery) {
                      performSearch(searchQuery, 1);
                    }
                  }}
                >
                  Clear Filters
                </Button>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        {/* Search Header */}
        <div className="border-b bg-white p-6">
          <div className="max-w-4xl mx-auto">
            <div className="flex items-center gap-4 mb-4">
              {!showFilters && (
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => setShowFilters(true)}
                >
                  <Filter className="w-4 h-4" />
                </Button>
              )}
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <Input
                  type="text"
                  placeholder="Search all documents..."
                  value={searchQuery}
                  onChange={(e) => handleSearchInputChange(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      handleSearch();
                    } else if (e.key === "Escape") {
                      setShowSuggestions(false);
                    }
                  }}
                  onFocus={() => {
                    if (searchQuery.trim().length >= 2) {
                      setShowSuggestions(true);
                    }
                  }}
                  className="pl-10 pr-4 h-12 text-lg"
                />
                
                {/* Suggestions Dropdown */}
                {showSuggestions && (suggestions.length > 0 || instantResults.length > 0) && (
                  <div className="absolute top-full left-0 right-0 bg-white border border-gray-200 rounded-lg shadow-lg z-50 mt-1 max-h-96 overflow-y-auto">
                    {/* Search Suggestions */}
                    {suggestions.length > 0 && (
                      <div className="p-2 border-b">
                        <p className="text-xs font-medium text-gray-500 mb-2 px-2">Suggestions</p>
                        {suggestions.map((suggestion, idx) => (
                          <button
                            key={idx}
                            className="w-full text-left px-3 py-2 hover:bg-gray-50 rounded flex items-center gap-2"
                            onClick={() => {
                              setSearchQuery(suggestion);
                              performSearch(suggestion, 1);
                            }}
                          >
                            <Search className="w-4 h-4 text-gray-400" />
                            <span className="text-sm">{suggestion}</span>
                          </button>
                        ))}
                      </div>
                    )}
                    
                    {/* Instant Results */}
                    {instantResults.length > 0 && (
                      <div className="p-2">
                        <p className="text-xs font-medium text-gray-500 mb-2 px-2">Quick Results</p>
                        {instantResults.map((result, idx) => (
                          <button
                            key={idx}
                            className="w-full text-left px-3 py-3 hover:bg-gray-50 rounded border-b last:border-b-0"
                            onClick={() => {
                              // Handle clicking on instant result - could open document
                              toast.info("Opening document...");
                            }}
                          >
                            <div className="flex items-start gap-3">
                              {getFileIcon(result.document_type || result.type)}
                              <div className="flex-1 min-w-0">
                                <p className="font-medium text-sm text-gray-900 truncate">
                                  {result.title || result.filename}
                                </p>
                                <p className="text-xs text-gray-500 mt-1 line-clamp-2">
                                  {result.highlights?.[0] || "Document content available - click to view"}
                                </p>
                              </div>
                              <Badge variant="secondary" className="text-xs">
                                {Math.round((result.scores?.combined || result.relevance_score || 0) * 100)}%
                              </Badge>
                            </div>
                          </button>
                        ))}
                        {instantResults.length > 0 && (
                          <button
                            className="w-full text-center py-2 text-sm text-[#A3BC02] hover:bg-gray-50 rounded"
                            onClick={() => {
                              handleSearch();
                            }}
                          >
                            View all results
                          </button>
                        )}
                      </div>
                    )}
                    
                    {isLoadingSuggestions && (
                      <div className="flex items-center justify-center py-4">
                        <Loader2 className="w-4 h-4 animate-spin text-gray-400" />
                        <span className="ml-2 text-sm text-gray-500">Loading suggestions...</span>
                      </div>
                    )}
                  </div>
                )}
              </div>
              <Button
                size="lg"
                onClick={handleSearch}
                disabled={!searchQuery.trim() || isSearching}
                className="bg-[#A3BC02] hover:bg-[#8BA000]"
              >
                {isSearching ? (
                  <Loader2 className="w-5 h-5 animate-spin" />
                ) : (
                  "Search"
                )}
              </Button>
            </div>

            {/* Recent Searches */}
            {!searchQuery && recentSearches.length > 0 && (
              <div className="mt-4">
                <p className="text-sm text-gray-500 mb-2">Recent searches</p>
                <div className="flex flex-wrap gap-2">
                  {recentSearches.slice(0, 5).map((search, idx) => (
                    <Button
                      key={idx}
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setSearchQuery(search);
                        performSearch(search, 1);
                      }}
                      className="text-sm"
                    >
                      <Clock className="w-3 h-3 mr-1" />
                      {search}
                    </Button>
                  ))}
                </div>
              </div>
            )}

            {/* Results Summary */}
            {results.length > 0 && (
              <div className="mt-4 flex items-center justify-between">
                <p className="text-sm text-gray-600">
                  Found {totalResults} results for "{searchQuery}"
                </p>
                <Select
                  value={`${filters.sortBy}-${filters.sortOrder}`}
                  onValueChange={(value) => {
                    const [sortBy, sortOrder] = value.split("-");
                    handleFilterChange({
                      sortBy: sortBy as any,
                      sortOrder: sortOrder as any,
                    });
                  }}
                >
                  <SelectTrigger className="w-[180px]">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="relevance-desc">
                      <div className="flex items-center gap-2">
                        <TrendingUp className="w-4 h-4" />
                        Most Relevant
                      </div>
                    </SelectItem>
                    <SelectItem value="date-desc">
                      <div className="flex items-center gap-2">
                        <Clock className="w-4 h-4" />
                        Newest First
                      </div>
                    </SelectItem>
                    <SelectItem value="date-asc">
                      <div className="flex items-center gap-2">
                        <Clock className="w-4 h-4" />
                        Oldest First
                      </div>
                    </SelectItem>
                    <SelectItem value="name-asc">
                      <div className="flex items-center gap-2">
                        <SortAsc className="w-4 h-4" />
                        Name (A-Z)
                      </div>
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>
            )}
          </div>
        </div>

        {/* Results */}
        <ScrollArea className="flex-1">
          <div className="max-w-4xl mx-auto p-6">
            {results.length === 0 && !isSearching && searchQuery && (
              <div className="text-center py-20">
                <div className="mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                  <Search className="w-8 h-8 text-gray-400" />
                </div>
                <h3 className="text-lg font-semibold mb-2">No results found</h3>
                <p className="text-gray-500">
                  Try adjusting your search or filters
                </p>
              </div>
            )}

            {results.length === 0 && !searchQuery && (
              <div className="text-center py-20">
                <div className="mx-auto w-16 h-16 bg-[#A3BC02]/10 rounded-full flex items-center justify-center mb-4">
                  <Search className="w-8 h-8 text-[#A3BC02]" />
                </div>
                <h3 className="text-lg font-semibold mb-2">
                  Start your search
                </h3>
                <p className="text-gray-500 mb-6">
                  Search across all your documents with advanced filters
                </p>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 max-w-2xl mx-auto">
                  <Card className="cursor-pointer hover:shadow-md transition-shadow">
                    <CardContent className="p-4 text-center">
                      <Star className="w-8 h-8 text-yellow-500 mx-auto mb-2" />
                      <h4 className="font-medium mb-1">Popular Searches</h4>
                      <p className="text-sm text-gray-500">
                        Budget reports, HR policies, Marketing plans
                      </p>
                    </CardContent>
                  </Card>
                  <Card className="cursor-pointer hover:shadow-md transition-shadow">
                    <CardContent className="p-4 text-center">
                      <Clock className="w-8 h-8 text-blue-500 mx-auto mb-2" />
                      <h4 className="font-medium mb-1">Recent Documents</h4>
                      <p className="text-sm text-gray-500">
                        Files added in the last 7 days
                      </p>
                    </CardContent>
                  </Card>
                  <Card className="cursor-pointer hover:shadow-md transition-shadow">
                    <CardContent className="p-4 text-center">
                      <FileText className="w-8 h-8 text-green-500 mx-auto mb-2" />
                      <h4 className="font-medium mb-1">By Type</h4>
                      <p className="text-sm text-gray-500">
                        PDFs, Spreadsheets, Presentations
                      </p>
                    </CardContent>
                  </Card>
                </div>
              </div>
            )}

            <AnimatePresence>
              {results.map((result, index) => (
                <motion.div
                  key={result.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.3, delay: index * 0.05 }}
                >
                  <Card className="mb-4 hover:shadow-md transition-shadow">
                    <CardContent className="p-6">
                      <div className="flex items-start justify-between gap-4">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            {getFileIcon(result.document_type)}
                            <h3 className="font-semibold text-lg">
                              {result.title || result.filename}
                            </h3>
                            {(result.scores?.combined || result.relevance_score || 0) > 0.8 && (
                              <Badge variant="secondary" className="bg-green-100">
                                High relevance
                              </Badge>
                            )}
                            {result.scores?.combined && (
                              <Badge variant="outline" className="text-xs">
                                {Math.round(result.scores.combined * 100)}%
                              </Badge>
                            )}
                          </div>

                          {/* Topics and Categories */}
                          {(result.topics?.length || result.categories?.length) && (
                            <div className="flex flex-wrap gap-1 mb-2">
                              {result.topics?.slice(0, 3).map((topic, idx) => (
                                <Badge key={idx} variant="secondary" className="text-xs bg-blue-50 text-blue-700">
                                  {topic}
                                </Badge>
                              ))}
                              {result.categories?.slice(0, 2).map((category, idx) => (
                                <Badge key={idx} variant="outline" className="text-xs">
                                  {category}
                                </Badge>
                              ))}
                            </div>
                          )}

                          {/* Content preview with highlights - Show only document summary, not chunk content */}
                          {result.highlights && result.highlights.length > 0 ? (
                            <p className="text-gray-600 mb-3 line-clamp-2">
                              {result.highlights[0]}
                            </p>
                          ) : (
                            <p className="text-gray-600 mb-3 italic">
                              Document content available - click to view
                            </p>
                          )}

                          {/* Metadata */}
                          <div className="flex items-center gap-4 text-sm text-gray-500">
                            <span>{result.document_type}</span>
                            {result.created_at && (
                              <>
                                <span>•</span>
                                <span>{format(new Date(result.created_at), "MMM d, yyyy")}</span>
                              </>
                            )}
                            {result.file_size && (
                              <>
                                <span>•</span>
                                <span>{formatFileSize(result.file_size)}</span>
                              </>
                            )}
                          </div>
                        </div>

                        {/* Actions */}
                        <div className="flex items-center gap-2">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => {
                              window.location.href = `/documents/${result.id}`;
                            }}
                          >
                            <Eye className="w-4 h-4" />
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => {
                              // TODO: Implement bookmark
                              toast.info("Bookmark feature coming soon");
                            }}
                          >
                            <Bookmark className="w-4 h-4" />
                          </Button>
                          <Button size="sm" variant="outline">
                            <Download className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              ))}
            </AnimatePresence>

            {/* Load More */}
            {hasMore && !isSearching && (
              <div className="text-center mt-8">
                <Button
                  variant="outline"
                  onClick={handleLoadMore}
                  disabled={isSearching}
                >
                  Load More Results
                </Button>
              </div>
            )}

            {isSearching && results.length > 0 && (
              <div className="text-center py-4">
                <Loader2 className="w-6 h-6 animate-spin mx-auto text-gray-400" />
              </div>
            )}
          </div>
        </ScrollArea>
      </div>
    </div>
  );
}

================
File: app/(auth)/settings/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useSearchParams } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { toast } from "sonner";
import {
  User,
  Lock,
  Save,
  Eye,
  EyeOff,
  Loader2,
  LayoutGrid,
  LockOpen,
} from "lucide-react";
import GoogleDriveIntegration from "@/components/integrations/GoogleDriveIntegration";
import SyncPipelinesManager from "@/components/integrations/SyncPipelinesManager";

interface UserProfile {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
}

export default function SettingsPage() {
  const searchParams = useSearchParams();
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [activeTab, setActiveTab] = useState(
    searchParams.get("tab") || "profile"
  );

  // Profile form
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");

  // Password change form
  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [showPasswords, setShowPasswords] = useState(false);
  const [isChangingPassword, setIsChangingPassword] = useState(false);

  // Email change form
  const [newEmail, setNewEmail] = useState("");
  const [isChangingEmail, setIsChangingEmail] = useState(false);

  useEffect(() => {
    loadProfile();
  }, []);

  const loadProfile = async () => {
    try {
      setIsLoading(true);
      const response = await fetch("/api/users/profile");
      if (response.ok) {
        const data = await response.json();
        setProfile(data);
        setFirstName(data.first_name || "");
        setLastName(data.last_name || "");
        setNewEmail(data.email || "");
      } else {
        toast.error("Failed to load profile");
      }
    } catch (error) {
      console.error("Failed to load profile:", error);
      toast.error("Failed to load profile");
    } finally {
      setIsLoading(false);
    }
  };

  const saveProfile = async () => {
    try {
      setIsSaving(true);
      const response = await fetch("/api/users/profile", {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          first_name: firstName,
          last_name: lastName,
        }),
      });

      if (response.ok) {
        const updatedProfile = await response.json();
        setProfile(updatedProfile);
        toast.success("Profile updated successfully");
      } else {
        const error = await response.json();
        toast.error(error.message || "Failed to update profile");
      }
    } catch (error) {
      console.error("Failed to save profile:", error);
      toast.error("Failed to update profile");
    } finally {
      setIsSaving(false);
    }
  };

  const changePassword = async () => {
    if (newPassword !== confirmPassword) {
      toast.error("New passwords don't match");
      return;
    }

    if (newPassword.length < 8) {
      toast.error("Password must be at least 8 characters long");
      return;
    }

    try {
      setIsChangingPassword(true);
      const response = await fetch("/api/auth/change-password", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          current_password: currentPassword,
          new_password: newPassword,
        }),
      });

      if (response.ok) {
        setCurrentPassword("");
        setNewPassword("");
        setConfirmPassword("");
        toast.success("Password changed successfully");
      } else {
        const error = await response.json();
        toast.error(error.message || "Failed to change password");
      }
    } catch (error) {
      console.error("Failed to change password:", error);
      toast.error("Failed to change password");
    } finally {
      setIsChangingPassword(false);
    }
  };

  const changeEmail = async () => {
    if (!newEmail || newEmail === profile?.email) {
      toast.error("Please enter a new email address");
      return;
    }

    try {
      setIsChangingEmail(true);
      const response = await fetch("/api/auth/change-email", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          new_email: newEmail,
        }),
      });

      if (response.ok) {
        toast.success(
          "Email change requested. Please check both your current and new email for verification."
        );
        loadProfile(); // Refresh profile
      } else {
        const error = await response.json();
        toast.error(error.message || "Failed to change email");
      }
    } catch (error) {
      console.error("Failed to change email:", error);
      toast.error("Failed to change email");
    } finally {
      setIsChangingEmail(false);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#A3BC02] mx-auto mb-4"></div>
          <p className="text-gray-500">Loading settings...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-none">
      <div className="max-w-7xl 2xl:max-w-screen-2xl mx-auto px-6 py-8">
        {/* Header with Tab Navigation */}
        <div className="flex items-center justify-between mb-4">
          <h1 className="text-8xl font-medium text-custom-dark-green font-serif">
            Settings
          </h1>

          {/* Tab Navigation */}
          <div className="flex items-center gap-2">
            <button
              onClick={() => setActiveTab("profile")}
              className={`flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans ${
                activeTab === "profile"
                  ? "text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
                  : "bg-[#eaeaea] text-custom-dark-green border border-gray-200 hover:bg-gray-50"
              }`}
            >
              <User className="w-4 h-4" />
              Profile
            </button>
            <button
              onClick={() => setActiveTab("security")}
              className={`flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans ${
                activeTab === "security"
                  ? "text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
                  : "bg-[#eaeaea] text-custom-dark-green border border-gray-200 hover:bg-gray-50"
              }`}
            >
              <Lock className="w-4 h-4" />
              Security
            </button>
            <button
              onClick={() => setActiveTab("integrations")}
              className={`flex items-center gap-2 px-4 py-2 rounded-full transition duration-200 font-sans ${
                activeTab === "integrations"
                  ? "text-gray-900 border bg-white border-[#A3BC01] [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002]"
                  : "bg-[#eaeaea] text-custom-dark-green border border-gray-200 hover:bg-gray-50"
              }`}
            >
              <LayoutGrid className="w-4 h-4" />
              Integrations
            </button>
          </div>
        </div>

        {/* Description */}
        <div className="mb-8">
          <p className="text-gray-600 text-sm font-sans">
            Manage all aspects of your account in one place: update your
            profile, review security settings, and connect integrations.
          </p>
        </div>

        {/* Profile Tab */}
        {activeTab === "profile" && (
          <div className="pt-6">
            <h2 className="text-4xl font-medium text-custom-dark-green font-serif my-4">
              Profile Information
            </h2>
            <p className="text-gray-600 text-sm font-sans mb-8">
              Edit your personal details like your name and profile photo. Your
              email address can be updated in the Security tab.
            </p>

            {/* Form Container with white background */}
            <div className="w-3/4 bg-white rounded-xl p-6">
              <div className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label
                      htmlFor="firstName"
                      className="text-sm font-medium text-black font-sans"
                    >
                      First Name
                    </Label>
                    <Input
                      id="firstName"
                      value={firstName}
                      onChange={(e) => setFirstName(e.target.value)}
                      placeholder="Siddharth"
                      className="h-12 rounded-full border-[#F6F6F6] bg-[#F6F6F6] font-sans"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label
                      htmlFor="lastName"
                      className="text-sm font-medium text-black font-sans"
                    >
                      Last Name
                    </Label>
                    <Input
                      id="lastName"
                      value={lastName}
                      onChange={(e) => setLastName(e.target.value)}
                      placeholder="Masqualin"
                      className="h-12 rounded-full border-[#F6F6F6] bg-[#F6F6F6] font-sans"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label
                      htmlFor="email"
                      className="text-sm font-medium text-black font-sans"
                    >
                      Email
                    </Label>
                    <div className="text-xs text-gray-500 font-sans mb-2">
                      Visit Security tab to change email.
                    </div>
                    <div className="relative">
                      <Input
                        id="email"
                        value={profile?.email || ""}
                        disabled
                        className="h-12 rounded-full border-gray-200 bg-[#eaeaea] font-sans pr-12"
                      />
                      <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                        <Lock className="w-4 h-4 text-gray-400" />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <Button
              onClick={saveProfile}
              disabled={isSaving}
              className="mt-6 text-gray-900 border bg-white border-[#A3BC01] rounded-full transition duration-200 [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002] font-sans h-11 px-4 flex items-center gap-2"
            >
              {isSaving ? (
                <>
                  <Loader2 className="w-4 h-4 animate-spin" />
                  Saving...
                </>
              ) : (
                <>
                  <Save className="w-4 h-4" />
                  Save Changes
                </>
              )}
            </Button>
          </div>
        )}

        {/* Security Tab */}
        {activeTab === "security" && (
          <div className="pt-6">
            <h2 className="text-4xl font-medium text-custom-dark-green font-serif my-4">
              Change Password
            </h2>
            <p className="text-gray-600 text-sm font-sans mb-8">
              Update your password to keep your account secure. Choose a strong
              password with at least 8 characters.
            </p>

            {/* Password Change Section */}
            <div className="mb-12">
              {/* Password Form Container with white background */}
              <div className="w-1/2 bg-white rounded-xl p-6">
                <div className="space-y-6">
                  <div className="space-y-2">
                    <Label
                      htmlFor="currentPassword"
                      className="text-sm font-medium text-black font-sans"
                    >
                      Current Password
                    </Label>
                    <div className="relative">
                      <Input
                        id="currentPassword"
                        type={showPasswords ? "text" : "password"}
                        value={currentPassword}
                        onChange={(e) => setCurrentPassword(e.target.value)}
                        placeholder="Enter your current password"
                        className="h-12 rounded-full border-[#F6F6F6] bg-[#F6F6F6] font-sans pr-12 w-full"
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        className="absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0 hover:bg-transparent"
                        onClick={() => setShowPasswords(!showPasswords)}
                      >
                        {showPasswords ? (
                          <EyeOff className="w-4 h-4 text-gray-400" />
                        ) : (
                          <Eye className="w-4 h-4 text-gray-400" />
                        )}
                      </Button>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label
                      htmlFor="newPassword"
                      className="text-sm font-medium text-black font-sans"
                    >
                      New Password
                    </Label>
                    <Input
                      id="newPassword"
                      type={showPasswords ? "text" : "password"}
                      value={newPassword}
                      onChange={(e) => setNewPassword(e.target.value)}
                      placeholder="Enter your new password"
                      className="h-12 rounded-full border-[#F6F6F6] bg-[#F6F6F6] font-sans w-full"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label
                      htmlFor="confirmPassword"
                      className="text-sm font-medium text-black font-sans"
                    >
                      Confirm New Password
                    </Label>
                    <Input
                      id="confirmPassword"
                      type={showPasswords ? "text" : "password"}
                      value={confirmPassword}
                      onChange={(e) => setConfirmPassword(e.target.value)}
                      placeholder="Confirm your new password"
                      className="h-12 rounded-full border-[#F6F6F6] bg-[#F6F6F6] font-sans w-full"
                    />
                  </div>
                </div>
              </div>

              <Button
                onClick={changePassword}
                disabled={
                  isChangingPassword ||
                  !currentPassword ||
                  !newPassword ||
                  !confirmPassword
                }
                className="mt-6 text-gray-900 border bg-white border-[#A3BC01] rounded-full transition duration-200 [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002] font-sans h-11 px-4 flex items-center gap-2"
              >
                {isChangingPassword ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin" />
                    Changing...
                  </>
                ) : (
                  <>
                    <LockOpen className="w-4 h-4" />
                    Change Password
                  </>
                )}
              </Button>
            </div>

            {/* Email Change Section */}
            <div>
              <h2 className="text-4xl font-medium text-custom-dark-green font-serif my-4">
                Change Email Address
              </h2>
              <p className="text-gray-600 text-sm font-sans mb-8">
                Update your email address for account notifications and login.
                You'll need to verify both your current and new email.
              </p>

              {/* Email Form Container with white background */}
              <div className="w-1/2 bg-white rounded-xl p-6">
                <div className="space-y-6">
                  <div className="space-y-2">
                    <Label
                      htmlFor="currentEmail"
                      className="text-sm font-medium text-black font-sans"
                    >
                      Current Email
                    </Label>
                    <Input
                      id="currentEmail"
                      value={profile?.email || ""}
                      disabled
                      className="h-12 rounded-full border-gray-200 bg-[#eaeaea] font-sans w-full"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label
                      htmlFor="newEmailAddress"
                      className="text-sm font-medium text-black font-sans"
                    >
                      New Email Address
                    </Label>
                    <Input
                      id="newEmailAddress"
                      type="email"
                      value={newEmail}
                      onChange={(e) => setNewEmail(e.target.value)}
                      placeholder="Enter your new email address"
                      className="h-12 rounded-full border-[#F6F6F6] bg-[#F6F6F6] font-sans w-full"
                    />
                  </div>
                </div>
              </div>

              <Button
                onClick={changeEmail}
                disabled={
                  isChangingEmail || !newEmail || newEmail === profile?.email
                }
                className="mt-6 text-gray-900 border bg-white border-[#A3BC01] rounded-full transition duration-200 [box-shadow:inset_0_0_25px_0_rgba(163,188,1,0.2)] hover:[box-shadow:inset_0_0_36px_0_rgba(163,188,1,0.36),0_2px_12px_0_rgba(163,188,1,0.08)] hover:bg-[#FAFFD8] hover:border-[#8fa002] font-sans h-11 px-4 flex items-center gap-2"
              >
                {isChangingEmail ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin" />
                    Updating...
                  </>
                ) : (
                  <>
                    <Save className="w-4 h-4" />
                    Change Email
                  </>
                )}
              </Button>
            </div>
          </div>
        )}

        {/* Integrations Tab */}
        {activeTab === "integrations" && (
          <div className="pt-8 space-y-16">
            <div>
              <h2 className="text-4xl font-medium text-custom-dark-green font-serif mb-4">
                Manage Integrations
              </h2>
              <GoogleDriveIntegration />
            </div>

            <div>
              <h2 className="text-4xl font-medium text-custom-dark-green font-serif mb-4">
                Sync Pipelines
              </h2>
              <SyncPipelinesManager />
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

================
File: app/(auth)/team/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { toast } from "sonner";
import {
  Users,
  UserPlus,
  Mail,
  Calendar,
  MoreVertical,
  Trash2,
  Edit,
  Crown,
  User,
  Send,
  Loader2,
} from "lucide-react";
import { cn } from "@/lib/utils";

interface TeamMember {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
  role: string;
  created_at: string;
  last_active_at?: string;
}

interface PendingInvite {
  id: string;
  email: string;
  role: string;
  expires_at: string;
  created_at: string;
}

interface TeamStats {
  total_members: number;
  owners: number;
  admins: number;
  members: number;
  pending_invites: number;
}

interface CurrentUser {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
  role: string;
  tenant: {
    id: string;
    name: string;
  };
}

export default function TeamPage() {
  const [members, setMembers] = useState<TeamMember[]>([]);
  const [pendingInvites, setPendingInvites] = useState<PendingInvite[]>([]);
  const [teamStats, setTeamStats] = useState<TeamStats | null>(null);
  const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isInviting, setIsInviting] = useState(false);
  const [showInviteDialog, setShowInviteDialog] = useState(false);
  
  // Invite form
  const [inviteEmails, setInviteEmails] = useState("");
  const [inviteMessage, setInviteMessage] = useState("");

  useEffect(() => {
    loadTeamData();
  }, []);

  const loadTeamData = async () => {
    try {
      setIsLoading(true);
      
      // Get current user info first to check permissions
      const userResponse = await fetch("/api/users/profile");
      let userData = null;
      let shouldFetchInvites = false;
      
      if (userResponse.ok) {
        userData = await userResponse.json();
        setCurrentUser(userData);
        shouldFetchInvites = userData.role === 'admin' || userData.role === 'owner';
      }

      const requests = [
        fetch("/api/team/members"),
        fetch("/api/team/stats")
      ];

      // Only fetch invites if user is admin or owner
      if (shouldFetchInvites) {
        requests.push(fetch("/api/invites/list"));
      }

      const responses = await Promise.all(requests);
      const [membersResponse, statsResponse, invitesResponse] = responses;
      
      if (membersResponse.ok) {
        const membersData = await membersResponse.json();
        setMembers(membersData.members || []);
        // Only set pending invites from members response if we're not fetching from dedicated endpoint
        if (!shouldFetchInvites) {
          setPendingInvites(membersData.pending_invites || []);
        }
      } else {
        toast.error("Failed to load team members");
      }

      if (statsResponse.ok) {
        const statsData = await statsResponse.json();
        setTeamStats(statsData);
      }

      // Load pending invites from dedicated endpoint (only for admins)
      if (shouldFetchInvites && invitesResponse && invitesResponse.ok) {
        const invitesData = await invitesResponse.json();
        setPendingInvites(invitesData || []);
      }
    } catch (error) {
      console.error("Failed to load team data:", error);
      toast.error("Failed to load team data");
    } finally {
      setIsLoading(false);
    }
  };

  const sendInvites = async () => {
    const emails = inviteEmails
      .split(/[,\n]/)
      .map(email => email.trim())
      .filter(email => email.length > 0);

    if (emails.length === 0) {
      toast.error("Please enter at least one email address");
      return;
    }

    // Validate emails
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const invalidEmails = emails.filter(email => !emailRegex.test(email));
    if (invalidEmails.length > 0) {
      toast.error(`Invalid email addresses: ${invalidEmails.join(", ")}`);
      return;
    }

    try {
      setIsInviting(true);
      const response = await fetch("/api/invites/send", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          emails,
          message: inviteMessage.trim() || undefined,
          role: "member", // Default to member role
        }),
      });

      if (response.ok) {
        const data = await response.json();
        toast.success(`Successfully sent ${emails.length} invitation${emails.length > 1 ? 's' : ''}`);
        setInviteEmails("");
        setInviteMessage("");
        setShowInviteDialog(false);
        loadTeamData(); // Refresh the list
      } else {
        const error = await response.json();
        toast.error(error.message || "Failed to send invitations");
      }
    } catch (error) {
      console.error("Failed to send invites:", error);
      toast.error("Failed to send invitations");
    } finally {
      setIsInviting(false);
    }
  };

  const removeMember = async (memberId: string, memberName: string) => {
    if (!confirm(`Are you sure you want to remove ${memberName} from the team?`)) {
      return;
    }

    try {
      const response = await fetch(`/api/team/members/${memberId}`, {
        method: "DELETE",
      });

      if (response.ok) {
        setMembers(prev => prev.filter(member => member.id !== memberId));
        toast.success("Team member removed successfully");
      } else {
        const error = await response.json();
        toast.error(error.message || "Failed to remove team member");
      }
    } catch (error) {
      console.error("Failed to remove member:", error);
      toast.error("Failed to remove team member");
    }
  };

  const revokeInvite = async (inviteId: string, email: string) => {
    if (!confirm(`Are you sure you want to revoke the invitation for ${email}?`)) {
      return;
    }

    try {
      const response = await fetch(`/api/invites/${inviteId}`, {
        method: "DELETE",
      });

      if (response.ok) {
        setPendingInvites(prev => prev.filter(invite => invite.id !== inviteId));
        toast.success("Invitation revoked successfully");
      } else {
        const error = await response.json();
        toast.error(error.message || "Failed to revoke invitation");
      }
    } catch (error) {
      console.error("Failed to revoke invite:", error);
      toast.error("Failed to revoke invitation");
    }
  };

  const resendInvite = async (inviteId: string, email: string) => {
    try {
      const response = await fetch(`/api/invites/${inviteId}/resend`, {
        method: "POST",
      });

      if (response.ok) {
        toast.success(`Invitation resent to ${email}`);
      } else {
        const error = await response.json();
        toast.error(error.message || "Failed to resend invitation");
      }
    } catch (error) {
      console.error("Failed to resend invite:", error);
      toast.error("Failed to resend invitation");
    }
  };

  const getDisplayName = (member: TeamMember) => {
    if (member.first_name || member.last_name) {
      return `${member.first_name || ""} ${member.last_name || ""}`.trim();
    }
    return member.email;
  };

  const getRoleColor = (role: string) => {
    switch (role.toLowerCase()) {
      case "owner":
        return "bg-purple-100 text-purple-800";
      case "admin":
        return "bg-blue-100 text-blue-800";
      case "member":
        return "bg-green-100 text-green-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  };

  // Check if current user is admin or owner
  const isAdmin = () => {
    return currentUser?.role === 'admin' || currentUser?.role === 'owner';
  };

  if (isLoading) {
    return (
      <div className="container mx-auto px-6 py-8 max-w-6xl">
        <div className="flex items-center justify-center py-12">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#A3BC02] mx-auto mb-4"></div>
            <p className="text-gray-500">Loading team members...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-6 py-8 max-w-6xl">
      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <div>
          <div className="flex items-center gap-3 mb-2">
            <div className="p-2 bg-[#A3BC02]/10 rounded-lg">
              <Users className="w-6 h-6 text-[#A3BC02]" />
            </div>
            <h1 className="text-2xl font-bold text-gray-900">Team Management</h1>
          </div>
          <p className="text-gray-600">
            {isAdmin() ? "Manage your team members and send invitations" : "View your team members"}
          </p>
        </div>
        
        {isAdmin() && (
          <Dialog open={showInviteDialog} onOpenChange={setShowInviteDialog}>
            <DialogTrigger asChild>
              <Button className="bg-[#A3BC02] hover:bg-[#8BA000]">
                <UserPlus className="w-4 h-4 mr-2" />
                Invite Members
              </Button>
            </DialogTrigger>
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle>Invite Team Members</DialogTitle>
              <DialogDescription>
                Send invitations to new team members via email
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="emails">Email Addresses</Label>
                <textarea
                  id="emails"
                  className="w-full min-h-[100px] p-3 border rounded-md resize-none"
                  placeholder="Enter email addresses separated by commas or new lines"
                  value={inviteEmails}
                  onChange={(e) => setInviteEmails(e.target.value)}
                />
                <p className="text-xs text-gray-500">
                  You can enter multiple emails separated by commas or line breaks
                </p>
              </div>
              <div className="space-y-2">
                <Label htmlFor="message">Custom Message (Optional)</Label>
                <textarea
                  id="message"
                  className="w-full min-h-[80px] p-3 border rounded-md resize-none"
                  placeholder="Add a personal message to the invitation..."
                  value={inviteMessage}
                  onChange={(e) => setInviteMessage(e.target.value)}
                />
              </div>
              <div className="flex gap-2">
                <Button
                  onClick={sendInvites}
                  disabled={isInviting || !inviteEmails.trim()}
                  className="flex-1 bg-[#A3BC02] hover:bg-[#8BA000]"
                >
                  {isInviting ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Sending...
                    </>
                  ) : (
                    <>
                      <Send className="w-4 h-4 mr-2" />
                      Send Invitations
                    </>
                  )}
                </Button>
                <Button
                  variant="outline"
                  onClick={() => setShowInviteDialog(false)}
                  disabled={isInviting}
                >
                  Cancel
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
        )}
      </div>

      {/* Team Stats */}
      <div className={`grid grid-cols-1 gap-6 mb-8 ${isAdmin() ? 'md:grid-cols-3' : 'md:grid-cols-2'}`}>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total Members</p>
                <p className="text-2xl font-bold text-gray-900">
                  {teamStats?.total_members || members.length}
                </p>
              </div>
              <Users className="w-8 h-8 text-[#A3BC02]" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Admins & Owners</p>
                <p className="text-2xl font-bold text-gray-900">
                  {(teamStats?.admins || 0) + (teamStats?.owners || 0)}
                </p>
              </div>
              <Crown className="w-8 h-8 text-yellow-500" />
            </div>
          </CardContent>
        </Card>
        {isAdmin() && (
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Pending Invites</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {teamStats?.pending_invites || pendingInvites.length}
                  </p>
                </div>
                <Mail className="w-8 h-8 text-yellow-500" />
              </div>
            </CardContent>
          </Card>
        )}
      </div>

      {/* Members List */}
      <Card>
        <CardHeader>
          <CardTitle>Team Members</CardTitle>
          <CardDescription>
            Manage your team members and their roles
          </CardDescription>
        </CardHeader>
        <CardContent>
          {members.length === 0 ? (
            <div className="text-center py-12">
              <div className="mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                <Users className="w-8 h-8 text-gray-400" />
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">No team members yet</h3>
              <p className="text-gray-500 mb-4">
                {isAdmin() 
                  ? "Start building your team by inviting members"
                  : "No team members to display"
                }
              </p>
              {isAdmin() && (
                <Button
                  onClick={() => setShowInviteDialog(true)}
                  className="bg-[#A3BC02] hover:bg-[#8BA000]"
                >
                  <UserPlus className="w-4 h-4 mr-2" />
                  Invite Your First Member
                </Button>
              )}
            </div>
          ) : (
            <ScrollArea className="h-[500px]">
              <div className="space-y-4">
                {members.map((member, index) => (
                  <motion.div
                    key={member.id}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.05 }}
                    className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    <div className="flex items-center gap-4">
                      <div className="w-10 h-10 bg-[#A3BC02]/10 rounded-full flex items-center justify-center">
                        <User className="w-5 h-5 text-[#A3BC02]" />
                      </div>
                      <div>
                        <div className="flex items-center gap-2">
                          <h4 className="font-medium text-gray-900">
                            {getDisplayName(member)}
                          </h4>
                          {(member.role.toLowerCase() === "admin" || member.role.toLowerCase() === "owner") && (
                            <Crown className="w-4 h-4 text-yellow-500" />
                          )}
                        </div>
                        <p className="text-sm text-gray-500">{member.email}</p>
                        <div className="flex items-center gap-4 mt-1">
                          <Badge className={cn("text-xs", getRoleColor(member.role))}>
                            {member.role}
                          </Badge>
                          <span className="text-xs text-gray-400 flex items-center gap-1">
                            <Calendar className="w-3 h-3" />
                            Joined {formatDate(member.created_at)}
                          </span>
                        </div>
                      </div>
                    </div>
                    {isAdmin() && (
                      <div className="flex items-center gap-2">
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => removeMember(member.id, getDisplayName(member))}
                          className="text-red-500 hover:text-red-700 hover:bg-red-50"
                          disabled={member.id === currentUser?.id} // Prevent self-removal
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    )}
                  </motion.div>
                ))}
              </div>
            </ScrollArea>
          )}
        </CardContent>
      </Card>

      {/* Pending Invites - Admin Only */}
      {isAdmin() && pendingInvites.length > 0 && (
        <Card className="mt-8">
          <CardHeader>
            <CardTitle>Pending Invitations</CardTitle>
            <CardDescription>
              Manage pending team invitations
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {pendingInvites.map((invite, index) => (
                <motion.div
                  key={invite.id}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: index * 0.05 }}
                  className="flex items-center justify-between p-4 border rounded-lg bg-yellow-50 border-yellow-200"
                >
                  <div className="flex items-center gap-4">
                    <div className="w-10 h-10 bg-yellow-100 rounded-full flex items-center justify-center">
                      <Mail className="w-5 h-5 text-yellow-600" />
                    </div>
                    <div>
                      <h4 className="font-medium text-gray-900">{invite.email}</h4>
                      <div className="flex items-center gap-4 mt-1">
                        <Badge className="text-xs bg-yellow-100 text-yellow-800">
                          {invite.role}
                        </Badge>
                        <span className="text-xs text-gray-500 flex items-center gap-1">
                          <Calendar className="w-3 h-3" />
                          Sent {formatDate(invite.created_at)}
                        </span>
                        {new Date(invite.expires_at) < new Date() && (
                          <Badge variant="destructive" className="text-xs">
                            Expired
                          </Badge>
                        )}
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => resendInvite(invite.id, invite.email)}
                      className="text-blue-600 hover:text-blue-700 hover:bg-blue-50"
                      title="Resend invitation"
                    >
                      <Send className="w-4 h-4" />
                    </Button>
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => revokeInvite(invite.id, invite.email)}
                      className="text-red-500 hover:text-red-700 hover:bg-red-50"
                      title="Revoke invitation"
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>
                </motion.div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

================
File: app/(auth)/layout.tsx
================
"use client";

import { Button } from "@/components/ui/button";
import {
  SidebarInset,
  SidebarProvider,
} from "@/components/ui/sidebar";
import { AppSidebar } from "@/components/layout/AppSidebar";
import { DashboardHeader } from "@/components/layout/DashboardHeader";
import { ConnectionsPopover } from "@/components/layout/ConnectionsPopover";
import { ProfilePopover } from "@/components/layout/ProfilePopover";
import { Settings } from "lucide-react";
import Link from "next/link";
import { IntegrationsProvider } from "@/lib/integrations-context";

function AuthenticatedLayoutContent({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <SidebarProvider defaultOpen={false}>
      <div className="h-screen flex w-full">
        <AppSidebar />
        <SidebarInset className="flex-1 flex flex-col relative">
          <DashboardHeader />
          {children}

          {/* Bottom Right Status Menu */}
          <div className="fixed bottom-6 right-6 flex items-center gap-3 z-50">
            {/* Connections Popover */}
            <ConnectionsPopover />

            {/* Profile Popover */}
            <ProfilePopover />

            {/* Settings Button */}
            <Link href="/settings">
              <Button
                variant="ghost"
                size="sm"
                className="w-10 h-10 rounded-full bg-white/80 backdrop-blur-sm border border-gray-200 shadow-lg hover:bg-gray-50"
              >
                <Settings className="w-4 h-4" />
              </Button>
            </Link>
          </div>
        </SidebarInset>
      </div>
    </SidebarProvider>
  );
}

export default function AuthenticatedLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <IntegrationsProvider>
      <AuthenticatedLayoutContent>{children}</AuthenticatedLayoutContent>
    </IntegrationsProvider>
  );
}

================
File: app/api/auth/change-email/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function POST(request: Request) {
  try {
    const body = await request.json();
    
    // Validate required fields
    if (!body.new_email) {
      return NextResponse.json(
        {
          error: "Validation Error",
          message: "New email is required",
        },
        { status: 400 }
      );
    }

    // Basic email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(body.new_email)) {
      return NextResponse.json(
        {
          error: "Validation Error",
          message: "Please provide a valid email address",
        },
        { status: 400 }
      );
    }

    const response = await backendApiRequest("/api/v1/auth/change-email", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ new_email: body.new_email }),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to change email",
          message: data.message || "Unable to change email",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/auth/change-email error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to change email",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/auth/change-password/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function POST(request: Request) {
  try {
    const body = await request.json();
    
    // Validate required fields
    if (!body.current_password || !body.new_password) {
      return NextResponse.json(
        {
          error: "Validation Error",
          message: "Current password and new password are required",
        },
        { status: 400 }
      );
    }

    const response = await backendApiRequest("/api/v1/auth/change-password", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to change password",
          message: data.message || "Unable to change password",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(
      { message: "Password changed successfully" },
      { status: 200 }
    );
  } catch (error: any) {
    console.error("API /api/auth/change-password error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to change password",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/auth/check-domain/route.ts
================
import { NextResponse } from "next/server";
import { z } from "zod";

const checkDomainSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
});

export async function POST(request: Request) {
  try {
    const body = await request.json();
    
    const validationResult = checkDomainSchema.safeParse(body);
    
    if (!validationResult.success) {
      return NextResponse.json(
        {
          error: "Validation failed",
          details: validationResult.error.format(),
        },
        { status: 400 }
      );
    }

    const fastapiBaseUrl = process.env.FASTAPI_BASE_URL;
    if (!fastapiBaseUrl) {
      console.error("FASTAPI_BASE_URL environment variable is not set.");
      return NextResponse.json(
        { error: "Internal server configuration error." },
        { status: 500 }
      );
    }

    const apiUrl = `${fastapiBaseUrl}/api/v1/auth/check-domain`;

    const backendResponse = await fetch(apiUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(validationResult.data),
    });

    const backendData = await backendResponse.json();

    if (!backendResponse.ok) {
      let errorMessage = backendData.detail || backendData.message;
      
      if (backendResponse.status === 429) {
        errorMessage = errorMessage || "Too many requests. Please try again later.";
      }
      
      return NextResponse.json(
        {
          success: false,
          error: backendData.detail || "Failed to check domain",
          message: errorMessage || "Unable to check domain",
          statusCode: backendResponse.status,
        },
        { status: backendResponse.status }
      );
    }

    return NextResponse.json(backendData, { status: 200 });
  } catch (error: any) {
    console.error("API /api/auth/check-domain error:", error);
    
    let errorMessage = "Unable to connect to server";
    if (error.name === "TypeError" && error.message.includes("fetch failed")) {
      errorMessage = "Backend service is unavailable";
    }

    return NextResponse.json(
      {
        success: false,
        error: "Server error",
        message: errorMessage,
      },
      { status: 500 }
    );
  }
}

================
File: app/api/auth/forgot-password/route.ts
================
import { NextResponse } from "next/server";
import { z } from "zod";
import { backendApiRequest } from "@/lib/api-client";

const forgotPasswordSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
});

export async function POST(request: Request) {
  try {
    const body = await request.json();
    
    const validationResult = forgotPasswordSchema.safeParse(body);
    
    if (!validationResult.success) {
      return NextResponse.json(
        {
          error: "Validation failed",
          details: validationResult.error.format(),
        },
        { status: 400 }
      );
    }

    const response = await backendApiRequest("/api/v1/auth/forgot-password", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(validationResult.data),
      skipAuth: true, // This endpoint doesn't require authentication
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to send reset email",
          message: data.message || "Something went wrong",
        },
        { status: response.status }
      );
    }

    return NextResponse.json({
      success: true,
      message: data.message || "Password reset instructions sent",
    }, { status: 200 });
  } catch (error: any) {
    console.error("API /api/auth/forgot-password error:", error);
    
    let errorMessage = "Internal server error";
    if (error.name === "TypeError" && error.message.includes("fetch failed")) {
      errorMessage = "Could not connect to backend service";
    }

    return NextResponse.json(
      {
        error: errorMessage,
        message: error.message || "An unexpected error occurred",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/auth/login/route.ts
================
import { NextResponse } from "next/server";
import { z } from "zod";
import { cookies } from "next/headers";

const loginSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
  password: z.string().min(1, "Password is required"),
  rememberMe: z.boolean().optional(),
});

export async function POST(request: Request) {
  try {
    const body = await request.json();

    const validationResult = loginSchema.safeParse(body);

    if (!validationResult.success) {
      return NextResponse.json(
        {
          success: false,
          error: "Validation failed",
          message: validationResult.error.errors[0]?.message || "Invalid input",
        },
        { status: 400 }
      );
    }

    const fastapiBaseUrl = process.env.FASTAPI_BASE_URL;
    if (!fastapiBaseUrl) {
      return NextResponse.json(
        {
          success: false,
          error: "Configuration error",
          message: "Server is not properly configured"
        },
        { status: 500 }
      );
    }

    const apiUrl = `${fastapiBaseUrl}/api/v1/auth/login`;

    const backendResponse = await fetch(apiUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        email: validationResult.data.email,
        password: validationResult.data.password,
      }),
    });

    const backendData = await backendResponse.json();

    if (!backendResponse.ok) {
      // Extract error details from the backend response
      const errorData = backendData.error || {};
      const errorCode = errorData.code;
      let errorMessage = errorData.message;

      // Enhance error messages based on error code or status
      switch (errorCode) {
        case 'TOO_MANY_REQUESTS':
          errorMessage = `Too many login attempts. The allowed limit is ${errorMessage}s.`;
          break;
        case 'AUTHENTICATION_ERROR':
          errorMessage = errorMessage || "Invalid email or password";
          break;
        case 'ACCOUNT_DISABLED':
          errorMessage = errorMessage || "Your account has been disabled";
          break;
        default:
          // Fallback to status code based messages if no error code
          switch (backendResponse.status) {
            case 401:
              errorMessage = errorMessage || "Invalid credentials";
              break;
            case 403:
              errorMessage = errorMessage || "Access forbidden";
              break;
            case 429:
              errorMessage = errorMessage || "Too many requests. Please try again later.";
              break;
            case 500:
              errorMessage = "Server error. Please try again later.";
              break;
          }
      }

      return NextResponse.json(
        {
          success: false,
          error: errorCode || "AUTHENTICATION_ERROR",
          message: errorMessage || "Authentication failed",
          statusCode: backendResponse.status,
        },
        { status: backendResponse.status }
      );
    }

    // Extract both tokens from backend response
    const { access_token, refresh_token } = backendData;

    if (access_token && refresh_token) {
      const cookieStore = await cookies();

      // Store access token
      cookieStore.set("auth_token", access_token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "lax",
        path: "/",
        maxAge: 60 * 60, // 1 hour for access token
      });

      // Store refresh token
      cookieStore.set("refresh_token", refresh_token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "lax",
        path: "/",
        maxAge: 30 * 24 * 60 * 60, // 30 days for refresh token
      });
    } else if (backendData.token) {
      // Fallback for old backend format
      const cookieStore = await cookies();
      cookieStore.set("auth_token", backendData.token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "lax",
        path: "/",
        maxAge: validationResult.data.rememberMe ? 30 * 24 * 60 * 60 : 24 * 60 * 60,
      });
    }

    // Return success response (tokens are already set in cookies)
    return NextResponse.json({
      success: true,
      user: backendData.user,
      expires_at: backendData.expires_at,
      is_new_company: backendData.is_new_company
    }, { status: 200 });
  } catch (error: any) {
    console.error("API /api/auth/login error:", error);

    let errorMessage = "Unable to connect to server";
    if (error.name === "TypeError" && error.message.includes("fetch failed")) {
      errorMessage = "Backend service is unavailable";
    }

    return NextResponse.json(
      {
        success: false,
        error: "Server error",
        message: errorMessage,
      },
      { status: 500 }
    );
  }
}

================
File: app/api/auth/logout/route.ts
================
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST() {
  try {
    const cookieStore = await cookies();
    
    // Clear both auth token and refresh token cookies
    cookieStore.delete("auth_token");
    cookieStore.delete("refresh_token");
    
    return NextResponse.json({
      success: true,
      message: "Logged out successfully",
    }, { status: 200 });
  } catch (error: any) {
    console.error("API /api/auth/logout error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: error.message || "An unexpected error occurred",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/auth/me/route.ts
================
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function GET() {
  try {
    const cookieStore = await cookies();
    const accessToken = cookieStore.get("auth_token");
    const refreshToken = cookieStore.get("refresh_token");

    if (!accessToken?.value) {
      return NextResponse.json(
        {
          success: false,
          error: "NO_AUTH_TOKEN",
          message: "Not authenticated",
        },
        { status: 401 }
      );
    }

    const fastapiBaseUrl = process.env.FASTAPI_BASE_URL;
    if (!fastapiBaseUrl) {
      return NextResponse.json(
        {
          success: false,
          error: "Configuration error",
          message: "Server is not properly configured",
        },
        { status: 500 }
      );
    }

    const apiUrl = `${fastapiBaseUrl}/api/v1/auth/me`;

    // Call backend /me endpoint
    const backendResponse = await fetch(apiUrl, {
      method: "GET",
      headers: {
        "Authorization": `Bearer ${accessToken.value}`,
      },
    });

    if (!backendResponse.ok) {
      // If 401, don't immediately clear tokens - let the client handle refresh
      if (backendResponse.status === 401) {
        return NextResponse.json(
          {
            success: false,
            error: "TOKEN_EXPIRED",
            message: "Token expired",
          },
          { status: 401 }
        );
      }

      return NextResponse.json(
        {
          success: false,
          error: "Failed to get user info",
          message: "Unable to retrieve user information",
        },
        { status: backendResponse.status }
      );
    }

    const userData = await backendResponse.json();

    // Calculate token expiration (1 hour from now if not provided)
    const expiresAt = new Date();
    expiresAt.setHours(expiresAt.getHours() + 1);

    // Return user data with tokens
    return NextResponse.json({
      success: true,
      user: userData,
      access_token: accessToken.value,
      has_refresh_token: !!refreshToken?.value,
      expires_at: expiresAt.toISOString(),
    });
  } catch (error: any) {
    console.error("API /api/auth/me error:", error);

    let errorMessage = "Unable to retrieve user information";
    if (error.name === "TypeError" && error.message.includes("fetch failed")) {
      errorMessage = "Backend service is unavailable";
    }

    return NextResponse.json(
      {
        success: false,
        error: "Server error",
        message: errorMessage,
      },
      { status: 500 }
    );
  }
}

================
File: app/api/auth/refresh/route.ts
================
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function POST(request: Request) {
  try {
    const cookieStore = await cookies();
    const refreshToken = cookieStore.get("refresh_token");

    if (!refreshToken?.value) {
      return NextResponse.json(
        {
          success: false,
          error: "NO_REFRESH_TOKEN",
          message: "No refresh token provided",
        },
        { status: 401 }
      );
    }

    const fastapiBaseUrl = process.env.FASTAPI_BASE_URL;
    if (!fastapiBaseUrl) {
      return NextResponse.json(
        {
          success: false,
          error: "Configuration error",
          message: "Server is not properly configured",
        },
        { status: 500 }
      );
    }

    const apiUrl = `${fastapiBaseUrl}/api/v1/auth/refresh`;

    // Call backend refresh endpoint
    const backendResponse = await fetch(apiUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ refresh_token: refreshToken.value }),
    });

    const backendData = await backendResponse.json();

    if (!backendResponse.ok) {
      // Clear invalid tokens
      cookieStore.delete("auth_token");
      cookieStore.delete("refresh_token");

      const errorData = backendData.error || {};
      const errorMessage = errorData.message || "Token refresh failed";

      return NextResponse.json(
        {
          success: false,
          error: errorData.code || "REFRESH_FAILED",
          message: errorMessage,
          statusCode: backendResponse.status,
        },
        { status: backendResponse.status }
      );
    }

    // Extract new tokens from backend response
    const { access_token, refresh_token: new_refresh_token } = backendData;

    if (!access_token || !new_refresh_token) {
      return NextResponse.json(
        {
          success: false,
          error: "INVALID_RESPONSE",
          message: "Invalid token response from server",
        },
        { status: 500 }
      );
    }

    // Update tokens in cookies
    cookieStore.set("auth_token", access_token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "lax",
      path: "/",
      maxAge: 60 * 60, // 1 hour for access token
    });

    cookieStore.set("refresh_token", new_refresh_token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "lax",
      path: "/",
      maxAge: 30 * 24 * 60 * 60, // 30 days for refresh token
    });

    // Return success with new tokens
    return NextResponse.json({
      success: true,
      access_token,
      refresh_token: new_refresh_token,
      expires_at: backendData.expires_at,
    });
  } catch (error: any) {
    console.error("API /api/auth/refresh error:", error);

    // Clear tokens on error
    const cookieStore = await cookies();
    cookieStore.delete("auth_token");
    cookieStore.delete("refresh_token");

    let errorMessage = "Unable to refresh authentication";
    if (error.name === "TypeError" && error.message.includes("fetch failed")) {
      errorMessage = "Backend service is unavailable";
    }

    return NextResponse.json(
      {
        success: false,
        error: "Server error",
        message: errorMessage,
      },
      { status: 500 }
    );
  }
}

================
File: app/api/auth/reset-password/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function POST(request: Request) {
  try {
    const body = await request.json();
    
    // Validate required fields
    if (!body.token || !body.new_password) {
      return NextResponse.json(
        {
          error: "Validation Error",
          message: "Reset token and new password are required",
        },
        { status: 400 }
      );
    }

    // Password strength validation
    if (body.new_password.length < 8) {
      return NextResponse.json(
        {
          error: "Validation Error",
          message: "Password must be at least 8 characters long",
        },
        { status: 400 }
      );
    }

    const response = await backendApiRequest("/api/v1/auth/reset-password", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to reset password",
          message: data.message || "Unable to reset password",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(
      { message: "Password reset successfully" },
      { status: 200 }
    );
  } catch (error: any) {
    console.error("API /api/auth/reset-password error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to reset password",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/auth/signup/route.ts
================
import { NextResponse } from "next/server";
import { z } from "zod";
import { cookies } from "next/headers";

const signupSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
  password: z.string().min(8, "Password must be at least 8 characters"),
  first_name: z.string().min(2, "First name must be at least 2 characters"),
  last_name: z.string().min(2, "Last name must be at least 2 characters"),
  company_name: z.string().optional(),
  company_size: z.string().optional(),
  industry: z.string().optional(),
  invite_token: z.string().optional(),
});

export async function POST(request: Request) {
  try {
    const body = await request.json();
    
    const validationResult = signupSchema.safeParse(body);
    
    if (!validationResult.success) {
      return NextResponse.json(
        {
          success: false,
          error: "Validation failed",
          message: validationResult.error.errors[0]?.message || "Invalid input",
        },
        { status: 400 }
      );
    }

    const fastapiBaseUrl = process.env.FASTAPI_BASE_URL;
    if (!fastapiBaseUrl) {
      return NextResponse.json(
        { 
          success: false,
          error: "Configuration error",
          message: "Server is not properly configured" 
        },
        { status: 500 }
      );
    }

    const apiUrl = `${fastapiBaseUrl}/api/v1/auth/signup`;

    // Data is already in snake_case format matching OpenAPI spec
    const backendPayload = {
      email: validationResult.data.email,
      password: validationResult.data.password,
      first_name: validationResult.data.first_name,
      last_name: validationResult.data.last_name,
      company_name: validationResult.data.company_name,
      company_size: validationResult.data.company_size,
      industry: validationResult.data.industry,
      invite_token: validationResult.data.invite_token,
    };

    const backendResponse = await fetch(apiUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(backendPayload),
    });

    const backendData = await backendResponse.json();

    if (!backendResponse.ok) {
      // Extract error details from the backend response
      const errorData = backendData.error || {};
      const errorCode = errorData.code;
      let errorMessage = errorData.message;
      
      // Enhance error messages based on error code or status
      switch (errorCode) {
        case 'EMAIL_ALREADY_EXISTS':
          errorMessage = errorMessage || "An account with this email already exists";
          break;
        case 'DOMAIN_NOT_ALLOWED':
          errorMessage = errorMessage || "This email domain requires an invitation to join";
          break;
        case 'INVALID_INVITE_TOKEN':
          errorMessage = errorMessage || "Invalid or expired invitation";
          break;
        case 'TOO_MANY_REQUESTS':
          errorMessage = `Too many signup attempts. Please wait ${errorMessage}s before trying again.`;
          break;
        case 'VALIDATION_ERROR':
          errorMessage = errorMessage || "Please check your input and try again";
          break;
        default:
          // Fallback to status code based messages if no error code
          switch (backendResponse.status) {
            case 400:
              errorMessage = errorMessage || "Invalid signup data";
              break;
            case 409:
              errorMessage = errorMessage || "Email already registered";
              break;
            case 422:
              errorMessage = errorMessage || "Invalid input data";
              break;
            case 429:
              errorMessage = errorMessage || "Too many requests. Please try again later.";
              break;
            case 500:
              errorMessage = "Server error. Please try again later.";
              break;
          }
      }
      
      return NextResponse.json(
        {
          success: false,
          error: errorCode || "SIGNUP_ERROR",
          message: errorMessage || "Failed to create account",
          statusCode: backendResponse.status,
        },
        { status: backendResponse.status }
      );
    }

    // Extract both tokens from backend response
    const { access_token, refresh_token } = backendData;
    
    if (access_token && refresh_token) {
      const cookieStore = await cookies();
      
      // Store access token
      cookieStore.set("auth_token", access_token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "lax",
        path: "/",
        maxAge: 60 * 60, // 1 hour for access token
      });

      // Store refresh token
      cookieStore.set("refresh_token", refresh_token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "lax",
        path: "/",
        maxAge: 30 * 24 * 60 * 60, // 30 days for refresh token
      });
    }

    return NextResponse.json({
      success: true,
      user: backendData.user,
      expires_at: backendData.expires_at,
      is_new_company: backendData.is_new_company,
      message: "Account created successfully",
    }, { status: 200 });
  } catch (error: any) {
    console.error("API /api/auth/signup error:", error);
    
    let errorMessage = "Unable to connect to server";
    if (error.name === "TypeError" && error.message.includes("fetch failed")) {
      errorMessage = "Backend service is unavailable";
    }

    return NextResponse.json(
      {
        success: false,
        error: "Server error",
        message: errorMessage,
      },
      { status: 500 }
    );
  }
}

================
File: app/api/chat/stream/route.ts
================
import { NextRequest } from "next/server";
import { cookies } from "next/headers";

const fastapiBaseUrl = process.env.FASTAPI_BASE_URL || "http://localhost:8000";

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Get auth token from cookies
    const cookieStore = await cookies();
    const authToken = cookieStore.get("auth_token");
    
    if (!authToken) {
      return new Response(
        JSON.stringify({ error: "Unauthorized", message: "Authentication required" }),
        { status: 401, headers: { "Content-Type": "application/json" } }
      );
    }

    // Ensure conversation_id is properly passed to backend
    const chatPayload = {
      query: body.query,
      conversation_id: body.conversation_id || null,
      conversation_history: body.conversation_history || null,
      limit: body.limit || 10,
      filters: body.filters || null,
    };

    // Create the streaming request to backend
    const response = await fetch(`${fastapiBaseUrl}/api/v1/chat/stream`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${authToken.value}`,
        "Accept": "text/event-stream",
      },
      body: JSON.stringify(chatPayload),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({
        error: "Stream request failed",
        message: response.statusText,
      }));
      
      return new Response(
        JSON.stringify(errorData),
        { status: response.status, headers: { "Content-Type": "application/json" } }
      );
    }

    // Create a TransformStream to handle the SSE format
    const encoder = new TextEncoder();
    const decoder = new TextDecoder();

    const stream = new ReadableStream({
      async start(controller) {
        const reader = response.body?.getReader();
        if (!reader) {
          controller.close();
          return;
        }

        try {
          while (true) {
            const { done, value } = await reader.read();
            if (done) {
              controller.close();
              break;
            }

            // Forward the SSE data as-is
            controller.enqueue(value);
          }
        } catch (error) {
          console.error("Stream reading error:", error);
          
          // Send error event
          const errorEvent = `data: ${JSON.stringify({
            type: "error",
            error: "Stream interrupted",
            done: true,
          })}\n\n`;
          
          controller.enqueue(encoder.encode(errorEvent));
          controller.close();
        } finally {
          reader.releaseLock();
        }
      },
    });

    // Return the stream with appropriate headers
    return new Response(stream, {
      headers: {
        "Content-Type": "text/event-stream",
        "Cache-Control": "no-cache",
        "Connection": "keep-alive",
        "X-Accel-Buffering": "no", // Disable Nginx buffering
      },
    });
  } catch (error: any) {
    console.error("API /api/chat/stream error:", error);
    
    return new Response(
      JSON.stringify({
        error: "Internal server error",
        message: "Unable to process streaming chat request",
      }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}

================
File: app/api/chat/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function POST(request: Request) {
  try {
    const body = await request.json();
    
    // Ensure conversation_id is properly passed to backend
    const chatPayload = {
      query: body.query,
      conversation_id: body.conversation_id || null,
      conversation_history: body.conversation_history || null,
      limit: body.limit || 10,
      filters: body.filters || null,
    };
    
    const response = await backendApiRequest("/api/v1/chat", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(chatPayload),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Chat request failed",
          message: data.message || "Unable to process chat request",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/chat error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to process chat request",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/conversations/[id]/messages/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const { searchParams } = new URL(request.url);
    const limit = searchParams.get("limit") || "50";
    const offset = searchParams.get("offset") || "0";

    const response = await backendApiRequest(
      `/api/v1/conversations/${params.id}/messages?limit=${limit}&offset=${offset}`,
      {
        method: "GET",
      }
    );

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to fetch messages",
          message: data.message || "Unable to fetch conversation messages",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/conversations/[id]/messages GET error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to fetch conversation messages",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/conversations/[id]/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const { searchParams } = new URL(request.url);
    const includeMessages = searchParams.get("include_messages") === "true";
    const includeFocusModes = searchParams.get("include_focus_modes") === "true";

    const queryParams = new URLSearchParams();
    if (includeMessages) {
      queryParams.append("include_messages", "true");
    }
    if (includeFocusModes) {
      queryParams.append("include_focus_modes", "true");
    }

    const response = await backendApiRequest(
      `/api/v1/conversations/${params.id}?${queryParams.toString()}`,
      {
        method: "GET",
      }
    );

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to fetch conversation",
          message: data.message || "Unable to fetch conversation",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/conversations/[id] GET error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to fetch conversation",
      },
      { status: 500 }
    );
  }
}

export async function PATCH(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const body = await request.json();
    
    const response = await backendApiRequest(`/api/v1/conversations/${params.id}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to update conversation",
          message: data.message || "Unable to update conversation",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/conversations/[id] PATCH error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to update conversation",
      },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const response = await backendApiRequest(`/api/v1/conversations/${params.id}`, {
      method: "DELETE",
    });

    if (!response.ok) {
      const data = await response.json();
      return NextResponse.json(
        {
          error: data.detail || "Failed to delete conversation",
          message: data.message || "Unable to delete conversation",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(
      { message: "Conversation deleted successfully" },
      { status: 200 }
    );
  } catch (error: any) {
    console.error("API /api/conversations/[id] DELETE error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to delete conversation",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/conversations/batch/archive/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { conversation_ids, is_archived } = body;

    if (!conversation_ids || !Array.isArray(conversation_ids)) {
      return NextResponse.json(
        { error: "conversation_ids array is required" },
        { status: 400 }
      );
    }

    if (typeof is_archived !== "boolean") {
      return NextResponse.json(
        { error: "is_archived boolean is required" },
        { status: 400 }
      );
    }

    const response = await backendApiRequest('/api/v1/conversations/batch/archive', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        conversation_ids,
        is_archived
      })
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({ message: "Archive operation failed" }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error("Batch archive error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: app/api/conversations/batch/delete/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { conversation_ids } = body;

    if (!conversation_ids || !Array.isArray(conversation_ids)) {
      return NextResponse.json(
        { error: "conversation_ids array is required" },
        { status: 400 }
      );
    }

    console.log('Sending batch delete request with:', { conversation_ids });
    
    const response = await backendApiRequest('/api/v1/conversations/batch/delete', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        conversation_ids
      })
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({ message: "Delete operation failed" }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error("Batch delete error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: app/api/conversations/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const page = searchParams.get("page") || "1";
    const pageSize = searchParams.get("page_size") || "20";
    const includeArchived = searchParams.get("include_archived") === "true";
    const focusModeId = searchParams.get("focus_mode_id");

    let queryParams = `page=${page}&page_size=${pageSize}&include_archived=${includeArchived}`;
    if (focusModeId) {
      queryParams += `&focus_mode_id=${focusModeId}`;
    }

    const response = await backendApiRequest(`/api/v1/conversations/?${queryParams}`, {
      method: "GET",
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to fetch conversations",
          message: data.message || "Unable to fetch conversations",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/conversations GET error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to fetch conversations",
      },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json();
    
    const response = await backendApiRequest("/api/v1/conversations/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to create conversation",
          message: data.message || "Unable to create conversation",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 201 });
  } catch (error: any) {
    console.error("API /api/conversations POST error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to create conversation",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/documents/[id]/download/route.ts
================
import { NextResponse } from "next/server";
import { cookies } from "next/headers";

export async function GET(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const cookieStore = await cookies();
    const authToken = cookieStore.get("auth_token");

    if (!authToken?.value) {
      return NextResponse.json(
        {
          success: false,
          error: "NO_AUTH_TOKEN",
          message: "Not authenticated",
        },
        { status: 401 }
      );
    }

    const fastapiBaseUrl = process.env.FASTAPI_BASE_URL;
    if (!fastapiBaseUrl) {
      return NextResponse.json(
        {
          success: false,
          error: "Configuration error",
          message: "Server is not properly configured",
        },
        { status: 500 }
      );
    }

    // Get the view parameter from the URL
    const { searchParams } = new URL(request.url);
    const view = searchParams.get("view") === "true";

    const { id } = await params;
    const apiUrl = `${fastapiBaseUrl}/api/v1/documents/${id}/download${view ? '?view=true' : ''}`;

    // Stream the file from backend
    const backendResponse = await fetch(apiUrl, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${authToken.value}`,
      },
    });

    if (!backendResponse.ok) {
      const backendData = await backendResponse.json().catch(() => ({}));
      const errorData = backendData.error || {};

      return NextResponse.json(
        {
          success: false,
          error: errorData.code || "DOWNLOAD_ERROR",
          message: errorData.message || "Failed to download document",
          statusCode: backendResponse.status,
        },
        { status: backendResponse.status }
      );
    }

    // Get headers from backend response
    const contentType = backendResponse.headers.get("content-type") || "application/octet-stream";
    const contentDisposition = backendResponse.headers.get("content-disposition");
    const contentLength = backendResponse.headers.get("content-length");

    // Create response headers
    const headers = new Headers();
    headers.set("Content-Type", contentType);
    
    if (contentDisposition) {
      headers.set("Content-Disposition", contentDisposition);
    }
    
    // If viewing and it's a PDF, ensure correct content type
    if (view && contentType.includes("pdf")) {
      headers.set("Content-Type", "application/pdf");
    }
    
    if (contentLength) {
      headers.set("Content-Length", contentLength);
    }

    // Stream the response body
    const body = backendResponse.body;
    if (!body) {
      return NextResponse.json(
        {
          success: false,
          error: "EMPTY_RESPONSE",
          message: "No content received from server",
        },
        { status: 500 }
      );
    }

    return new Response(body, {
      status: 200,
      headers,
    });
  } catch (error: any) {
    const { id } = await params;
    console.error(`API /api/documents/${id}/download error:`, error);

    let errorMessage = "Unable to download document";
    if (error.name === "TypeError" && error.message.includes("fetch failed")) {
      errorMessage = "Backend service is unavailable";
    }

    return NextResponse.json(
      {
        success: false,
        error: "Server error",
        message: errorMessage,
      },
      { status: 500 }
    );
  }
}

================
File: app/api/documents/[id]/thumbnail/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { authApiRequest } from "@/lib/auth-api-client";

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    
    const response = await authApiRequest(
      `${process.env.FASTAPI_BASE_URL}/api/v1/documents/${id}/thumbnail`,
      {
        headers: {
          'Accept': 'image/jpeg, image/png, image/*',
        },
      }
    );
    
    if (!response.ok) {
      console.error(`Thumbnail request failed with status: ${response.status}`);
      return NextResponse.json(
        { error: "Thumbnail not found" },
        { status: response.status }
      );
    }
    
    // Get the image as array buffer
    const imageBuffer = await response.arrayBuffer();
    
    // Return the image with proper headers
    return new NextResponse(imageBuffer, {
      status: 200,
      headers: {
        'Content-Type': response.headers.get('Content-Type') || 'image/jpeg',
        'Cache-Control': 'public, max-age=86400', // Match backend cache control
        'Content-Disposition': response.headers.get('Content-Disposition') || 'inline',
      },
    });
  } catch (error: any) {
    console.error("Error fetching thumbnail:", error);
    
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: app/api/documents/[id]/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

interface RouteParams {
  params: Promise<{
    id: string;
  }>;
}

export async function GET(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    const { id } = await params;

    if (!id) {
      return NextResponse.json(
        {
          error: "Invalid document ID",
          message: "Document ID is required",
        },
        { status: 400 }
      );
    }

    const response = await backendApiRequest(`/api/v1/documents/${id}`, {
      method: "GET",
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        error: "Failed to fetch document",
        message: "Unable to retrieve document",
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/documents/[id] GET error:", error);

    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to retrieve document",
      },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    const { id } = await params;

    if (!id) {
      return NextResponse.json(
        {
          error: "Invalid document ID",
          message: "Document ID is required",
        },
        { status: 400 }
      );
    }

    const response = await backendApiRequest(`/api/v1/documents/${id}`, {
      method: "DELETE",
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        error: "Failed to delete document",
        message: "Unable to delete document",
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/documents/[id] DELETE error:", error);

    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to delete document",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/documents/bulk/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function POST(request: Request) {
  try {
    const body = await request.json();
    
    // Validate required fields
    if (!body.action || !body.document_ids || !Array.isArray(body.document_ids)) {
      return NextResponse.json(
        {
          error: "Validation Error",
          message: "Action and document_ids array are required",
        },
        { status: 400 }
      );
    }

    // Validate action type
    const validActions = ['delete', 'archive', 'unarchive', 'reprocess', 'move_to_category'];
    if (!validActions.includes(body.action)) {
      return NextResponse.json(
        {
          error: "Validation Error",
          message: `Invalid action. Must be one of: ${validActions.join(', ')}`,
        },
        { status: 400 }
      );
    }

    // Validate document IDs
    if (body.document_ids.length === 0) {
      return NextResponse.json(
        {
          error: "Validation Error",
          message: "At least one document ID is required",
        },
        { status: 400 }
      );
    }

    const response = await backendApiRequest("/api/v1/documents/bulk", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Bulk operation failed",
          message: data.message || "Unable to perform bulk operation on documents",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/documents/bulk error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to perform bulk operation",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/documents/filter-options/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(request: Request) {
  try {
    const response = await backendApiRequest("/api/v1/documents/filter-options", {
      method: "GET",
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to fetch filter options",
          message: data.message || "Unable to fetch document filter options",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/documents/filter-options error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to fetch filter options",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/documents/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";
import { z } from "zod";

// Validation schema for query parameters
const documentsQuerySchema = z.object({
  page: z.coerce.number().int().min(1).default(1),
  size: z.coerce.number().int().min(1).max(100).default(20),
  source_types: z.array(z.string()).optional(),
  processing_statuses: z.array(z.string()).optional(),
  search: z.string().optional(),
  exclude_failed: z.boolean().default(true),
  created_after: z.string().datetime().optional(),
  created_before: z.string().datetime().optional(),
  extensions: z.array(z.string()).optional(),
  mime_types: z.array(z.string()).optional(),
  author: z.string().optional(),
  keywords: z.array(z.string()).optional(),
  category_ids: z.array(z.string()).optional(),
  topic_ids: z.array(z.string()).optional(),
  has_chunks: z.boolean().optional(),
  has_errors: z.boolean().optional(),
  sort_by: z.enum(["created_at", "updated_at", "name", "file_size_bytes", "file_created_at", "file_modified_at"]).default("created_at"),
  sort_order: z.enum(["asc", "desc"]).default("desc"),
});

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    
    // Parse query parameters
    const queryObject: any = {
      page: searchParams.get("page"),
      size: searchParams.get("size"),
      search: searchParams.get("search"),
      exclude_failed: searchParams.get("exclude_failed"),
      created_after: searchParams.get("created_after"),
      created_before: searchParams.get("created_before"),
      author: searchParams.get("author"),
      sort_by: searchParams.get("sort_by"),
      sort_order: searchParams.get("sort_order"),
    };

    // Handle array parameters
    const arrayParams = [
      "source_types",
      "processing_statuses",
      "extensions",
      "mime_types",
      "keywords",
      "category_ids",
      "topic_ids",
    ];

    arrayParams.forEach((param) => {
      const values = searchParams.getAll(param);
      if (values.length > 0) {
        queryObject[param] = values;
      }
    });

    // Handle boolean parameters
    const booleanParams = ["has_chunks", "has_errors"];
    booleanParams.forEach((param) => {
      const value = searchParams.get(param);
      if (value !== null) {
        queryObject[param] = value === "true";
      }
    });

    // Remove null values
    Object.keys(queryObject).forEach((key) => {
      if (queryObject[key] === null || queryObject[key] === undefined) {
        delete queryObject[key];
      }
    });

    // Validate query parameters
    const validationResult = documentsQuerySchema.safeParse(queryObject);
    
    if (!validationResult.success) {
      return NextResponse.json(
        {
          error: "Invalid query parameters",
          details: validationResult.error.flatten(),
        },
        { status: 400 }
      );
    }

    // Build query string for backend request
    const backendParams = new URLSearchParams();
    Object.entries(validationResult.data).forEach(([key, value]) => {
      if (Array.isArray(value)) {
        value.forEach((v) => backendParams.append(key, String(v)));
      } else if (value !== undefined) {
        backendParams.append(key, String(value));
      }
    });

    // Make request to backend
    const response = await backendApiRequest(
      `/api/v1/documents?${backendParams.toString()}`,
      {
        method: "GET",
      }
    );

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        error: "Failed to fetch documents",
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error("Error fetching documents:", error);
    return NextResponse.json(
      {
        error: "Internal server error",
        message: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/focus-modes/[id]/documents/[documentId]/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function DELETE(
  request: Request,
  { params }: { params: { id: string; documentId: string } }
) {
  try {
    const response = await backendApiRequest(
      `/api/v1/focus-modes/${params.id}/documents/${params.documentId}`,
      {
        method: "DELETE",
      }
    );

    if (!response.ok) {
      const data = await response.json();
      return NextResponse.json(
        {
          error: data.detail || "Failed to remove document from focus mode",
          message: data.message || "Unable to remove document from focus mode",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(null, { status: 204 });
  } catch (error: any) {
    console.error(
      `API /api/focus-modes/${params.id}/documents/${params.documentId} DELETE error:`,
      error
    );
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to remove document from focus mode",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/focus-modes/[id]/documents/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const { searchParams } = new URL(request.url);
    const page = searchParams.get("page") || "1";
    const pageSize = searchParams.get("page_size") || "20";

    const response = await backendApiRequest(
      `/api/v1/focus-modes/${params.id}/documents?page=${page}&page_size=${pageSize}`,
      {
        method: "GET",
      }
    );

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to fetch focus mode documents",
          message: data.message || "Unable to fetch focus mode documents",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error(`API /api/focus-modes/${params.id}/documents GET error:`, error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to fetch focus mode documents",
      },
      { status: 500 }
    );
  }
}

export async function POST(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const body = await request.json();
    
    const response = await backendApiRequest(
      `/api/v1/focus-modes/${params.id}/documents`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
      }
    );

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to add documents to focus mode",
          message: data.message || "Unable to add documents to focus mode",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 201 });
  } catch (error: any) {
    console.error(`API /api/focus-modes/${params.id}/documents POST error:`, error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to add documents to focus mode",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/focus-modes/[id]/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const { searchParams } = new URL(request.url);
    const includeDocuments = searchParams.get("include_documents") === "true";

    const response = await backendApiRequest(
      `/api/v1/focus-modes/${params.id}?include_documents=${includeDocuments}`,
      {
        method: "GET",
      }
    );

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to fetch focus mode",
          message: data.message || "Unable to fetch focus mode",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error(`API /api/focus-modes/${params.id} GET error:`, error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to fetch focus mode",
      },
      { status: 500 }
    );
  }
}

export async function PUT(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const body = await request.json();
    
    const response = await backendApiRequest(`/api/v1/focus-modes/${params.id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to update focus mode",
          message: data.message || "Unable to update focus mode",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error(`API /api/focus-modes/${params.id} PUT error:`, error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to update focus mode",
      },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const response = await backendApiRequest(`/api/v1/focus-modes/${params.id}`, {
      method: "DELETE",
    });

    if (!response.ok) {
      const data = await response.json();
      return NextResponse.json(
        {
          error: data.detail || "Failed to delete focus mode",
          message: data.message || "Unable to delete focus mode",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(null, { status: 204 });
  } catch (error: any) {
    console.error(`API /api/focus-modes/${params.id} DELETE error:`, error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to delete focus mode",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/focus-modes/documents/available/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    
    // Build query parameters for backend request
    const backendParams = new URLSearchParams();
    
    // Copy search parameters
    ["page", "page_size", "search", "exclude_focus_mode_id"].forEach((param) => {
      const value = searchParams.get(param);
      if (value !== null) {
        backendParams.append(param, value);
      }
    });

    // Handle array parameters for mime types
    const mimeTypes = searchParams.getAll("mime_type");
    mimeTypes.forEach((type) => {
      backendParams.append("mime_type", type);
    });

    const response = await backendApiRequest(
      `/api/v1/focus-modes/documents/available?${backendParams.toString()}`,
      {
        method: "GET",
      }
    );

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to fetch available documents",
          message: data.message || "Unable to fetch available documents",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/focus-modes/documents/available GET error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to fetch available documents",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/focus-modes/icons/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(request: Request) {
  try {
    const response = await backendApiRequest("/api/v1/focus-modes/icons", {
      method: "GET",
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to fetch focus mode icons",
          message: data.message || "Unable to fetch focus mode icons",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/focus-modes/icons GET error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to fetch focus mode icons",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/focus-modes/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(request: Request) {
  try {
    const response = await backendApiRequest("/api/v1/focus-modes/", {
      method: "GET",
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to fetch focus modes",
          message: data.message || "Unable to fetch focus modes",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/focus-modes GET error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to fetch focus modes",
      },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json();
    
    const response = await backendApiRequest("/api/v1/focus-modes/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to create focus mode",
          message: data.message || "Unable to create focus mode",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 201 });
  } catch (error: any) {
    console.error("API /api/focus-modes POST error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to create focus mode",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/folders/[folderId]/documents/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { authApiRequest } from "@/lib/auth-api-client";

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ folderId: string }> }
) {
  try {
    const { folderId } = await params;
    const { searchParams } = new URL(request.url);
    
    // Forward all query parameters
    const queryString = searchParams.toString();
    const url = queryString 
      ? `${process.env.FASTAPI_BASE_URL}/api/v1/folders/${folderId}/documents?${queryString}`
      : `${process.env.FASTAPI_BASE_URL}/api/v1/folders/${folderId}/documents`;
    
    const response = await authApiRequest(url);
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: "Unknown error" }));
      return NextResponse.json(errorData, { status: response.status });
    }
    
    const data = await response.json();
    return NextResponse.json(data, { status: response.status });
  } catch (error: any) {
    console.error("Error fetching folder documents:", error);
    
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ folderId: string }> }
) {
  try {
    const { folderId } = await params;
    const body = await request.json();
    
    const response = await authApiRequest(
      `${process.env.FASTAPI_BASE_URL}/api/v1/folders/${folderId}/documents`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
      }
    );
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: "Unknown error" }));
      return NextResponse.json(errorData, { status: response.status });
    }
    
    const data = await response.json();
    return NextResponse.json(data, { status: response.status });
  } catch (error: any) {
    console.error("Error moving documents to folder:", error);
    
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: app/api/folders/[folderId]/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { authApiRequest } from "@/lib/auth-api-client";

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ folderId: string }> }
) {
  try {
    const { folderId } = await params;
    const response = await authApiRequest(
      `${process.env.FASTAPI_BASE_URL}/api/v1/folders/${folderId}`
    );
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: "Unknown error" }));
      return NextResponse.json(errorData, { status: response.status });
    }
    
    const data = await response.json();
    return NextResponse.json(data, { status: response.status });
  } catch (error: any) {
    console.error("Error fetching folder:", error);
    
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ folderId: string }> }
) {
  try {
    const { folderId } = await params;
    const body = await request.json();
    
    const response = await authApiRequest(
      `${process.env.FASTAPI_BASE_URL}/api/v1/folders/${folderId}`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
      }
    );
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: "Unknown error" }));
      return NextResponse.json(errorData, { status: response.status });
    }
    
    const data = await response.json();
    return NextResponse.json(data, { status: response.status });
  } catch (error: any) {
    console.error("Error updating folder:", error);
    
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ folderId: string }> }
) {
  try {
    const { folderId } = await params;
    const { searchParams } = new URL(request.url);
    const force = searchParams.get("force");
    
    const url = force 
      ? `${process.env.FASTAPI_BASE_URL}/api/v1/folders/${folderId}?force=${force}`
      : `${process.env.FASTAPI_BASE_URL}/api/v1/folders/${folderId}`;
    
    const response = await authApiRequest(url, { method: "DELETE" });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: "Unknown error" }));
      return NextResponse.json(errorData, { status: response.status });
    }
    
    // DELETE might return empty response
    const data = await response.text();
    try {
      const jsonData = data ? JSON.parse(data) : {};
      return NextResponse.json(jsonData, { status: response.status });
    } catch {
      return NextResponse.json({}, { status: response.status });
    }
  } catch (error: any) {
    console.error("Error deleting folder:", error);
    
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: app/api/folders/bulk/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { authApiRequest } from "@/lib/auth-api-client";

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    const response = await authApiRequest(
      `${process.env.FASTAPI_BASE_URL}/api/v1/folders/bulk`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
      }
    );
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: "Unknown error" }));
      return NextResponse.json(errorData, { status: response.status });
    }
    
    const data = await response.json();
    return NextResponse.json(data, { status: response.status });
  } catch (error: any) {
    console.error("Error creating folders in bulk:", error);
    
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: app/api/folders/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { authApiRequest } from "@/lib/auth-api-client";

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    
    // Forward all query parameters
    const queryString = searchParams.toString();
    const url = queryString 
      ? `${process.env.FASTAPI_BASE_URL}/api/v1/folders?${queryString}` 
      : `${process.env.FASTAPI_BASE_URL}/api/v1/folders`;
    
    const response = await authApiRequest(url);
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: "Unknown error" }));
      return NextResponse.json(errorData, { status: response.status });
    }
    
    const data = await response.json();
    return NextResponse.json(data, { status: response.status });
  } catch (error: any) {
    console.error("Error fetching folders:", error);
    
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    const response = await authApiRequest(
      `${process.env.FASTAPI_BASE_URL}/api/v1/folders`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
      }
    );
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: "Unknown error" }));
      return NextResponse.json(errorData, { status: response.status });
    }
    
    const data = await response.json();
    return NextResponse.json(data, { status: response.status });
  } catch (error: any) {
    console.error("Error creating folder:", error);
    
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: app/api/invites/[id]/resend/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

interface RouteParams {
  params: Promise<{
    id: string;
  }>;
}

export async function POST(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    const { id } = await params;

    if (!id) {
      return NextResponse.json(
        {
          error: "Invalid invite ID",
          message: "Invite ID is required",
        },
        { status: 400 }
      );
    }

    const response = await backendApiRequest(`/api/v1/invites/resend/${id}`, {
      method: "POST",
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        error: "Failed to resend invite",
        message: "Unable to resend invitation",
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/invites/[id]/resend POST error:", error);

    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to resend invite",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/invites/[id]/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

interface RouteParams {
  params: Promise<{
    id: string;
  }>;
}

export async function DELETE(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    const { id } = await params;

    if (!id) {
      return NextResponse.json(
        {
          error: "Invalid invite ID",
          message: "Invite ID is required",
        },
        { status: 400 }
      );
    }

    const response = await backendApiRequest(`/api/v1/invites/${id}`, {
      method: "DELETE",
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        error: "Failed to revoke invite",
        message: "Unable to revoke invitation",
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/invites/[id] DELETE error:", error);

    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to revoke invite",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/invites/list/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const includeAccepted = searchParams.get("include_accepted") === "true";

    // Build query string for backend request
    const queryParams = new URLSearchParams();
    if (includeAccepted) {
      queryParams.append("include_accepted", "true");
    }

    const queryString = queryParams.toString();
    const endpoint = `/api/v1/invites/list${queryString ? `?${queryString}` : ""}`;

    const response = await backendApiRequest(endpoint, {
      method: "GET",
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        error: "Failed to fetch invites",
        message: "Unable to retrieve invitation list",
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/invites/list GET error:", error);

    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to fetch invites",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/invites/send/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function POST(request: Request) {
  try {
    const requestBody = await request.json();
    
    const response = await backendApiRequest("/api/v1/invites/send", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to send invites",
          message: data.message || "Error sending team invitations",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/invites/send error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to send invitations",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/invites/validate/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const token = searchParams.get("token");

    if (!token) {
      return NextResponse.json(
        { error: "Token is required" },
        { status: 400 }
      );
    }

    const backendResponse = await backendApiRequest(
      `/api/v1/invites/validate?token=${encodeURIComponent(token)}`,
      {
        method: "GET",
        skipAuth: true, // This is a public endpoint
      }
    );

    const backendData = await backendResponse.json();

    if (!backendResponse.ok) {
      return NextResponse.json(
        {
          error: backendData.detail || "Invalid invite token",
          message: backendData.message || "Validation failed",
        },
        { status: backendResponse.status }
      );
    }

    // Transform backend response to match frontend expectations
    return NextResponse.json({
      companyName: backendData.company_name,
      inviterName: backendData.inviter_name,
      inviterEmail: backendData.inviter_email,
      email: backendData.email,
      role: backendData.role,
      customMessage: backendData.custom_message,
      expiresAt: backendData.expires_at,
      isExpired: backendData.is_expired || false,
      isUsed: backendData.is_used || false,
    }, { status: 200 });
  } catch (error: any) {
    console.error("API /api/invites/validate error:", error);
    
    let errorMessage = "Internal server error";
    if (error.name === "TypeError" && error.message.includes("fetch failed")) {
      errorMessage = "Could not connect to backend service";
    }

    return NextResponse.json(
      {
        error: errorMessage,
        message: error.message || "An unexpected error occurred",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/onboarding/complete-step/route.ts
================
import { NextResponse } from "next/server";
import { z } from "zod";
import { backendApiRequest } from "@/lib/api-client";

const completeStepSchema = z.object({
  step: z.string().min(1, "Step is required"),
  step_data: z.record(z.any()).optional(),
});

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const validationResult = completeStepSchema.safeParse(body);

    if (!validationResult.success) {
      return NextResponse.json(
        {
          error: "Validation failed",
          details: validationResult.error.format(),
        },
        { status: 400 }
      );
    }

    const response = await backendApiRequest("/api/v1/onboarding/complete-step", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(validationResult.data),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to complete step",
          message: data.message || "Error completing onboarding step",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/onboarding/complete-step error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to complete onboarding step",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/onboarding/skip-step/route.ts
================
import { NextResponse } from "next/server";
import { z } from "zod";
import { backendApiRequest } from "@/lib/api-client";

const skipStepSchema = z.object({
  step: z.string().min(1, "Step is required"),
});

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const validationResult = skipStepSchema.safeParse(body);

    if (!validationResult.success) {
      return NextResponse.json(
        {
          error: "Validation failed",
          details: validationResult.error.format(),
        },
        { status: 400 }
      );
    }

    const response = await backendApiRequest("/api/v1/onboarding/skip-step", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(validationResult.data),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to skip step",
          message: data.message || "Error skipping onboarding step",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/onboarding/skip-step error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to skip onboarding step",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/onboarding/status/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(request: Request) {
  try {
    const response = await backendApiRequest("/api/v1/onboarding/status", {
      method: "GET",
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to get onboarding status",
          message: data.message || "Error retrieving onboarding progress",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/onboarding/status error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to retrieve onboarding status",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/organizations/current/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(request: Request) {
  try {
    const response = await backendApiRequest("/api/v1/organizations/current", {
      method: "GET",
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to fetch organization",
          message: data.message || "Unable to fetch organization details",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/organizations/current GET error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to fetch organization details",
      },
      { status: 500 }
    );
  }
}

export async function PATCH(request: Request) {
  try {
    const body = await request.json();
    
    const response = await backendApiRequest("/api/v1/organizations/current", {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to update organization",
          message: data.message || "Unable to update organization",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/organizations/current PATCH error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to update organization",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/proxy/v1/connections/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { backendApiRequest } from '@/lib/api-client';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const queryString = searchParams.toString();
    const endpoint = `/api/v1/connections${queryString ? `?${queryString}` : ''}`;

    const response = await backendApiRequest(endpoint, {
      method: 'GET',
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        detail: 'Failed to fetch connections',
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Connections proxy error:', error);
    return NextResponse.json(
      { detail: 'Internal server error' },
      { status: 500 }
    );
  }
}

================
File: app/api/proxy/v1/connectors/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { backendApiRequest } from '@/lib/api-client';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const queryString = searchParams.toString();
    const endpoint = `/api/v1/connectors${queryString ? `?${queryString}` : ''}`;

    const response = await backendApiRequest(endpoint, {
      method: 'GET',
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        detail: 'Failed to fetch connectors',
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Connectors proxy error:', error);
    return NextResponse.json(
      { detail: 'Internal server error' },
      { status: 500 }
    );
  }
}

================
File: app/api/proxy/v1/google-drive/browse/[connectionId]/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { backendApiRequest } from '@/lib/api-client';

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ connectionId: string }> }
) {
  try {
    const { connectionId } = await params;
    const { searchParams } = new URL(request.url);
    const queryString = searchParams.toString();
    const endpoint = `/api/v1/google-drive/browse/${connectionId}${queryString ? `?${queryString}` : ''}`;

    const response = await backendApiRequest(endpoint, {
      method: 'GET',
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        detail: 'Failed to browse Google Drive',
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Google Drive browse proxy error:', error);
    return NextResponse.json(
      { detail: 'Internal server error' },
      { status: 500 }
    );
  }
}

================
File: app/api/proxy/v1/oauth/authorize/google_drive/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { backendApiRequest } from '@/lib/api-client';

export async function GET(request: NextRequest) {
  try {
    const response = await backendApiRequest('/api/v1/oauth/authorize/google_drive', {
      method: 'GET',
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        detail: 'Failed to initiate OAuth flow',
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('OAuth authorize proxy error:', error);
    return NextResponse.json(
      { detail: 'Internal server error' },
      { status: 500 }
    );
  }
}

================
File: app/api/proxy/v1/oauth/callback/google_drive/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { backendApiRequest } from '@/lib/api-client';

export async function POST(request: NextRequest) {
  try {
    // Extract query parameters from the request URL
    const { searchParams } = new URL(request.url);
    const code = searchParams.get('code');
    const state = searchParams.get('state');
    
    if (!code || !state) {
      return NextResponse.json(
        { detail: 'Missing code or state parameter' },
        { status: 400 }
      );
    }
    
    // Forward the request to backend with query parameters
    const backendUrl = `/api/v1/oauth/callback/google_drive?code=${encodeURIComponent(code)}&state=${encodeURIComponent(state)}`;
    const response = await backendApiRequest(backendUrl, {
      method: 'POST',
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        detail: 'Failed to complete OAuth callback',
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('OAuth callback proxy error:', error);
    return NextResponse.json(
      { detail: 'Internal server error' },
      { status: 500 }
    );
  }
}

================
File: app/api/proxy/v1/syncs/[syncId]/run/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { backendApiRequest } from '@/lib/api-client';

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ syncId: string }> }
) {
  try {
    const { syncId } = await params;
    const response = await backendApiRequest(`/api/v1/syncs/${syncId}/run`, {
      method: 'POST',
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        detail: 'Failed to run sync',
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Sync run proxy error:', error);
    return NextResponse.json(
      { detail: 'Internal server error' },
      { status: 500 }
    );
  }
}

================
File: app/api/proxy/v1/syncs/[syncId]/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { backendApiRequest } from '@/lib/api-client';

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ syncId: string }> }
) {
  try {
    const { syncId } = await params;
    
    const response = await backendApiRequest(`/api/v1/syncs/${syncId}`, {
      method: 'DELETE',
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        detail: 'Failed to delete sync',
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Sync delete proxy error:', error);
    return NextResponse.json(
      { detail: 'Internal server error' },
      { status: 500 }
    );
  }
}

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ syncId: string }> }
) {
  try {
    const { syncId } = await params;
    
    const response = await backendApiRequest(`/api/v1/syncs/${syncId}`, {
      method: 'GET',
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        detail: 'Failed to fetch sync details',
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Sync details proxy error:', error);
    return NextResponse.json(
      { detail: 'Internal server error' },
      { status: 500 }
    );
  }
}

================
File: app/api/proxy/v1/syncs/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { backendApiRequest } from '@/lib/api-client';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const queryString = searchParams.toString();
    const endpoint = `/api/v1/syncs${queryString ? `?${queryString}` : ''}`;

    const response = await backendApiRequest(endpoint, {
      method: 'GET',
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        detail: 'Failed to fetch syncs',
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Syncs list proxy error:', error);
    return NextResponse.json(
      { detail: 'Internal server error' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    const response = await backendApiRequest('/api/v1/syncs/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(body),
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        detail: 'Failed to create sync',
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Syncs create proxy error:', error);
    return NextResponse.json(
      { detail: 'Internal server error' },
      { status: 500 }
    );
  }
}

================
File: app/api/search/full/route.ts
================
import { NextResponse } from "next/server";
import { z } from "zod";
import { backendApiRequest } from "@/lib/api-client";

const fullSearchSchema = z.object({
  query: z.string().min(1).max(500),
  page: z.number().min(1).optional().default(1),
  size: z.number().min(1).max(100).optional().default(20),
  limit: z.number().min(1).max(100).optional().default(20),
  include_summary: z.boolean().optional().default(true),
  filters: z.object({
    document_type: z.array(z.string()).optional(),
    categories: z.array(z.string()).optional(),
    topics: z.array(z.string()).optional(),
  }).optional(),
  sort_by: z.enum(["relevance", "date", "name"]).optional().default("relevance"),
  sort_order: z.enum(["asc", "desc"]).optional().default("desc"),
  relevance_threshold: z.number().min(0).max(1).optional().default(0.1),
});

type FullSearchRequest = z.infer<typeof fullSearchSchema>;

interface FullSearchResponse {
  results: Array<Record<string, any>>;
  total: number;
  total_results: number;
  query_time_ms: number;
  search_type?: string;
  has_more?: boolean;
}

export async function POST(request: Request): Promise<NextResponse<FullSearchResponse | { error: string; message?: string }>> {
  try {
    const body: unknown = await request.json();

    const validationResult = fullSearchSchema.safeParse(body);

    if (!validationResult.success) {
      return NextResponse.json(
        {
          error: "Validation failed",
          message: validationResult.error.errors[0]?.message || "Invalid input",
        },
        { status: 400 }
      );
    }

    // Transform the request to match backend expectations
    const backendRequest = {
      query: validationResult.data.query,
      limit: validationResult.data.limit || validationResult.data.size || 20,
      include_summary: validationResult.data.include_summary,
      filters: validationResult.data.filters && Object.keys(validationResult.data.filters).length > 0 
        ? validationResult.data.filters 
        : undefined,
      relevance_threshold: validationResult.data.relevance_threshold,
    };

    const response = await backendApiRequest("/api/v1/search/full", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(backendRequest),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        { error: data.detail || "Search failed" },
        { status: response.status }
      );
    }

    // Transform backend response to match frontend expectations
    const transformedResponse: FullSearchResponse = {
      results: data.results || [],
      total: data.total_results || 0,
      total_results: data.total_results || 0,
      query_time_ms: data.query_time_ms || 0,
      search_type: data.search_type || "hybrid",
      has_more: data.results ? data.results.length >= (validationResult.data.limit || 20) : false,
    };

    return NextResponse.json(transformedResponse, { status: 200 });
  } catch (error: unknown) {
    console.error("API /api/search/full error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: app/api/search/instant/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function POST(request: Request) {
  try {
    const body = await request.json();
    
    // Validate query parameter
    if (!body.query || typeof body.query !== 'string' || body.query.trim().length === 0) {
      return NextResponse.json(
        {
          error: "Validation Error",
          message: "Search query is required",
        },
        { status: 400 }
      );
    }

    // Prepare search payload with defaults for instant search
    const searchPayload = {
      query: body.query.trim(),
      limit: body.limit || 5, // Lower limit for instant search
      filters: body.filters || undefined,
    };

    const response = await backendApiRequest("/api/v1/search/instant", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(searchPayload),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Search failed",
          message: data.message || "Unable to perform instant search",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/search/instant error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to perform instant search",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/search/suggestions/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const query = searchParams.get("query");
    const limit = searchParams.get("limit") || "10";

    // Validate query parameter
    if (!query || query.trim().length === 0) {
      return NextResponse.json(
        {
          error: "Validation Error",
          message: "Search query is required",
        },
        { status: 400 }
      );
    }

    const response = await backendApiRequest(
      `/api/v1/search/suggestions?query=${encodeURIComponent(query)}&limit=${limit}&field=topics`,
      {
        method: "GET",
      }
    );

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to get suggestions",
          message: data.message || "Unable to fetch search suggestions",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/search/suggestions error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to fetch search suggestions",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/team/members/[id]/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const response = await backendApiRequest(`/api/v1/team/members/${params.id}`, {
      method: "GET",
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to fetch team member",
          message: data.message || "Unable to fetch team member",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/team/members/[id] GET error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to fetch team member",
      },
      { status: 500 }
    );
  }
}

export async function PATCH(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const body = await request.json();
    
    const response = await backendApiRequest(`/api/v1/team/members/${params.id}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to update team member",
          message: data.message || "Unable to update team member",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/team/members/[id] PATCH error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to update team member",
      },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const response = await backendApiRequest(`/api/v1/team/members/${params.id}`, {
      method: "DELETE",
    });

    if (!response.ok) {
      const data = await response.json();
      return NextResponse.json(
        {
          error: data.detail || "Failed to remove team member",
          message: data.message || "Unable to remove team member",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(
      { message: "Team member removed successfully" },
      { status: 200 }
    );
  } catch (error: any) {
    console.error("API /api/team/members/[id] DELETE error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to remove team member",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/team/members/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(request: Request) {
  try {
    const response = await backendApiRequest("/api/v1/team/members", {
      method: "GET",
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to fetch team members",
          message: data.message || "Unable to fetch team members",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/team/members GET error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to fetch team members",
      },
      { status: 500 }
    );
  }
}

// Team members are added via invites, not direct POST to this endpoint
// The invitation system handles member addition

================
File: app/api/team/stats/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(request: Request) {
  try {
    const response = await backendApiRequest("/api/v1/team/stats", {
      method: "GET",
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to fetch team stats",
          message: data.message || "Unable to fetch team statistics",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/team/stats GET error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to fetch team statistics",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/upload/batch/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function POST(request: Request) {
  try {
    // Get the form data
    const formData = await request.formData();
    
    // Get folder_id from query params
    const { searchParams } = new URL(request.url);
    const folderId = searchParams.get("folder_id");
    
    const url = folderId 
      ? `/api/v1/upload/batch?folder_id=${folderId}`
      : "/api/v1/upload/batch";
    
    // The backend expects files to be in a specific format for batch upload
    const response = await backendApiRequest(url, {
      method: "POST",
      // Don't set Content-Type for FormData, let the browser set it
      body: formData,
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Batch upload failed",
          message: data.message || "Error uploading files",
          failed_files: data.failed_files || [],
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/upload/batch error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to upload files",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/upload/task/[taskId]/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function GET(
  request: Request,
  { params }: { params: Promise<{ taskId: string }> }
) {
  try {
    const { taskId } = await params;
    
    const response = await backendApiRequest(`/api/v1/upload/task/${taskId}`, {
      method: "GET",
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to get task status",
          message: data.message || "Error retrieving upload status",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error(`API /api/upload/task/${(await params).taskId} error:`, error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to retrieve task status",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/upload/route.ts
================
import { NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function POST(request: Request) {
  try {
    // Get the form data
    const formData = await request.formData();
    
    // Get folder_id from query params
    const { searchParams } = new URL(request.url);
    const folderId = searchParams.get("folder_id");
    
    const url = folderId 
      ? `/api/v1/upload?folder_id=${folderId}`
      : "/api/v1/upload";
    
    const response = await backendApiRequest(url, {
      method: "POST",
      // Don't set Content-Type for FormData, let the browser set it
      body: formData,
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Upload failed",
          message: data.message || "Error uploading file",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/upload error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to upload file",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/users/account/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";
import { z } from "zod";

const deleteAccountSchema = z.object({
  confirm_email: z.string().email("Please enter a valid email address"),
  reason: z.string().optional(),
});

export async function DELETE(request: NextRequest) {
  try {
    const body = await request.json();

    const validationResult = deleteAccountSchema.safeParse(body);

    if (!validationResult.success) {
      return NextResponse.json(
        {
          error: "Validation failed",
          message: validationResult.error.errors[0]?.message || "Invalid input",
          details: validationResult.error.flatten(),
        },
        { status: 400 }
      );
    }

    const response = await backendApiRequest("/api/v1/users/account", {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(validationResult.data),
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        error: "Account deletion failed",
        message: "Unable to delete account",
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();

    // Clear auth cookies on successful account deletion
    const responseObj = NextResponse.json(data, { status: 200 });
    responseObj.cookies.delete("auth_token");
    responseObj.cookies.delete("refresh_token");

    return responseObj;
  } catch (error: any) {
    console.error("API /api/users/account DELETE error:", error);

    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to delete account",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/users/avatar/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { backendApiRequest } from "@/lib/api-client";

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const file = formData.get("avatar") as File;

    if (!file) {
      return NextResponse.json(
        {
          error: "Avatar file is required",
          message: "Please select an image file to upload",
        },
        { status: 400 }
      );
    }

    // Validate file type
    if (!file.type.startsWith("image/")) {
      return NextResponse.json(
        {
          error: "Invalid file type",
          message: "Please upload an image file (PNG, JPG, JPEG, etc.)",
        },
        { status: 400 }
      );
    }

    // Validate file size (5MB limit)
    const maxSize = 5 * 1024 * 1024; // 5MB
    if (file.size > maxSize) {
      return NextResponse.json(
        {
          error: "File too large",
          message: "Avatar file must be smaller than 5MB",
        },
        { status: 400 }
      );
    }

    // Create form data for backend
    const backendFormData = new FormData();
    backendFormData.append("avatar", file);

    const response = await backendApiRequest("/api/v1/users/upload-avatar", {
      method: "POST",
      body: backendFormData,
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        error: "Avatar upload failed",
        message: "Unable to upload avatar image",
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/users/avatar POST error:", error);

    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to upload avatar",
      },
      { status: 500 }
    );
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const response = await backendApiRequest("/api/v1/users/avatar", {
      method: "DELETE",
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({
        error: "Avatar deletion failed",
        message: "Unable to delete avatar",
      }));
      return NextResponse.json(error, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/users/avatar DELETE error:", error);

    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to delete avatar",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/users/profile/route.ts
================
import { NextResponse } from "next/server";
import { z } from "zod";
import { backendApiRequest } from "@/lib/api-client";

const updateProfileSchema = z.object({
  first_name: z.string().min(1, "First name is required").max(50).optional(),
  last_name: z.string().min(1, "Last name is required").max(50).optional(),
});

export async function GET(request: Request) {
  try {
    const response = await backendApiRequest("/api/v1/users/profile", {
      method: "GET",
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to get user profile",
          message: data.message || "Error retrieving profile",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/users/profile GET error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to retrieve user profile",
      },
      { status: 500 }
    );
  }
}

export async function PATCH(request: Request) {
  try {
    const body = await request.json();
    const validationResult = updateProfileSchema.safeParse(body);

    if (!validationResult.success) {
      return NextResponse.json(
        {
          error: "Validation failed",
          details: validationResult.error.format(),
        },
        { status: 400 }
      );
    }

    const response = await backendApiRequest("/api/v1/users/profile", {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(validationResult.data),
    });

    const data = await response.json();

    if (!response.ok) {
      return NextResponse.json(
        {
          error: data.detail || "Failed to update profile",
          message: data.message || "Error updating profile",
        },
        { status: response.status }
      );
    }

    return NextResponse.json(data, { status: 200 });
  } catch (error: any) {
    console.error("API /api/users/profile PATCH error:", error);
    
    return NextResponse.json(
      {
        error: "Internal server error",
        message: "Unable to update user profile",
      },
      { status: 500 }
    );
  }
}

================
File: app/api/waitlist/route.ts
================
import { NextResponse } from "next/server";
import { z } from "zod";

// Zod schema now includes turnstileToken
const apiFormSchema = z.object({
  // Renamed to avoid conflict with client-side formSchema if different
  fullName: z.string().min(2, "Full name must be at least 2 characters."),
  email: z.string().email("Please enter a valid email address."),
  companyName: z.string().min(1, "Company name is required."),
  position: z.string().min(1, "Position is required."),
  city: z.string().min(1, "City is required."),
  country: z.string().min(1, "Please select a country."),
  turnstileToken: z.string().min(1, "Turnstile token is required."),
});

async function verifyTurnstileToken(
  token: string,
  remoteIp?: string | null
): Promise<boolean> {
  const secretKey = process.env.TURNSTILE_SECRET_KEY;

  if (!secretKey) {
    console.error(
      "CRITICAL: TURNSTILE_SECRET_KEY is not set in environment variables."
    );
    // In production, you might want to fail closed more silently or log to an alerting system.
    // For development, this console error is important.
    return false; // Fail verification if secret key is missing
  }

  const verifyEndpoint =
    "https://challenges.cloudflare.com/turnstile/v0/siteverify";

  const body = new URLSearchParams();
  body.append("secret", secretKey);
  body.append("response", token);
  if (remoteIp) {
    // Cloudflare recommends sending the IP address of the client
    body.append("remoteip", remoteIp);
  }

  try {
    console.log("VERIFYING TURNSTILE TOKEN - SECRET KEY BEING USED:", secretKey); // Temporary log
    console.log("Verifying Turnstile token with Cloudflare...");
    const response = await fetch(verifyEndpoint, {
      method: "POST",
      body: body,
    });
    const data = await response.json(); // data will be like { success: boolean, 'error-codes'?: string[], ... }
    console.log("Cloudflare Turnstile verification response:", data);
    return data.success === true;
  } catch (error) {
    console.error("Error verifying Turnstile token with Cloudflare:", error);
    return false; // On network or other errors, assume failure
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json();
    // Attempt to get client's IP address
    const clientIp =
      request.headers.get("x-forwarded-for")?.split(",")[0].trim() ||
      request.headers.get("cf-connecting-ip") || // Common for Cloudflare proxy
      request.headers.get("x-real-ip") ||
      request.headers.get("remote-addr"); // Fallback

    console.log("Next.js API /api/waitlist: Received body:", body);
    if (clientIp) {
      console.log("Next.js API /api/waitlist: Client IP:", clientIp);
    }

    const validationResult = apiFormSchema.safeParse(body);

    if (!validationResult.success) {
      console.error(
        "Next.js API validation failed (including Turnstile token):",
        validationResult.error.format()
      );
      return NextResponse.json(
        {
          error: "Validation failed",
          details: validationResult.error.format(),
        },
        { status: 400 }
      );
    }

    // Destructure token and the rest of the data
    const { turnstileToken, ...waitlistData } = validationResult.data;

    // Verify the Turnstile token with Cloudflare
    const isTokenValid = await verifyTurnstileToken(turnstileToken, clientIp);
    if (!isTokenValid) {
      console.warn("Turnstile token verification failed for IP:", clientIp);
      return NextResponse.json(
        {
          error: "Security check failed. Please try again or refresh the page.",
        },
        { status: 403 } // 403 Forbidden is appropriate
      );
    }
    console.log("Turnstile token verified successfully.");

    // Token is valid, proceed to call your FastAPI backend
    // (The `waitlistData` object no longer contains `turnstileToken`)
    const fastapiBaseUrl = process.env.FASTAPI_BASE_URL;
    if (!fastapiBaseUrl) {
      console.error("FASTAPI_BASE_URL environment variable is not set.");
      return NextResponse.json(
        { error: "Internal server configuration error." },
        { status: 500 }
      );
    }

    const fastapiWaitlistUrl = `${fastapiBaseUrl}${
      process.env.API_PREFIX || "/api"
    }/waitlist`;
    console.log(
      "Next.js API: Calling FastAPI at:",
      fastapiWaitlistUrl,
      "with data:",
      waitlistData
    );

    const backendResponse = await fetch(fastapiWaitlistUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(waitlistData), // Send only the waitlist form data
    });

    const backendData = await backendResponse.json();
    console.log("Next.js API: Response from FastAPI:", {
      status: backendResponse.status,
      data: backendData,
    });

    if (!backendResponse.ok) {
      console.error(
        "Next.js API: FastAPI backend returned an error:",
        backendData
      );
      return NextResponse.json(
        {
          error:
            backendData.detail ||
            backendData.error ||
            "Failed to submit to waitlist via backend.",
          details: backendData.details || null,
        },
        { status: backendResponse.status }
      );
    }

    return NextResponse.json(
      {
        success: backendData.success,
        message: backendData.message,
        data: backendData.data,
      },
      { status: 200 }
    );
  } catch (error: any) {
    console.error("Next.js API /api/waitlist critical error:", error);
    let errorMessage = "Internal server error during proxying.";
    if (error.message) {
      errorMessage = error.message;
    } else if (typeof error === "string") {
      errorMessage = error;
    }

    // Log the type of error for better debugging
    if (error.name === "TypeError" && error.message.includes("fetch failed")) {
      errorMessage = `Network error: Could not connect to the backend service at ${process.env.FASTAPI_BASE_URL}. Please ensure the backend is running and accessible.`;
      console.error(
        `Details: Is FASTAPI_BASE_URL (${process.env.FASTAPI_BASE_URL}) correct and is the backend server running and reachable from the Next.js server environment?`
      );
    }

    return NextResponse.json(
      {
        error: "Internal server error",
        message: errorMessage,
      },
      { status: 500 }
    );
  }
}

================
File: app/check-domain/loading.tsx
================
export default function Loading() {
  return null
}

================
File: app/check-domain/page.tsx
================
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { motion } from "framer-motion";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Card, CardContent } from "@/components/ui/card";
import {
  Search,
  Building2,
  CheckCircle,
  XCircle,
  Loader2,
  ArrowRight,
  Mail,
  Users,
} from "lucide-react";
import Link from "next/link";

const domainCheckSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
});

type DomainCheckForm = z.infer<typeof domainCheckSchema>;

interface DomainCheckResult {
  has_existing_tenant: boolean;
  tenant_name?: string;
  domain: string;
  is_generic_domain: boolean;
  requires_invite?: boolean;
}

export default function CheckDomainPage() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [result, setResult] = useState<DomainCheckResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
  } = useForm<DomainCheckForm>({
    resolver: zodResolver(domainCheckSchema),
  });

  const watchedEmail = watch("email");

  const onSubmit = async (data: DomainCheckForm) => {
    setIsLoading(true);
    setError(null);
    setResult(null);

    try {
      const response = await fetch("/api/auth/check-domain", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        const result = await response.json();
        setResult(result);
      } else {
        const errorData = await response.json();
        setError(errorData.message || "Something went wrong");
      }
    } catch (error) {
      setError("Network error. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleCreateWorkspace = () => {
    router.push(`/signup?email=${encodeURIComponent(watchedEmail)}`);
  };

  const handleRequestInvite = () => {
    // This could open a modal or redirect to a contact form
    window.open(
      `mailto:admin@${result?.domain}?subject=Request to join ${result?.tenant_name} workspace&body=Hi, I would like to request access to the ${result?.tenant_name} workspace on Monolith.`,
      "_blank"
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-white via-[#fafbf9] to-[#f0f7e8] flex items-center justify-center p-6 relative overflow-hidden">
      {/* Decorative Background Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -left-20 w-72 h-72 bg-[#A3BC02]/4 rounded-full blur-3xl" />
        <div className="absolute -bottom-20 -right-40 w-72 h-72 bg-[#A3BC02]/3 rounded-full blur-3xl" />
        <div className="absolute top-1/4 left-1/3 w-56 h-56 bg-gradient-radial from-[#A3BC02]/2 to-transparent rounded-full blur-2xl" />
      </div>

      <div className="w-full max-w-lg relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          {/* Header */}
          <div className="text-center mb-8">
            <Link href="/" className="inline-block mb-6">
              <div className="text-2xl font-serif text-custom-dark-green">
                Mono<span className="underline decoration-[#A3BC02]">l</span>ith
              </div>
            </Link>

            <h1 className="text-3xl font-serif text-custom-dark-green mb-2">
              Find Your Workspace
            </h1>

            <p className="text-gray-600">
              Check if your company already has a Monolith workspace
            </p>
          </div>

          {/* Domain Check Form */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            <Card className="backdrop-blur-sm bg-white/80 border-white/20 shadow-xl shadow-[#A3BC02]/5">
              <CardContent className="p-6 relative">
                {/* Subtle gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-white/50 to-transparent rounded-lg pointer-events-none" />
                <div className="relative z-10">
                  <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                    <div>
                      <Label htmlFor="email">Work Email Address</Label>
                      <div className="relative mt-1">
                        <Input
                          id="email"
                          type="email"
                          {...register("email")}
                          placeholder="you@company.com"
                          className="pl-10"
                        />
                        <Mail className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
                      </div>
                      {errors.email && (
                        <p className="text-sm text-red-600 mt-1">
                          {errors.email.message}
                        </p>
                      )}
                    </div>

                    <Button
                      type="submit"
                      disabled={isLoading}
                      className="w-full bg-[#A3BC02] hover:bg-[#8BA000] text-white"
                    >
                      {isLoading ? (
                        <>
                          <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                          Checking...
                        </>
                      ) : (
                        <>
                          <Search className="w-4 h-4 mr-2" />
                          Check Domain
                        </>
                      )}
                    </Button>
                  </form>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          {/* Error Message */}
          {error && (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              className="mt-4"
            >
              <Alert className="border-red-200 bg-red-50">
                <XCircle className="h-4 w-4 text-red-600" />
                <AlertDescription className="text-red-700">
                  {error}
                </AlertDescription>
              </Alert>
            </motion.div>
          )}

          {/* Results */}
          {result && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.1 }}
              className="mt-6"
            >
              {result.has_existing_tenant ? (
                /* Company Exists */
                <Card className="border-[#A3BC02]/30 bg-gradient-to-br from-[#A3BC02]/8 to-white/80 backdrop-blur-sm shadow-xl shadow-[#A3BC02]/10">
                  <CardContent className="p-6 relative">
                    <div className="absolute inset-0 bg-gradient-to-br from-white/30 to-transparent rounded-lg pointer-events-none" />
                    <div className="relative z-10">
                      <div className="flex items-start gap-4">
                        <div className="w-12 h-12 bg-[#A3BC02]/15 rounded-full flex items-center justify-center flex-shrink-0 shadow-lg shadow-[#A3BC02]/20">
                          <Building2 className="w-6 h-6 text-[#A3BC02]" />
                        </div>
                        <div className="flex-1">
                          <h3 className="text-lg font-semibold text-custom-dark-green mb-1">
                            Workspace Found!
                          </h3>
                          <p className="text-gray-600 mb-4">
                            A workspace exists for{" "}
                            <strong>{result.tenant_name}</strong> at{" "}
                            {result.domain}
                          </p>
                          <div className="space-y-3">
                            <Button
                              onClick={handleRequestInvite}
                              className="w-full bg-[#A3BC02] hover:bg-[#8BA000] text-white"
                            >
                              <Mail className="w-4 h-4 mr-2" />
                              Request an Invite
                            </Button>
                            <p className="text-sm text-gray-500 text-center">
                              This will open your email client to contact your
                              admin
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ) : (
                /* No Company Found */
                <Card className="border-green-200/50 bg-gradient-to-br from-green-50/80 to-white/80 backdrop-blur-sm shadow-xl shadow-green-500/5">
                  <CardContent className="p-6 relative">
                    <div className="absolute inset-0 bg-gradient-to-br from-white/40 to-transparent rounded-lg pointer-events-none" />
                    <div className="relative z-10">
                      <div className="flex items-start gap-4">
                        <div className="w-12 h-12 bg-green-100/80 rounded-full flex items-center justify-center flex-shrink-0 shadow-lg shadow-green-500/10">
                          <CheckCircle className="w-6 h-6 text-green-600" />
                        </div>
                        <div className="flex-1">
                          <h3 className="text-lg font-semibold text-custom-dark-green mb-1">
                            {result.is_generic_domain
                              ? "Personal Email Detected"
                              : "No Workspace Found"}
                          </h3>
                          <p className="text-gray-600 mb-4">
                            {result.is_generic_domain
                              ? "Personal email domains can create new workspaces directly"
                              : `No workspace found for ${result.domain}. You can create a new one!`}
                          </p>
                          <Button
                            onClick={handleCreateWorkspace}
                            className="w-full bg-[#A3BC02] hover:bg-[#8BA000] text-white"
                          >
                            <Users className="w-4 h-4 mr-2" />
                            Create New Workspace
                            <ArrowRight className="w-4 h-4 ml-2" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}
            </motion.div>
          )}

          {/* Alternative Actions */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.4 }}
            className="mt-8"
          >
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-200" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-white text-gray-500">Or</span>
              </div>
            </div>

            <div className="mt-6 text-center space-y-3">
              <p className="text-sm text-gray-600">Already have an account?</p>
              <Button
                variant="outline"
                className="bg-white/60 backdrop-blur-sm text-custom-dark-green border-white/40 hover:bg-white/80 hover:shadow-lg hover:shadow-[#A3BC02]/10 transition-all duration-200"
                onClick={() => router.push("/login")}
              >
                Sign In Instead
              </Button>
            </div>
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
}

================
File: app/forgot-password/page.tsx
================
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { motion } from "framer-motion";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Card, CardContent } from "@/components/ui/card";
import { Mail, ArrowLeft, CheckCircle, Loader2 } from "lucide-react";
import Link from "next/link";

const forgotPasswordSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
});

type ForgotPasswordForm = z.infer<typeof forgotPasswordSchema>;

export default function ForgotPasswordPage() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
  } = useForm<ForgotPasswordForm>({
    resolver: zodResolver(forgotPasswordSchema),
  });

  const onSubmit = async (data: ForgotPasswordForm) => {
    setIsLoading(true);
    try {
      const response = await fetch("/api/auth/forgot-password", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        setIsSuccess(true);
      } else {
        const error = await response.json();
        setError("root", {
          message: error.message || "Something went wrong",
        });
      }
    } catch (error) {
      setError("root", {
        message: "Network error. Please try again.",
      });
    } finally {
      setIsLoading(false);
    }
  };

  if (isSuccess) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-white via-[#fafbf9] to-[#f0f7e8] flex items-center justify-center p-6 relative overflow-hidden">
        <div className="absolute inset-0 overflow-hidden pointer-events-none">
          <div className="absolute -top-32 -right-32 w-64 h-64 bg-[#A3BC02]/4 rounded-full blur-3xl" />
          <div className="absolute -bottom-32 -left-32 w-64 h-64 bg-[#A3BC02]/3 rounded-full blur-3xl" />
        </div>

        <div className="w-full max-w-md relative z-10">
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.4 }}
          >
            <Card className="backdrop-blur-sm bg-white/80 border-white/20 shadow-xl shadow-[#A3BC02]/5">
              <CardContent className="p-8 text-center">
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <CheckCircle className="w-8 h-8 text-green-600" />
                </div>
                
                <h2 className="text-2xl font-serif text-custom-dark-green mb-2">
                  Check Your Email
                </h2>
                
                <p className="text-gray-600 mb-6">
                  We've sent password reset instructions to your email address.
                </p>
                
                <div className="space-y-3">
                  <Button
                    onClick={() => router.push("/login")}
                    className="w-full bg-[#A3BC02] hover:bg-[#8BA000] text-white"
                  >
                    Return to Login
                  </Button>
                  
                  <p className="text-sm text-gray-500">
                    Didn't receive the email? Check your spam folder or try again.
                  </p>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-white via-[#fafbf9] to-[#f0f7e8] flex items-center justify-center p-6 relative overflow-hidden">
      {/* Decorative Background Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-32 -right-32 w-64 h-64 bg-[#A3BC02]/4 rounded-full blur-3xl" />
        <div className="absolute -bottom-32 -left-32 w-64 h-64 bg-[#A3BC02]/3 rounded-full blur-3xl" />
        <div className="absolute top-1/3 right-1/4 w-48 h-48 bg-gradient-radial from-[#A3BC02]/2 to-transparent rounded-full blur-2xl" />
      </div>

      <div className="w-full max-w-md relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          {/* Header */}
          <div className="text-center mb-8">
            <Link href="/" className="inline-block mb-6">
              <div className="text-2xl font-serif text-custom-dark-green">
                Mono<span className="underline decoration-[#A3BC02]">l</span>ith
              </div>
            </Link>

            <h1 className="text-3xl font-serif text-custom-dark-green mb-2">
              Forgot Password?
            </h1>

            <p className="text-gray-600">
              No worries! Enter your email and we'll send you reset instructions.
            </p>
          </div>

          {/* Form */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            <Card className="backdrop-blur-sm bg-white/80 border-white/20 shadow-xl shadow-[#A3BC02]/5">
              <CardContent className="p-6 relative">
                <div className="absolute inset-0 bg-gradient-to-br from-white/50 to-transparent rounded-lg pointer-events-none" />
                <div className="relative z-10">
                  <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                    <div>
                      <Label htmlFor="email">Email Address</Label>
                      <div className="relative mt-1">
                        <Input
                          id="email"
                          type="email"
                          {...register("email")}
                          placeholder="Enter your email"
                          className="pl-10"
                        />
                        <Mail className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
                      </div>
                      {errors.email && (
                        <p className="text-sm text-red-600 mt-1">
                          {errors.email.message}
                        </p>
                      )}
                    </div>

                    {/* Error Message */}
                    {errors.root && (
                      <Alert className="border-red-200 bg-red-50">
                        <AlertDescription className="text-red-700">
                          {errors.root.message}
                        </AlertDescription>
                      </Alert>
                    )}

                    <Button
                      type="submit"
                      disabled={isLoading}
                      className="w-full bg-[#A3BC02] hover:bg-[#8BA000] text-white"
                    >
                      {isLoading ? (
                        <>
                          <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                          Sending Instructions...
                        </>
                      ) : (
                        "Send Reset Instructions"
                      )}
                    </Button>
                  </form>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          {/* Back to Login */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.4 }}
            className="text-center mt-6"
          >
            <Button
              variant="ghost"
              onClick={() => router.push("/login")}
              className="text-gray-600 hover:text-custom-dark-green"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Login
            </Button>
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
}

================
File: app/invite/loading.tsx
================
export default function Loading() {
  return null
}

================
File: app/invite/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Card, CardContent } from "@/components/ui/card";
import {
  Building2,
  User,
  Mail,
  Clock,
  CheckCircle,
  XCircle,
  AlertTriangle,
  ArrowRight,
  Loader2,
} from "lucide-react";
import Link from "next/link";

interface InviteDetails {
  companyName: string;
  inviterName: string;
  inviterEmail: string;
  email: string;
  role: string;
  customMessage?: string;
  expiresAt: string;
  isExpired: boolean;
  isUsed: boolean;
}

type InviteStatus = "loading" | "valid" | "expired" | "used" | "invalid";

export default function InvitePage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const token = searchParams.get("token");

  const [status, setStatus] = useState<InviteStatus>("loading");
  const [inviteDetails, setInviteDetails] = useState<InviteDetails | null>(
    null
  );
  const [isAccepting, setIsAccepting] = useState(false);

  useEffect(() => {
    if (!token) {
      setStatus("invalid");
      return;
    }

    validateInvite();
  }, [token]);

  const validateInvite = async () => {
    try {
      const response = await fetch(`/api/invites/validate?token=${token}`);

      if (response.ok) {
        const details = await response.json();
        setInviteDetails(details);

        if (details.isUsed) {
          setStatus("used");
        } else if (details.isExpired) {
          setStatus("expired");
        } else {
          setStatus("valid");
        }
      } else {
        setStatus("invalid");
      }
    } catch (error) {
      setStatus("invalid");
    }
  };

  const handleAcceptInvite = () => {
    if (inviteDetails) {
      router.push(`/signup?invite_token=${token}`);
    }
  };

  const handleDeclineInvite = async () => {
    setIsAccepting(true);
    try {
      await fetch(`/api/invites/decline`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ token }),
      });
      router.push("/");
    } catch (error) {
      // Handle error silently, just redirect
      router.push("/");
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const renderContent = () => {
    switch (status) {
      case "loading":
        return (
          <Card className="backdrop-blur-sm bg-white/80 border-white/20 shadow-xl shadow-[#A3BC02]/5">
            <CardContent className="p-8 text-center relative">
              <div className="absolute inset-0 bg-gradient-to-br from-white/50 to-transparent rounded-lg pointer-events-none" />
              <div className="relative z-10">
                <Loader2 className="w-8 h-8 animate-spin text-[#A3BC02] mx-auto mb-4" />
                <p className="text-gray-600">Validating your invite...</p>
              </div>
            </CardContent>
          </Card>
        );

      case "valid":
        return (
          <Card className="border-[#A3BC02]/30 backdrop-blur-sm bg-gradient-to-br from-white/90 to-[#A3BC02]/5 shadow-xl shadow-[#A3BC02]/10">
            <CardContent className="p-6 relative">
              <div className="absolute inset-0 bg-gradient-to-br from-white/40 to-transparent rounded-lg pointer-events-none" />
              <div className="relative z-10">
                {/* Invite Header */}
                <div className="text-center mb-6">
                  <div className="w-16 h-16 bg-[#A3BC02]/15 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg shadow-[#A3BC02]/20">
                    <Building2 className="w-8 h-8 text-[#A3BC02]" />
                  </div>
                  <h2 className="text-2xl font-serif text-custom-dark-green mb-2">
                    You're Invited!
                  </h2>
                  <p className="text-gray-600">Join your team on Monolith</p>
                </div>

                {/* Invite Details */}
                <div className="space-y-4 mb-6">
                  <div className="bg-gray-50 rounded-lg p-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="flex items-center gap-3">
                        <Building2 className="w-5 h-5 text-gray-400" />
                        <div>
                          <p className="text-sm text-gray-500">Company</p>
                          <p className="font-medium text-custom-dark-green">
                            {inviteDetails?.companyName}
                          </p>
                        </div>
                      </div>

                      <div className="flex items-center gap-3">
                        <User className="w-5 h-5 text-gray-400" />
                        <div>
                          <p className="text-sm text-gray-500">Invited by</p>
                          <p className="font-medium text-custom-dark-green">
                            {inviteDetails?.inviterName}
                          </p>
                        </div>
                      </div>

                      <div className="flex items-center gap-3">
                        <Mail className="w-5 h-5 text-gray-400" />
                        <div>
                          <p className="text-sm text-gray-500">Email</p>
                          <p className="font-medium text-custom-dark-green">
                            {inviteDetails?.email}
                          </p>
                        </div>
                      </div>

                      <div className="flex items-center gap-3">
                        <CheckCircle className="w-5 h-5 text-gray-400" />
                        <div>
                          <p className="text-sm text-gray-500">Role</p>
                          <p className="font-medium text-custom-dark-green capitalize">
                            {inviteDetails?.role}
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>

                  {inviteDetails?.customMessage && (
                    <div className="bg-[#A3BC02]/5 border border-[#A3BC02]/20 rounded-lg p-4">
                      <p className="text-sm text-gray-500 mb-1">
                        Personal message:
                      </p>
                      <p className="text-custom-dark-green italic">
                        "{inviteDetails.customMessage}"
                      </p>
                    </div>
                  )}

                  <div className="flex items-center gap-2 text-sm text-gray-500">
                    <Clock className="w-4 h-4" />
                    <span>
                      Expires on {formatDate(inviteDetails?.expiresAt || "")}
                    </span>
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="space-y-3">
                  <Button
                    onClick={handleAcceptInvite}
                    className="w-full bg-[#A3BC02] hover:bg-[#8BA000] text-white"
                  >
                    Accept Invitation
                    <ArrowRight className="w-4 h-4 ml-2" />
                  </Button>

                  <Button
                    variant="outline"
                    onClick={handleDeclineInvite}
                    disabled={isAccepting}
                    className="w-full bg-white text-gray-600 border-gray-300 hover:bg-gray-50"
                  >
                    {isAccepting ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        Declining...
                      </>
                    ) : (
                      "Decline Invitation"
                    )}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        );

      case "expired":
        return (
          <Card className="border-yellow-200/50 backdrop-blur-sm bg-gradient-to-br from-yellow-50/80 to-white/80 shadow-xl shadow-yellow-500/5">
            <CardContent className="p-6 text-center relative">
              <div className="absolute inset-0 bg-gradient-to-br from-white/50 to-transparent rounded-lg pointer-events-none" />
              <div className="relative z-10">
                <div className="w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Clock className="w-8 h-8 text-yellow-600" />
                </div>
                <h2 className="text-xl font-serif text-custom-dark-green mb-2">
                  Invitation Expired
                </h2>
                <p className="text-gray-600 mb-4">
                  This invitation expired on{" "}
                  {inviteDetails && formatDate(inviteDetails.expiresAt)}
                </p>
                <Alert className="border-yellow-200 bg-yellow-50 mb-4">
                  <AlertTriangle className="h-4 w-4 text-yellow-600" />
                  <AlertDescription className="text-yellow-700">
                    Please contact {inviteDetails?.inviterName} (
                    {inviteDetails?.inviterEmail}) to request a new invitation.
                  </AlertDescription>
                </Alert>
                <Button
                  variant="outline"
                  onClick={() => router.push("/")}
                  className="bg-white text-custom-dark-green border-gray-300 hover:bg-gray-50"
                >
                  Return to Home
                </Button>
              </div>
            </CardContent>
          </Card>
        );

      case "used":
        return (
          <Card className="border-blue-200/50 backdrop-blur-sm bg-gradient-to-br from-blue-50/80 to-white/80 shadow-xl shadow-blue-500/5">
            <CardContent className="p-6 text-center relative">
              <div className="absolute inset-0 bg-gradient-to-br from-white/50 to-transparent rounded-lg pointer-events-none" />
              <div className="relative z-10">
                <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <CheckCircle className="w-8 h-8 text-blue-600" />
                </div>
                <h2 className="text-xl font-serif text-custom-dark-green mb-2">
                  Invitation Already Used
                </h2>
                <p className="text-gray-600 mb-4">
                  This invitation has already been accepted.
                </p>
                <div className="space-y-3">
                  <Button
                    onClick={() => router.push("/login")}
                    className="w-full bg-[#A3BC02] hover:bg-[#8BA000] text-white"
                  >
                    Sign In to Your Account
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => router.push("/")}
                    className="w-full bg-white text-custom-dark-green border-gray-300 hover:bg-gray-50"
                  >
                    Return to Home
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        );

      case "invalid":
      default:
        return (
          <Card className="border-red-200/50 backdrop-blur-sm bg-gradient-to-br from-red-50/80 to-white/80 shadow-xl shadow-red-500/5">
            <CardContent className="p-6 text-center relative">
              <div className="absolute inset-0 bg-gradient-to-br from-white/50 to-transparent rounded-lg pointer-events-none" />
              <div className="relative z-10">
                <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <XCircle className="w-8 h-8 text-red-600" />
                </div>
                <h2 className="text-xl font-serif text-custom-dark-green mb-2">
                  Invalid Invitation
                </h2>
                <p className="text-gray-600 mb-4">
                  This invitation link is invalid or has been corrupted.
                </p>
                <Alert className="border-red-200 bg-red-50 mb-4">
                  <XCircle className="h-4 w-4 text-red-600" />
                  <AlertDescription className="text-red-700">
                    Please check the link or contact the person who sent you the
                    invitation.
                  </AlertDescription>
                </Alert>
                <Button
                  variant="outline"
                  onClick={() => router.push("/")}
                  className="bg-white text-custom-dark-green border-gray-300 hover:bg-gray-50"
                >
                  Return to Home
                </Button>
              </div>
            </CardContent>
          </Card>
        );
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-white via-[#fafbf9] to-[#f0f7e8] flex items-center justify-center p-6 relative overflow-hidden">
      {/* Decorative Background Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-32 -right-20 w-80 h-80 bg-[#A3BC02]/4 rounded-full blur-3xl" />
        <div className="absolute -bottom-40 -left-32 w-80 h-80 bg-[#A3BC02]/3 rounded-full blur-3xl" />
        <div className="absolute top-1/2 right-1/3 w-64 h-64 bg-gradient-radial from-[#A3BC02]/2 to-transparent rounded-full blur-2xl" />
      </div>

      <div className="w-full max-w-lg relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          {/* Header */}
          <div className="text-center mb-8">
            <Link href="/" className="inline-block mb-6">
              <div className="text-2xl font-serif text-custom-dark-green">
                Mono<span className="underline decoration-[#A3BC02]">l</span>ith
              </div>
            </Link>
          </div>

          {/* Content */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            {renderContent()}
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
}

================
File: app/login/loading.tsx
================
export default function Loading() {
  return null
}

================
File: app/login/page.tsx
================
"use client";

import { useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { useAuth } from "@/lib/auth-context";
import { motion, AnimatePresence } from "framer-motion";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Card, CardContent } from "@/components/ui/card";
import { Eye, EyeOff, Loader2, XCircle, ArrowRight, AlertCircle, ShieldAlert } from "lucide-react";
import Link from "next/link";

const loginSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
  password: z.string().min(1, "Password is required"),
  rememberMe: z.boolean().optional(),
});

type LoginForm = z.infer<typeof loginSchema>;

export default function LoginPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const redirectTo = searchParams.get("redirect") || "/dashboard";
  const { login } = useAuth();

  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [errorStatusCode, setErrorStatusCode] = useState<number | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
    clearErrors,
  } = useForm<LoginForm>({
    resolver: zodResolver(loginSchema),
  });

  const onSubmit = async (data: LoginForm) => {
    // Clear any existing root errors when starting submission
    if (errors.root) {
      clearErrors("root");
    }
    setIsLoading(true);

    try {
      // Use the auth context login method
      await login(data.email, data.password);
      
      // The auth context handles navigation, but we can override with redirect
      if (redirectTo !== "/dashboard") {
        router.push(redirectTo);
      }
    } catch (error: any) {
      // Handle different error types from auth context
      let errorMessage = "Invalid email or password";
      let statusCode = 401;
      
      if (error.message?.includes("Too many")) {
        errorMessage = error.message;
        statusCode = 429;
      } else if (error.message?.includes("disabled")) {
        errorMessage = error.message;
        statusCode = 403;
      } else if (error.message?.includes("connect")) {
        errorMessage = "Unable to connect to server. Please try again.";
        statusCode = 500;
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      setErrorStatusCode(statusCode);
      setError("root", {
        message: errorMessage,
      });
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-white via-[#fafbf9] to-[#f0f7e8] flex items-center justify-center p-6 relative overflow-hidden">
      {/* Decorative Background Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-32 -right-32 w-64 h-64 bg-[#A3BC02]/4 rounded-full blur-3xl" />
        <div className="absolute -bottom-32 -left-32 w-64 h-64 bg-[#A3BC02]/3 rounded-full blur-3xl" />
        <div className="absolute top-1/3 right-1/4 w-48 h-48 bg-gradient-radial from-[#A3BC02]/2 to-transparent rounded-full blur-2xl" />
      </div>

      <div className="w-full max-w-md relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          {/* Header */}
          <div className="text-center mb-8">
            <Link href="/" className="inline-block mb-6">
              <div className="text-2xl font-serif text-custom-dark-green">
                Mono<span className="underline decoration-[#A3BC02]">l</span>ith
              </div>
            </Link>

            <h1 className="text-3xl font-serif text-custom-dark-green mb-2">
              Welcome Back
            </h1>

            <p className="text-gray-600">
              Sign in to continue your intelligent content discovery
            </p>
          </div>

          {/* Login Form */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            <Card className="backdrop-blur-sm bg-white/80 border-white/20 shadow-xl shadow-[#A3BC02]/5">
              <CardContent className="p-6">
                <div>
                  <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                    {/* Email */}
                    <div>
                      <Label htmlFor="email">Email Address</Label>
                      <Input
                        id="email"
                        type="email"
                        {...register("email")}
                        className="mt-1"
                        placeholder="Enter your email"
                      />
                      {errors.email && (
                        <p className="text-sm text-red-600 mt-1">
                          {errors.email.message}
                        </p>
                      )}
                    </div>

                    {/* Password */}
                    <div>
                      <Label htmlFor="password">Password</Label>
                      <div className="relative mt-1">
                        <Input
                          id="password"
                          type={showPassword ? "text" : "password"}
                          {...register("password")}
                          placeholder="Enter your password"
                        />
                        <button
                          type="button"
                          onClick={() => setShowPassword(!showPassword)}
                          className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700 transition-colors"
                        >
                          {showPassword ? (
                            <EyeOff className="w-4 h-4" />
                          ) : (
                            <Eye className="w-4 h-4" />
                          )}
                        </button>
                      </div>
                      {errors.password && (
                        <p className="text-sm text-red-600 mt-1">
                          {errors.password.message}
                        </p>
                      )}
                    </div>

                    {/* Remember Me & Forgot Password */}
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          id="rememberMe"
                          {...register("rememberMe")}
                          className="h-4 w-4 rounded border-gray-300 text-[#A3BC02] focus:ring-[#A3BC02]"
                        />
                        <Label htmlFor="rememberMe" className="text-sm">
                          Remember me
                        </Label>
                      </div>
                      <Link
                        href="/forgot-password"
                        className="text-sm text-[#A3BC02] hover:underline"
                      >
                        Forgot password?
                      </Link>
                    </div>

                    {/* Error Message */}
                    <AnimatePresence mode="wait">
                      {errors.root && (
                        <motion.div
                          initial={{ opacity: 0, y: -10 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: -10 }}
                          transition={{ duration: 0.2 }}
                        >
                          <Alert className={
                            errorStatusCode === 429 
                              ? "border-orange-200 bg-orange-50" 
                              : errorStatusCode === 403
                              ? "border-purple-200 bg-purple-50"
                              : "border-red-200 bg-red-50"
                          }>
                            {errorStatusCode === 429 ? (
                              <ShieldAlert className="h-4 w-4 text-orange-600" />
                            ) : errorStatusCode === 403 ? (
                              <AlertCircle className="h-4 w-4 text-purple-600" />
                            ) : (
                              <XCircle className="h-4 w-4 text-red-600" />
                            )}
                            <AlertDescription className={
                              errorStatusCode === 429 
                                ? "text-orange-700" 
                                : errorStatusCode === 403
                                ? "text-purple-700"
                                : "text-red-700"
                            }>
                              {errors.root.message}
                            </AlertDescription>
                          </Alert>
                        </motion.div>
                      )}
                    </AnimatePresence>

                    {/* Submit Button */}
                    <Button
                      type="submit"
                      disabled={isLoading}
                      className="w-full bg-[#A3BC02] hover:bg-[#8BA000] text-white"
                    >
                      {isLoading ? (
                        <>
                          <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                          Signing In...
                        </>
                      ) : (
                        <>
                          Sign In
                          <ArrowRight className="w-4 h-4 ml-2" />
                        </>
                      )}
                    </Button>
                  </form>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          {/* Divider */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.4 }}
            className="relative my-6"
          >
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-200" />
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">
                New to Monolith?
              </span>
            </div>
          </motion.div>

          {/* Sign Up Options */}
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
            className="space-y-3"
          >
            <Button
              variant="outline"
              className="w-full bg-white/60 backdrop-blur-sm text-custom-dark-green border-white/40 hover:bg-white/80 hover:shadow-lg hover:shadow-[#A3BC02]/10 transition-all duration-200"
              onClick={() => router.push("/check-domain")}
            >
              Check if your company has a workspace
            </Button>

            <Button
              variant="outline"
              className="w-full bg-white/60 backdrop-blur-sm text-custom-dark-green border-white/40 hover:bg-white/80 hover:shadow-lg hover:shadow-[#A3BC02]/10 transition-all duration-200"
              onClick={() => router.push("/signup")}
            >
              Create a new workspace
            </Button>
          </motion.div>

          {/* Footer */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.6 }}
            className="text-center mt-8"
          >
            <p className="text-xs text-gray-500">
              By signing in, you agree to our{" "}
              <Link
                href="/terms-of-service"
                className="text-[#A3BC02] hover:underline"
              >
                Terms of Service
              </Link>{" "}
              and{" "}
              <Link
                href="/privacy-policy"
                className="text-[#A3BC02] hover:underline"
              >
                Privacy Policy
              </Link>
            </p>
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
}

================
File: app/oauth/callback/google_drive/page.tsx
================
"use client";

import React, { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { clientApiRequest } from '@/lib/client-api';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Loader2, CheckCircle, XCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';

export default function GoogleDriveOAuthCallback() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const [message, setMessage] = useState('');

  useEffect(() => {
    const handleCallback = async () => {
      try {
        const code = searchParams.get('code');
        const state = searchParams.get('state');
        const error = searchParams.get('error');

        // Check for OAuth errors from Google
        if (error) {
          setStatus('error');
          setMessage(`OAuth failed: ${error}`);
          return;
        }

        if (!code || !state) {
          setStatus('error');
          setMessage('Missing authorization code or state parameter');
          return;
        }

        // Verify state matches what we stored
        const storedState = sessionStorage.getItem('oauth_state');
        if (state !== storedState) {
          setStatus('error');
          setMessage('Invalid state parameter - possible CSRF attack');
          return;
        }

        // Clear stored state
        sessionStorage.removeItem('oauth_state');

        // Exchange code for connection
        const response = await clientApiRequest(`/api/proxy/v1/oauth/callback/google_drive?code=${encodeURIComponent(code)}&state=${encodeURIComponent(state)}`, {
          method: 'POST',
        });

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));
          console.error('OAuth callback API error:', { 
            status: response.status, 
            statusText: response.statusText,
            errorData 
          });
          throw new Error(errorData.detail || errorData.message || `HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        
        // Store connection ID for future use
        localStorage.setItem('google_drive_connection_id', data.connection_id);
        
        setStatus('success');
        setMessage('Google Drive connected successfully!');
        
        // Redirect to settings after a short delay
        setTimeout(() => {
          router.push('/settings?tab=integrations');
        }, 2000);

      } catch (error) {
        console.error('OAuth callback error:', error);
        setStatus('error');
        setMessage(error instanceof Error ? error.message : 'An unexpected error occurred');
      }
    };

    handleCallback();
  }, [searchParams, router]);

  const handleRetry = () => {
    router.push('/settings?tab=integrations');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-white via-[#fafbf9] to-[#f0f7e8] flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <CardTitle className="flex items-center justify-center gap-2">
            {status === 'loading' && <Loader2 className="w-5 h-5 animate-spin" />}
            {status === 'success' && <CheckCircle className="w-5 h-5 text-green-600" />}
            {status === 'error' && <XCircle className="w-5 h-5 text-red-600" />}
            
            {status === 'loading' && 'Connecting Google Drive...'}
            {status === 'success' && 'Connected!'}
            {status === 'error' && 'Connection Failed'}
          </CardTitle>
          <CardDescription>
            {status === 'loading' && 'Completing your Google Drive connection...'}
            {status === 'success' && 'You will be redirected shortly.'}
            {status === 'error' && 'There was a problem connecting your account.'}
          </CardDescription>
        </CardHeader>
        <CardContent className="text-center">
          <p className="text-sm text-gray-600 mb-4">{message}</p>
          
          {status === 'error' && (
            <Button onClick={handleRetry} variant="outline" className="w-full">
              Try Again
            </Button>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

================
File: app/onboarding/first-integration/page.tsx
================
"use client";
import React, { useState, useCallback, useEffect } from "react";
import { motion } from "framer-motion";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import {
  ArrowLeft,
  FileText,
  Upload,
  File,
  CheckCircle,
  Clock,
  AlertCircle,
  X,
} from "lucide-react";
import { useDropzone } from "react-dropzone";

interface UploadedFile {
  id: string;
  name: string;
  size: number;
  type: string;
  status: "uploading" | "processing" | "completed" | "error";
  progress: number;
  error?: string;
}

const supportedFormats = [
  { ext: "PDF", desc: "Documents, reports, manuals" },
  { ext: "DOCX", desc: "Word documents" },
  { ext: "PPTX", desc: "PowerPoint presentations" },
  { ext: "TXT", desc: "Plain text files" },
  { ext: "MD", desc: "Markdown files" },
  { ext: "CSV", desc: "Spreadsheet data" },
];

const organizationTips = [
  "Use descriptive filenames that include keywords",
  "Group related documents in folders",
  "Include version numbers for evolving documents",
  "Add tags to help with future searches",
];

export default function FirstIntegrationPage() {
  const router = useRouter();
  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [companyName, setCompanyName] = useState<string>("");

  useEffect(() => {
    // Fetch user profile to get company name
    fetch("/api/users/profile")
      .then((res) => res.json())
      .then((profile) => {
        if (profile.tenant?.name) {
          setCompanyName(profile.tenant.name);
        }
      })
      .catch((err) => console.error("Failed to fetch profile:", err));
  }, []);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const newFiles: UploadedFile[] = acceptedFiles.map((file) => ({
      id: Math.random().toString(36).substr(2, 9),
      name: file.name,
      size: file.size,
      type: file.type,
      status: "uploading",
      progress: 0,
    }));

    setUploadedFiles((prev) => [...prev, ...newFiles]);

    // Upload files to API
    newFiles.forEach((newFile, index) => {
      const originalFile = acceptedFiles[index];
      if (originalFile) {
        uploadFile(originalFile, newFile.id);
      }
    });
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      "application/pdf": [".pdf"],
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        [".docx"],
      "application/vnd.openxmlformats-officedocument.presentationml.presentation":
        [".pptx"],
      "text/plain": [".txt"],
      "text/markdown": [".md"],
      "text/csv": [".csv"],
    },
    maxSize: 50 * 1024 * 1024, // 50MB
  });

  const uploadFile = async (file: File, fileId: string) => {
    try {
      const formData = new FormData();
      formData.append('file', file);

      // Update to uploading status
      setUploadedFiles((prev) =>
        prev.map((f) =>
          f.id === fileId ? { ...f, status: "uploading", progress: 0 } : f
        )
      );

      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();

      if (response.ok) {
        // Update to completed status
        setUploadedFiles((prev) =>
          prev.map((f) =>
            f.id === fileId
              ? {
                  ...f,
                  status: "completed",
                  progress: 100,
                }
              : f
          )
        );
      } else {
        // Update to error status
        setUploadedFiles((prev) =>
          prev.map((f) =>
            f.id === fileId
              ? {
                  ...f,
                  status: "error",
                  error: result.message || "Upload failed",
                }
              : f
          )
        );
      }
    } catch (error) {
      console.error('Upload error:', error);
      setUploadedFiles((prev) =>
        prev.map((f) =>
          f.id === fileId
            ? {
                ...f,
                status: "error",
                error: "Network error",
              }
            : f
        )
      );
    }
  };

  const removeFile = (fileId: string) => {
    setUploadedFiles((prev) => prev.filter((file) => file.id !== fileId));
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  };

  const getStatusIcon = (status: UploadedFile["status"]) => {
    switch (status) {
      case "uploading":
      case "processing":
        return <Clock className="w-4 h-4 text-blue-500" />;
      case "completed":
        return <CheckCircle className="w-4 h-4 text-[#A3BC02]" />;
      case "error":
        return <AlertCircle className="w-4 h-4 text-red-500" />;
    }
  };

  const completedFiles = uploadedFiles.filter(
    (f) => f.status === "completed"
  ).length;
  const hasFiles = uploadedFiles.length > 0;

  const handleContinue = async () => {
    // Mark first_integration step as completed if any files were uploaded
    if (completedFiles > 0) {
      try {
        await fetch('/api/onboarding/complete-step', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            step: 'first_integration',
            step_data: {
              files_uploaded: completedFiles,
            },
          }),
        });
      } catch (error) {
        console.warn('Failed to mark step as completed:', error);
      }
    }
    
    router.push("/onboarding");
  };

  const handleSkip = async () => {
    try {
      // Mark step as skipped
      await fetch('/api/onboarding/skip-step', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          step: 'first_integration',
        }),
      })
    } catch (error) {
      console.warn('Failed to mark step as skipped')
    }
    
    router.push('/onboarding')
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-white via-[#fafbf9] to-[#f0f7e8] relative overflow-hidden">
      {/* Decorative background elements */}
      <div className="absolute top-20 left-10 w-72 h-72 bg-[#A3BC02]/5 rounded-full blur-3xl pointer-events-none" />
      <div className="absolute bottom-20 right-10 w-96 h-96 bg-[#E1F179]/10 rounded-full blur-3xl pointer-events-none" />

      <div className="relative z-10">
        {/* Header */}
        <motion.div
          className="border-b border-gray-100 bg-white/80 backdrop-blur-sm"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          <div className="max-w-4xl mx-auto px-6 py-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <Button variant="ghost" size="sm" asChild>
                  <Link href="/onboarding" className="flex items-center gap-2">
                    <ArrowLeft className="w-4 h-4" />
                    Back to Setup
                  </Link>
                </Button>
                <div className="h-6 w-px bg-gray-200" />
                <Link
                  href="/"
                  className="text-2xl font-serif text-[#3E4128] hover:text-[#A3BC02] transition-colors"
                >
                  Mono
                  <span className="underline decoration-[#A3BC02] decoration-2 underline-offset-2">
                    l
                  </span>
                  ith
                </Link>
              </div>
              <div className="flex items-center gap-3">
                {companyName && (
                  <>
                    <Badge variant="secondary" className="font-medium">
                      {companyName}
                    </Badge>
                    <div className="h-4 w-px bg-gray-200" />
                  </>
                )}
                <Badge variant="outline">First Integration</Badge>
              </div>
            </div>
          </div>
        </motion.div>

        <div className="max-w-4xl mx-auto px-6 py-12">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.1 }}
          >
            <Card className="border-gray-200 bg-white/80 backdrop-blur-sm shadow-lg shadow-gray-500/10">
              <CardHeader className="text-center pb-6">
                <div className="flex justify-center mb-4">
                  <div className="p-3 bg-[#A3BC02]/10 rounded-full">
                    <FileText className="w-8 h-8 text-[#A3BC02]" />
                  </div>
                </div>
                <CardTitle className="text-3xl font-serif text-[#3E4128]">
                  Connect Your First Data Source
                </CardTitle>
                <CardDescription className="text-lg">
                  Upload a document or connect to a data source to start building your knowledge base.
                </CardDescription>
              </CardHeader>

              <CardContent className="space-y-8">
                {/* Upload Zone */}
                <div
                  {...getRootProps()}
                  className={`
                    border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-all duration-200
                    ${
                      isDragActive
                        ? "border-[#A3BC02] bg-[#A3BC02]/5"
                        : "border-gray-300 hover:border-[#A3BC02] hover:bg-[#A3BC02]/5"
                    }
                  `}
                >
                  <input {...getInputProps()} />
                  <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  {isDragActive ? (
                    <p className="text-lg text-[#A3BC02] font-medium">
                      Drop your files here...
                    </p>
                  ) : (
                    <div>
                      <p className="text-lg font-medium text-gray-700 mb-2">
                        Drag & drop files here, or click to browse
                      </p>
                      <p className="text-sm text-gray-500">
                        Maximum file size: 50MB per file
                      </p>
                    </div>
                  )}
                </div>

                {/* Supported Formats */}
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-medium text-[#3E4128] mb-3">
                      Supported Formats
                    </h4>
                    <div className="space-y-2">
                      {supportedFormats.map((format, index) => (
                        <div
                          key={index}
                          className="flex items-center gap-3 p-2 bg-gray-50 rounded"
                        >
                          <Badge
                            variant="outline"
                            className="text-xs font-mono"
                          >
                            {format.ext}
                          </Badge>
                          <span className="text-sm text-gray-600">
                            {format.desc}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium text-[#3E4128] mb-3">
                      Organization Tips
                    </h4>
                    <ul className="space-y-2">
                      {organizationTips.map((tip, index) => (
                        <li
                          key={index}
                          className="flex items-start gap-2 text-sm text-gray-600"
                        >
                          <div className="w-1.5 h-1.5 bg-[#A3BC02] rounded-full mt-2 flex-shrink-0" />
                          {tip}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>

                {/* Uploaded Files */}
                {hasFiles && (
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <h4 className="font-medium text-[#3E4128]">
                        Uploaded Files ({completedFiles}/{uploadedFiles.length}{" "}
                        processed)
                      </h4>
                    </div>

                    <div className="space-y-3 max-h-64 overflow-y-auto">
                      {uploadedFiles.map((file) => (
                        <motion.div
                          key={file.id}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg"
                        >
                          <File className="w-5 h-5 text-gray-500 flex-shrink-0" />

                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-1">
                              <p className="text-sm font-medium text-gray-900 truncate">
                                {file.name}
                              </p>
                              {getStatusIcon(file.status)}
                            </div>

                            <div className="flex items-center gap-4">
                              <span className="text-xs text-gray-500">
                                {formatFileSize(file.size)}
                              </span>

                              {file.status === "uploading" && (
                                <div className="flex-1 max-w-32">
                                  <Progress
                                    value={file.progress}
                                    className="h-1"
                                  />
                                </div>
                              )}

                              <Badge
                                variant={
                                  file.status === "completed"
                                    ? "default"
                                    : file.status === "error"
                                    ? "destructive"
                                    : "secondary"
                                }
                                className="text-xs"
                              >
                                {file.status === "uploading"
                                  ? "Uploading..."
                                  : file.status === "processing"
                                  ? "Processing..."
                                  : file.status === "completed"
                                  ? "Ready"
                                  : "Error"}
                              </Badge>
                            </div>

                            {file.error && (
                              <p className="text-xs text-red-600 mt-1">
                                {file.error}
                              </p>
                            )}
                          </div>

                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => removeFile(file.id)}
                            className="h-8 w-8 p-0 hover:bg-red-50 hover:text-red-600"
                          >
                            <X className="w-4 h-4" />
                          </Button>
                        </motion.div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Continue Button */}
                <div className="flex gap-3 pt-6">
                  <Button
                    variant="outline"
                    className="flex-1"
                    onClick={handleSkip}
                  >
                    Skip for Now
                  </Button>
                  <Button
                    onClick={handleContinue}
                    disabled={hasFiles && completedFiles === 0}
                    className="flex-1 bg-[#A3BC02] hover:bg-[#8BA000] text-white"
                  >
                    {completedFiles > 0
                      ? `Continue with ${completedFiles} files`
                      : "Continue"}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </div>
    </div>
  );
}

================
File: app/onboarding/invite-team/page.tsx
================
"use client";

import React, { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { ArrowLeft, Users, Mail, Plus, X, Send, UserPlus, Clock, AlertCircle } from 'lucide-react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'

const teamInviteSchema = z.object({
  emails: z.string().min(1, 'Please add at least one email address'),
  role: z.enum(['member', 'admin']),
  message: z.string().max(500, 'Message must be less than 500 characters').optional(),
})

type TeamInviteFormData = z.infer<typeof teamInviteSchema>

export default function InviteTeamPage() {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(false)
  const [emailList, setEmailList] = useState<string[]>([])
  const [emailInput, setEmailInput] = useState('')
  const [error, setError] = useState<string | null>(null)
  const [isCheckingRole, setIsCheckingRole] = useState(true)
  const [companyName, setCompanyName] = useState<string>('')

  const {
    register,
    handleSubmit,
    setValue,
    watch,
    formState: { errors }
  } = useForm<TeamInviteFormData>({
    resolver: zodResolver(teamInviteSchema),
    mode: 'onChange',
    defaultValues: {
      role: 'member'
    }
  })

  // Check if user is admin
  useEffect(() => {
    const checkUserRole = async () => {
      try {
        const response = await fetch('/api/users/profile')
        if (response.ok) {
          const profile = await response.json()
          if (profile.role !== 'admin') {
            // Non-admin users should not access this page
            router.push('/onboarding')
          } else {
            // Store company name for display
            setCompanyName(profile.tenant?.name || '')
          }
        } else {
          // If profile fetch fails, redirect to onboarding
          router.push('/onboarding')
        }
      } catch (error) {
        console.error('Failed to check user role:', error)
        router.push('/onboarding')
      } finally {
        setIsCheckingRole(false)
      }
    }

    checkUserRole()
  }, [router])

  const addEmail = () => {
    if (emailInput.trim() && !emailList.includes(emailInput.trim())) {
      const newList = [...emailList, emailInput.trim()]
      setEmailList(newList)
      setValue('emails', newList.join(', '))
      setEmailInput('')
    }
  }

  const removeEmail = (email: string) => {
    const newList = emailList.filter(e => e !== email)
    setEmailList(newList)
    setValue('emails', newList.join(', '))
  }

  const handleBulkEmailInput = (value: string) => {
    // Parse comma-separated or line-separated emails
    const emails = value
      .split(/[,\n]/)
      .map(email => email.trim())
      .filter(email => email && email.includes('@'))

    setEmailList(emails)
    setValue('emails', emails.join(', '))
  }

  const onSubmit = async (data: TeamInviteFormData) => {
    if (emailList.length === 0) {
      setError('Please add at least one email address')
      return
    }

    setIsLoading(true)
    setError(null)
    
    try {
      // Send invites via API
      const inviteResponse = await fetch('/api/invites/send', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          emails: emailList,
          role: data.role,
          message: data.message,
        }),
      })

      const inviteResult = await inviteResponse.json()

      if (!inviteResponse.ok) {
        // Handle specific error cases
        if (inviteResponse.status === 429) {
          throw new Error('Invite quota exceeded. Please try again later.')
        } else if (inviteResponse.status === 403) {
          throw new Error('You do not have permission to send invites.')
        } else {
          throw new Error(inviteResult.message || inviteResult.error || 'Failed to send invites')
        }
      }

      // Mark invite_team step as completed
      const completeResponse = await fetch('/api/onboarding/complete-step', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          step: 'invite_team',
          step_data: {
            invites_sent: inviteResult.invited,
            failed_invites: inviteResult.failed,
          },
        }),
      })

      if (!completeResponse.ok) {
        console.warn('Failed to mark step as completed')
      }

      // Handle partial failures
      if (inviteResult.failed && inviteResult.failed.length > 0) {
        const failedEmails = inviteResult.failed.map((f: any) => Object.keys(f)[0]).join(', ')
        setError(`Some invites failed: ${failedEmails}`)
        // Still proceed if some succeeded
        if (inviteResult.invited > 0) {
          setTimeout(() => router.push('/onboarding'), 2000)
        }
      } else {
        // All invites sent successfully
        router.push('/onboarding')
      }
    } catch (error) {
      console.error('Error sending invites:', error)
      setError(error instanceof Error ? error.message : 'Failed to send invites')
    } finally {
      setIsLoading(false)
    }
  }

  const handleSkip = async () => {
    setError(null)
    setIsLoading(true)
    
    try {
      // Mark step as skipped
      const response = await fetch('/api/onboarding/skip-step', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          step: 'invite_team',
        }),
      })
      
      if (!response.ok) {
        console.warn('Failed to mark step as skipped')
      }
    } catch (error) {
      console.warn('Failed to mark step as skipped:', error)
    } finally {
      setIsLoading(false)
    }
    
    router.push('/onboarding')
  }

  // Show loading state while checking role
  if (isCheckingRole) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-white via-[#fafbf9] to-[#f0f7e8] flex items-center justify-center">
        <div className="text-center">
          <div className="w-12 h-12 border-4 border-[#A3BC02] border-t-transparent rounded-full animate-spin mx-auto mb-4" />
          <p className="text-gray-600">Checking permissions...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-white via-[#fafbf9] to-[#f0f7e8] relative overflow-hidden">
      {/* Decorative background elements */}
      <div className="absolute top-20 left-10 w-72 h-72 bg-[#A3BC02]/5 rounded-full blur-3xl pointer-events-none" />
      <div className="absolute bottom-20 right-10 w-96 h-96 bg-[#E1F179]/10 rounded-full blur-3xl pointer-events-none" />

      <div className="relative z-10">
        {/* Header */}
        <motion.div
          className="border-b border-gray-100 bg-white/80 backdrop-blur-sm"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          <div className="max-w-4xl mx-auto px-6 py-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <Button variant="ghost" size="sm" asChild>
                  <Link href="/onboarding" className="flex items-center gap-2">
                    <ArrowLeft className="w-4 h-4" />
                    Back to Setup
                  </Link>
                </Button>
                <div className="h-6 w-px bg-gray-200" />
                <Link href="/" className="text-2xl font-serif text-[#3E4128] hover:text-[#A3BC02] transition-colors">
                  Mono<span className="underline decoration-[#A3BC02] decoration-2 underline-offset-2">l</span>ith
                </Link>
              </div>
              <div className="flex items-center gap-3">
                {companyName && (
                  <>
                    <Badge variant="secondary" className="font-medium">
                      {companyName}
                    </Badge>
                    <div className="h-4 w-px bg-gray-200" />
                  </>
                )}
                <Badge variant="outline">Invite Team</Badge>
              </div>
            </div>
          </div>
        </motion.div>

        <div className="max-w-2xl mx-auto px-6 py-12">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.1 }}
          >
            <Card className="border-gray-200 bg-white/80 backdrop-blur-sm shadow-lg shadow-gray-500/10">
              <CardHeader className="text-center pb-6">
                <div className="flex justify-center mb-4">
                  <div className="p-3 bg-[#A3BC02]/10 rounded-full">
                    <Users className="w-8 h-8 text-[#A3BC02]" />
                  </div>
                </div>
                <CardTitle className="text-3xl font-serif text-[#3E4128]">Invite Your Team</CardTitle>
                <CardDescription className="text-lg">
                  Get your team started by sending them invitations to join {companyName ? `${companyName}'s` : 'your'} workspace.
                </CardDescription>
              </CardHeader>

              <CardContent>
                {/* Error Display */}
                {error && (
                  <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                    <div className="flex items-center gap-2">
                      <AlertCircle className="w-4 h-4 text-red-600" />
                      <p className="text-sm text-red-700">{error}</p>
                    </div>
                  </div>
                )}

                <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
                  {/* Email Input */}
                  <div className="space-y-3">
                    <Label>Team Member Emails</Label>

                    {/* Single email input */}
                    <div className="flex gap-2">
                      <Input
                        placeholder="Enter email address"
                        value={emailInput}
                        onChange={(e) => setEmailInput(e.target.value)}
                        onKeyPress={(e) => {
                          if (e.key === 'Enter') {
                            e.preventDefault()
                            addEmail()
                          }
                        }}
                        className="flex-1"
                      />
                      <Button
                        type="button"
                        onClick={addEmail}
                        disabled={!emailInput.trim()}
                        className="bg-[#A3BC02] hover:bg-[#8BA000] text-white"
                      >
                        <Plus className="w-4 h-4" />
                      </Button>
                    </div>

                    <Separator className="my-4" />

                    {/* Bulk email input */}
                    <div className="space-y-2">
                      <Label htmlFor="bulkEmails">Or paste multiple emails (comma or line separated)</Label>
                      <Textarea
                        id="bulkEmails"
                        placeholder="john@company.com, jane@company.com&#10;mike@company.com"
                        rows={3}
                        onChange={(e) => handleBulkEmailInput(e.target.value)}
                        className="resize-none"
                      />
                    </div>

                    {/* Email list */}
                    {emailList.length > 0 && (
                      <div className="space-y-2">
                        <Label>Inviting ({emailList.length} people):</Label>
                        <div className="max-h-32 overflow-y-auto space-y-1 p-3 bg-gray-50 rounded-lg">
                          {emailList.map((email, index) => (
                            <div key={index} className="flex items-center justify-between bg-white px-3 py-2 rounded border">
                              <span className="text-sm">{email}</span>
                              <Button
                                type="button"
                                variant="ghost"
                                size="sm"
                                onClick={() => removeEmail(email)}
                                className="h-6 w-6 p-0 hover:bg-red-50 hover:text-red-600"
                              >
                                <X className="w-3 h-3" />
                              </Button>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Role Selection */}
                  <div className="space-y-2">
                    <Label>Role for invited members</Label>
                    <Select onValueChange={(value: 'member' | 'admin') => setValue('role', value)} defaultValue="member">
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="member">
                          <div className="flex flex-col items-start">
                            <span>Member</span>
                            <span className="text-xs text-gray-500">Can access and search content</span>
                          </div>
                        </SelectItem>
                        <SelectItem value="admin">
                          <div className="flex flex-col items-start">
                            <span>Admin</span>
                            <span className="text-xs text-gray-500">Can manage team and settings</span>
                          </div>
                        </SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Custom Message */}
                  <div className="space-y-2">
                    <Label htmlFor="message">Custom Message (Optional)</Label>
                    <Textarea
                      id="message"
                      placeholder="Add a personal message to your invitation..."
                      rows={3}
                      {...register('message')}
                      className="resize-none"
                    />
                    <p className="text-sm text-gray-500">
                      {watch('message')?.length || 0}/500 characters
                    </p>
                  </div>

                  {/* Preview */}
                  {emailList.length > 0 && (
                    <div className="p-4 bg-[#A3BC02]/5 border border-[#A3BC02]/20 rounded-lg">
                      <h4 className="font-medium text-[#3E4128] mb-2">Invitation Preview</h4>
                      <div className="text-sm text-gray-600 space-y-1">
                        <p>• {emailList.length} people will be invited</p>
                        <p>• They will be assigned the <strong>{watch('role')}</strong> role</p>
                        <p>• Invitations expire in 7 days</p>
                      </div>
                    </div>
                  )}

                  {/* Submit Buttons */}
                  <div className="flex gap-3 pt-6">
                    <Button
                      type="button"
                      variant="outline"
                      className="flex-1"
                      onClick={handleSkip}
                    >
                      Skip for Now
                    </Button>
                    <Button
                      type="submit"
                      disabled={emailList.length === 0 || isLoading}
                      className="flex-1 bg-[#A3BC02] hover:bg-[#8BA000] text-white"
                    >
                      {isLoading ? (
                        <div className="flex items-center gap-2">
                          <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                          Sending Invites...
                        </div>
                      ) : (
                        <div className="flex items-center gap-2">
                          <Send className="w-4 h-4" />
                          Send Invites ({emailList.length})
                        </div>
                      )}
                    </Button>
                  </div>
                </form>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </div>
    </div>
  )
}

================
File: app/onboarding/page.tsx
================
"use client";

import React, { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  CheckCircle,
  Circle,
  Clock,
  Lock,
  User,
  Building2,
  Users,
  FileText,
  Settings,
  ArrowRight,
  SkipBackIcon as Skip,
  Sparkles,
  Trophy,
  Rocket,
  Zap,
} from "lucide-react";

interface OnboardingStep {
  step: string;
  title: string;
  description: string;
  required: boolean;
  order: number;
  estimated_time_minutes: number;
  status: string;
  completed_at?: string;
  step_data?: any;
}

interface OnboardingStatus {
  steps: OnboardingStep[];
  progress: {
    completion_percentage: number;
    completed: boolean;
    next_step: string | null;
  };
  recommendations: any[];
  show_banner: boolean;
  tenant_created_days_ago: number;
}

interface UserProfile {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
  role: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
  avatar_url?: string;
  tenant: any;
}

const stepIconMap: Record<string, any> = {
  invite_team: Users,
  first_integration: FileText,
};

const stepHrefMap: Record<string, string> = {
  invite_team: "/onboarding/invite-team",
  first_integration: "/onboarding/first-integration",
};

export default function OnboardingDashboard() {
  const [onboardingStatus, setOnboardingStatus] =
    useState<OnboardingStatus | null>(null);
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchOnboardingData();
  }, []);

  const fetchOnboardingData = async () => {
    try {
      setIsLoading(true);
      const [statusResponse, profileResponse] = await Promise.all([
        fetch("/api/onboarding/status"),
        fetch("/api/users/profile"),
      ]);

      if (statusResponse.ok) {
        const statusData = await statusResponse.json();
        setOnboardingStatus(statusData);
      } else {
        console.error("Failed to fetch onboarding status");
      }

      if (profileResponse.ok) {
        const profileData = await profileResponse.json();
        setUserProfile(profileData);
      } else {
        console.error("Failed to fetch user profile");
      }
    } catch (error) {
      console.error("Error fetching onboarding data:", error);
      setError("Failed to load onboarding data");
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-white via-[#fafbf9] to-[#f0f7e8] flex items-center justify-center">
        <motion.div
          className="text-center"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5 }}
        >
          <div className="relative mb-6">
            <div className="w-12 h-12 border-3 border-[#A3BC02]/20 border-t-[#A3BC02] rounded-full animate-spin mx-auto" />
            <Sparkles className="w-5 h-5 text-[#A3BC02] absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2" />
          </div>
          <p className="text-gray-600">Setting up your workspace...</p>
        </motion.div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-white via-[#fafbf9] to-[#f0f7e8] flex items-center justify-center">
        <motion.div
          className="text-center max-w-md"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <p className="text-red-600 mb-4">{error}</p>
          <Button
            onClick={fetchOnboardingData}
            className="bg-[#A3BC02] hover:bg-[#8BA000] text-white"
          >
            Try Again
          </Button>
        </motion.div>
      </div>
    );
  }

  const steps = onboardingStatus?.steps || [];
  const completedSteps = steps.filter(
    (step) => step.status === "completed"
  ).length;
  const totalSteps = steps.length;
  const progressPercentage =
    totalSteps > 0 ? (completedSteps / totalSteps) * 100 : 0;
  const isComplete = completedSteps === totalSteps && totalSteps > 0;

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "completed":
        return <CheckCircle className="w-5 h-5 text-[#A3BC02]" />;
      case "in_progress":
        return <Clock className="w-5 h-5 text-blue-500" />;
      case "skipped":
        return <Skip className="w-5 h-5 text-gray-400" />;
      default:
        return <Circle className="w-5 h-5 text-gray-300" />;
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "completed":
        return (
          <Badge className="bg-[#A3BC02]/10 text-[#A3BC02] border-[#A3BC02]/20">
            Completed
          </Badge>
        );
      case "in_progress":
        return (
          <Badge className="bg-blue-50 text-blue-600 border-blue-200">
            In Progress
          </Badge>
        );
      case "skipped":
        return <Badge variant="secondary">Skipped</Badge>;
      default:
        return <Badge variant="outline">Pending</Badge>;
    }
  };

  // Get next step from backend response
  const nextStepId = onboardingStatus?.progress?.next_step;
  const nextStep = nextStepId ? steps.find(step => step.step === nextStepId) : null;
  const nextStepWithIcon = nextStep
    ? {
        ...nextStep,
        icon: stepIconMap[nextStep.step] || User,
        href: stepHrefMap[nextStep.step] || "/onboarding",
      }
    : null;

  return (
    <div className="min-h-screen bg-gradient-to-br from-white via-[#fafbf9] to-[#f0f7e8] relative overflow-hidden">
      {/* Decorative background elements */}
      <div className="absolute top-20 left-10 w-72 h-72 bg-[#A3BC02]/5 rounded-full blur-3xl pointer-events-none" />
      <div className="absolute bottom-20 right-10 w-96 h-96 bg-[#E1F179]/10 rounded-full blur-3xl pointer-events-none" />
      <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[600px] h-[600px] bg-gradient-radial from-[#A3BC02]/3 to-transparent rounded-full blur-2xl pointer-events-none" />

      <div className="relative z-10">
        {/* Header */}
        <motion.div
          className="border-b border-gray-100 bg-white/80 backdrop-blur-sm"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          <div className="max-w-4xl mx-auto px-6 py-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <Link
                  href="/"
                  className="text-2xl font-serif text-[#3E4128] hover:text-[#A3BC02] transition-colors"
                >
                  Mono
                  <span className="underline decoration-[#A3BC02] decoration-2 underline-offset-2">
                    l
                  </span>
                  ith
                </Link>
                {userProfile?.tenant?.name && (
                  <>
                    <div className="h-6 w-px bg-gray-200" />
                    <Badge
                      variant="secondary"
                      className="font-medium flex items-center gap-2"
                    >
                      <Building2 className="w-3 h-3" />
                      {userProfile.tenant.name}
                    </Badge>
                  </>
                )}
              </div>
              <Button variant="outline" asChild>
                <Link href="/dashboard">Skip to Dashboard</Link>
              </Button>
            </div>
          </div>
        </motion.div>

        <div className="max-w-4xl mx-auto px-6 py-16">
          {/* Welcome Section */}
          <motion.div
            className="text-center mb-16"
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.1 }}
          >
            <div className="flex items-center justify-center mb-8">
              <Avatar className="w-20 h-20 border-4 border-[#A3BC02]/20">
                {userProfile?.avatar_url ? (
                  <AvatarImage
                    src={userProfile.avatar_url}
                    alt={userProfile.first_name}
                  />
                ) : (
                  <AvatarFallback className="bg-[#A3BC02]/10 text-[#A3BC02] text-xl font-semibold">
                    {userProfile?.first_name?.[0]}
                    {userProfile?.last_name?.[0]}
                  </AvatarFallback>
                )}
              </Avatar>
            </div>

            <h1 className="text-5xl md:text-6xl font-serif text-[#3E4128] mb-6">
              Welcome to Monolith, {userProfile?.first_name || "there"}!
            </h1>
            <p className="text-xl text-gray-600 mb-12 max-w-2xl mx-auto leading-relaxed">
              Let's get you set up with everything you need to start discovering
              and organizing{" "}
              {userProfile?.tenant?.name
                ? `${userProfile.tenant.name}'s`
                : "your team's"}{" "}
              knowledge.
              {isComplete
                ? " You're all set up!"
                : ` Just ${totalSteps - completedSteps} step${
                    totalSteps - completedSteps === 1 ? "" : "s"
                  } to go.`}
            </p>

            {/* Simple Progress */}
            {!isComplete && (
              <div className="max-w-md mx-auto mb-8">
                <Progress value={progressPercentage} className="h-2" />
                <p className="text-sm text-gray-500 mt-2">
                  {completedSteps} of {totalSteps} completed
                </p>
              </div>
            )}
          </motion.div>

          {/* Main Content */}
          {isComplete ? (
            // Completion State
            <motion.div
              key="complete"
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              transition={{ duration: 0.6 }}
              className="text-center"
            >
              <Card className="border-[#A3BC02]/20 bg-gradient-to-r from-[#A3BC02]/10 to-[#E1F179]/10 backdrop-blur-sm shadow-xl shadow-[#A3BC02]/20 max-w-2xl mx-auto">
                <CardContent className="py-16">
                  <Trophy className="w-24 h-24 text-[#A3BC02] mx-auto mb-8" />
                  <h2 className="text-4xl font-serif text-[#3E4128] mb-4">
                    You're All Set!
                  </h2>
                  <p className="text-lg text-gray-600 mb-10 max-w-md mx-auto">
                    Your workspace is ready. Time to start discovering and
                    organizing knowledge with your team.
                  </p>
                  <Button
                    asChild
                    className="bg-[#A3BC02] hover:bg-[#8BA000] text-white shadow-lg hover:shadow-xl transition-all duration-200"
                    size="lg"
                  >
                    <Link
                      href="/dashboard"
                      className="flex items-center gap-3 text-lg px-8 py-6"
                    >
                      <Rocket className="w-5 h-5" />
                      Launch Dashboard
                    </Link>
                  </Button>
                </CardContent>
              </Card>
            </motion.div>
          ) : (
            // Steps State
            <motion.div
              key="steps"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.6 }}
            >
              {/* Next Step Highlight */}
              {nextStepWithIcon && (
                <motion.div
                  className="mb-12"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6, delay: 0.2 }}
                >
                  <div className="text-center mb-6">
                    <Badge className="bg-[#A3BC02]/10 text-[#A3BC02] border-[#A3BC02]/20 px-4 py-2">
                      <Zap className="w-4 h-4 mr-2" />
                      Next Step
                    </Badge>
                  </div>
                  <Card className="border-[#A3BC02]/30 bg-gradient-to-r from-[#A3BC02]/5 to-[#E1F179]/5 backdrop-blur-sm shadow-xl shadow-[#A3BC02]/20 max-w-2xl mx-auto">
                    <CardContent className="p-8">
                      <div className="flex items-center gap-6 mb-6">
                        <div className="p-4 bg-[#A3BC02]/10 rounded-2xl">
                          <nextStepWithIcon.icon className="w-8 h-8 text-[#A3BC02]" />
                        </div>
                        <div className="flex-1">
                          <h3 className="text-2xl font-serif text-[#3E4128] mb-2">
                            {nextStepWithIcon.title}
                          </h3>
                          <p className="text-gray-600 text-lg leading-relaxed">
                            {nextStepWithIcon.description}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4 text-sm text-gray-500">
                          <div className="flex items-center gap-1">
                            <Clock className="w-4 h-4" />
                            {nextStepWithIcon.estimated_time_minutes} minutes
                          </div>
                          {nextStepWithIcon.required && (
                            <Badge variant="outline" className="text-xs">
                              Required
                            </Badge>
                          )}
                        </div>
                        <Button
                          asChild
                          className="bg-[#A3BC02] hover:bg-[#8BA000] text-white shadow-lg hover:shadow-xl transition-all duration-200"
                          size="lg"
                        >
                          <Link
                            href={nextStepWithIcon.href}
                            className="flex items-center gap-2 px-8"
                          >
                            Get Started
                            <ArrowRight className="w-4 h-4" />
                          </Link>
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              )}

              {/* All Steps Overview */}
              <div className="grid gap-6 md:grid-cols-2 max-w-4xl mx-auto">
                {steps.map((step, index) => {
                  const StepIcon = stepIconMap[step.step] || User;
                  const stepHref = stepHrefMap[step.step] || "/onboarding";
                  const isCompleted = step.status === "completed";
                  const isNext = step.step === nextStepId;

                  return (
                    <motion.div
                      key={step.step}
                      initial={{ opacity: 0, y: 30 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.6, delay: 0.1 * (index + 3) }}
                    >
                      <Card
                        className={`
                          h-full transition-all duration-300 backdrop-blur-sm
                          ${
                            isCompleted
                              ? "border-[#A3BC02]/30 bg-[#A3BC02]/5 shadow-lg shadow-[#A3BC02]/10"
                              : isNext
                              ? "border-[#A3BC02]/20 bg-white/90 shadow-lg hover:shadow-xl hover:scale-[1.02]"
                              : "border-gray-200 bg-white/80 shadow-md hover:shadow-lg hover:scale-[1.01]"
                          }
                        `}
                      >
                        <CardHeader className="pb-4">
                          <div className="flex items-center gap-4">
                            <div
                              className={`
                                p-3 rounded-xl
                                ${
                                  isCompleted
                                    ? "bg-[#A3BC02]/10"
                                    : "bg-gray-100"
                                }
                              `}
                            >
                              <StepIcon
                                className={`w-6 h-6 ${
                                  isCompleted
                                    ? "text-[#A3BC02]"
                                    : "text-gray-500"
                                }`}
                              />
                            </div>
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-1">
                                {isCompleted && (
                                  <CheckCircle className="w-5 h-5 text-[#A3BC02]" />
                                )}
                                <CardTitle className="text-lg text-[#3E4128]">
                                  {step.title}
                                </CardTitle>
                              </div>
                              <div className="flex items-center gap-2">
                                {step.required && (
                                  <Badge variant="outline" className="text-xs">
                                    Required
                                  </Badge>
                                )}
                                {step.step === "invite_team" &&
                                  userProfile?.role !== "admin" && (
                                    <Badge
                                      variant="outline"
                                      className="text-xs"
                                    >
                                      Admin Only
                                    </Badge>
                                  )}
                              </div>
                            </div>
                          </div>
                        </CardHeader>
                        <CardContent>
                          <CardDescription className="mb-6 text-base leading-relaxed">
                            {step.description}
                          </CardDescription>

                          {isCompleted ? (
                            <div className="space-y-3">
                              <div className="flex items-center gap-2 text-sm text-[#A3BC02]">
                                <CheckCircle className="w-4 h-4" />
                                Completed
                              </div>
                              <Button
                                variant="outline"
                                size="sm"
                                asChild
                                className="w-full"
                              >
                                <Link href={stepHref}>Review Settings</Link>
                              </Button>
                            </div>
                          ) : (
                            <div className="space-y-3">
                              <div className="flex items-center gap-2 text-sm text-gray-500">
                                <Clock className="w-4 h-4" />
                                {step.estimated_time_minutes} minutes
                              </div>
                              <Button
                                size="sm"
                                asChild
                                className={`
                                  w-full
                                  ${
                                    isNext
                                      ? "bg-[#A3BC02] hover:bg-[#8BA000] text-white"
                                      : "bg-white hover:bg-gray-50 text-[#3E4128] border border-gray-200"
                                  }
                                `}
                              >
                                <Link href={stepHref}>
                                  {isNext ? "Start Now" : "Set Up Later"}
                                </Link>
                              </Button>
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    </motion.div>
                  );
                })}
              </div>

              {/* Role-specific messaging */}
              {userProfile?.role !== "admin" &&
                steps.some((s) => s.step === "invite_team") && (
                  <motion.div
                    className="mt-12 text-center"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: 0.5 }}
                  >
                    <Card className="border-blue-200 bg-blue-50/50 backdrop-blur-sm max-w-2xl mx-auto">
                      <CardContent className="py-6">
                        <p className="text-blue-700">
                          <strong>Team invitations</strong> are managed by your
                          workspace admin. Focus on connecting your first source
                          to get started!
                        </p>
                      </CardContent>
                    </Card>
                  </motion.div>
                )}
            </motion.div>
          )}
        </div>
      </div>
    </div>
  );
}

================
File: app/privacy-policy/page.tsx
================
import Header from "@/components/landing/Header";
import Footer from "@/components/landing/Footer";

const toc = [
  { id: "introduction", label: "Introduction" },
  { id: "scope", label: "Who This Policy Applies To" },
  { id: "controller", label: "Data Controller Information" },
  { id: "data-collected", label: "Information We Collect" },
  { id: "use-of-data", label: "How We Use Your Data" },
  { id: "lawful-bases", label: "Lawful Bases for Processing" },
  { id: "data-sharing", label: "Data Sharing & Subprocessors" },
  { id: "transfers", label: "International Data Transfers" },
  { id: "retention", label: "Data Retention" },
  { id: "cookies", label: "Cookies & Analytics" },
  { id: "your-rights", label: "Your Rights Under GDPR" },
  { id: "security", label: "Data Security" },
  { id: "changes", label: "Changes to this Privacy Policy" },
  { id: "contact", label: "Contact Us" },
];

export default function PrivacyPolicyPage() {
  return (
    <div className="min-h-dvh">
      <Header />

      <main className="pt-24 pb-16">
        <div className="max-w-4xl mx-auto px-6">
          <div className="bg-white rounded-lg shadow-sm border border-gray-100 p-8 md:p-12">
            <h1 className="text-5xl md:text-6xl font-serif text-custom-dark-green mb-4 leading-tight">
              Privacy Policy
            </h1>
            <p className="text-sm text-gray-500 mb-12">
              Last updated:{" "}
              {new Date().toLocaleDateString("en-US", {
                month: "long",
                day: "numeric",
                year: "numeric",
              })}
            </p>

            {/* Table of Contents */}
            <div className="mb-12 bg-gray-50 rounded-lg p-8 border border-gray-100">
              <h2 className="text-2xl font-serif text-custom-dark-green mb-6">
                Table of Contents
              </h2>
              <ul className="grid md:grid-cols-2 gap-2">
                {toc.map((section) => (
                  <li key={section.id}>
                    <a
                      href={`#${section.id}`}
                      className="hover:text-[#A3BC02] text-custom-dark-green underline-offset-2 underline focus:text-custom-dark-green focus:underline transition-all duration-150 ease-in-out text-sm font-medium"
                    >
                      {section.label}
                    </a>
                  </li>
                ))}
              </ul>
            </div>

            <div className="prose prose-lg max-w-none space-y-10">
              {/* 1. Introduction */}
              <section>
                <h2
                  id="introduction"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  1. Introduction
                </h2>
                <p className="text-gray-700 leading-relaxed">
                  Welcome to Monolith ("Monolith", "we", "our", or "us"). This
                  Privacy Policy explains how we collect, use, store, and
                  protect personal data when you or your organization use our
                  website at www.monolith.life and our cloud-based SaaS platform
                  and related services ("Service"). By using the Service, you
                  agree to this Privacy Policy. If you do not agree, please do
                  not use our Service.
                </p>
              </section>

              {/* 2. Who This Policy Applies To */}
              <section>
                <h2
                  id="scope"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  2. Who This Policy Applies To
                </h2>
                <p className="text-gray-700 leading-relaxed">
                  This Privacy Policy applies to business representatives,
                  administrators, and users who access or use the Service on
                  behalf of a company or other organization. The Service is not
                  intended for individual consumers or children under 18.
                </p>
              </section>

              {/* 3. Data Controller */}
              <section>
                <h2
                  id="controller"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  3. Data Controller Information
                </h2>
                <div className="text-gray-700 leading-relaxed">
                  <p>
                    Monolith Inc.
                    <br />
                    Email:{" "}
                    <a
                      href="mailto:info@monolith.life"
                      className="text-[#A3BC02] hover:underline"
                    >
                      info@monolith.life
                    </a>
                  </p>
                </div>
              </section>

              {/* 4. Data We Collect */}
              <section>
                <h2
                  id="data-collected"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  4. Information We Collect
                </h2>
                <ul className="space-y-4 text-gray-700">
                  <li>
                    <strong className="text-custom-dark-green">
                      Account Information:
                    </strong>{" "}
                    Name, business email, company name, role, and login
                    credentials when you register or are invited to the Service.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Business Data:
                    </strong>{" "}
                    Documents, files, messages, or other content uploaded,
                    submitted, or generated through the Service ("User
                    Content").
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Usage Data:
                    </strong>{" "}
                    Information about how you use the Service, including access
                    logs, actions taken, device/browser type, IP address, and
                    general location (country/city).
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Support & Communications:
                    </strong>{" "}
                    Information you provide when you contact us, request
                    support, or otherwise communicate with us.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Cookies & Tracking:
                    </strong>{" "}
                    We use cookies and similar technologies to operate the
                    Service, understand usage, and improve performance. For
                    details, see Section 10.
                  </li>
                </ul>
              </section>

              {/* 5. How We Use Your Data */}
              <section>
                <h2
                  id="use-of-data"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  5. How We Use Your Data
                </h2>
                <ul className="space-y-4 text-gray-700">
                  <li>
                    <strong className="text-custom-dark-green">
                      Provide the Service:
                    </strong>{" "}
                    To operate, maintain, and provide all features of the
                    Service to your organization.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Account Management:
                    </strong>{" "}
                    To create and manage user accounts, authenticate access, and
                    communicate about your account.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Support & Security:
                    </strong>{" "}
                    To respond to requests, prevent fraud or misuse, and ensure
                    the security and integrity of the Service.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Product Improvement:
                    </strong>{" "}
                    To analyze usage and improve the Service, including
                    troubleshooting, analytics, and product development.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Legal & Compliance:
                    </strong>{" "}
                    To comply with legal obligations, enforce agreements, and
                    protect the rights of Monolith, our users, and others.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Marketing:
                    </strong>{" "}
                    To send business communications about new features or
                    updates. You may opt out of non-essential communications at
                    any time.
                  </li>
                </ul>
              </section>

              {/* 6. Lawful Bases for Processing */}
              <section>
                <h2
                  id="lawful-bases"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  6. Lawful Bases for Processing
                </h2>
                <ul className="space-y-4 text-gray-700">
                  <li>
                    <strong className="text-custom-dark-green">
                      Performance of Contract:
                    </strong>{" "}
                    Most processing is necessary to provide the Service under
                    our contract with your organization.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Legitimate Interests:
                    </strong>{" "}
                    For security, analytics, business operations, and
                    communications relevant to your business use.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Legal Obligation:
                    </strong>{" "}
                    Compliance with applicable laws and regulations.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">Consent:</strong>{" "}
                    Where required (e.g., for certain cookies or marketing), we
                    will obtain your consent.
                  </li>
                </ul>
              </section>

              {/* 7. Data Sharing & Subprocessors */}
              <section>
                <h2
                  id="data-sharing"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  7. Data Sharing & Subprocessors
                </h2>
                <ul className="space-y-4 text-gray-700">
                  <li>
                    <strong className="text-custom-dark-green">
                      Service Providers:
                    </strong>{" "}
                    We use trusted subprocessors to host, process, or support
                    the Service (e.g., cloud providers, analytics, email). All
                    subprocessors are contractually bound to protect your data
                    under GDPR terms.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Legal Requests:
                    </strong>{" "}
                    We may disclose data if required by law, regulation, or
                    valid legal process.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Business Transfers:
                    </strong>{" "}
                    In the event of a merger, acquisition, or sale of assets, we
                    may transfer data as part of the transaction. You will be
                    notified of any change in control or data use.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      No Sale of Personal Data:
                    </strong>{" "}
                    We do not sell personal data to third parties.
                  </li>
                </ul>
              </section>

              {/* 8. International Data Transfers */}
              <section>
                <h2
                  id="transfers"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  8. International Data Transfers
                </h2>
                <p className="text-gray-700 leading-relaxed">
                  Your data may be processed in the United States, the European
                  Economic Area (EEA), or other countries where our
                  subprocessors operate. Where data is transferred outside the
                  EEA, we use Standard Contractual Clauses or other approved
                  safeguards to ensure adequate protection under GDPR.
                </p>
              </section>

              {/* 9. Data Retention */}
              <section>
                <h2
                  id="retention"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  9. Data Retention
                </h2>
                <p className="text-gray-700 leading-relaxed">
                  We retain your data as long as necessary to provide the
                  Service and for legitimate business purposes (such as legal
                  compliance, dispute resolution, and enforcing our agreements).
                  Account data and User Content are deleted upon request by your
                  organization or upon termination, subject to legal
                  requirements.
                </p>
              </section>

              {/* 10. Cookies & Analytics */}
              <section>
                <h2
                  id="cookies"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  10. Cookies & Analytics
                </h2>
                <ul className="space-y-4 text-gray-700">
                  <li>
                    <strong className="text-custom-dark-green">
                      Essential Cookies:
                    </strong>{" "}
                    Required for site functionality and security.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Analytics Cookies:
                    </strong>{" "}
                    Used to measure usage and improve the Service. You may opt
                    out of analytics cookies via your browser settings or our
                    cookie banner (where applicable).
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Third-Party Tools:
                    </strong>{" "}
                    We may use third-party analytics or service tools, which
                    process data on our behalf and do not use your information
                    for their own purposes.
                  </li>
                </ul>
              </section>

              {/* 11. Your Rights Under GDPR */}
              <section>
                <h2
                  id="your-rights"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  11. Your Rights Under GDPR
                </h2>
                <ul className="space-y-4 text-gray-700">
                  <li>
                    <strong className="text-custom-dark-green">Access:</strong>{" "}
                    You may request access to your personal data.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Rectification:
                    </strong>{" "}
                    You may correct inaccurate or incomplete data.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">Erasure:</strong>{" "}
                    You may request deletion of your data in certain
                    circumstances.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Restriction:
                    </strong>{" "}
                    You may restrict processing in certain cases.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Portability:
                    </strong>{" "}
                    You may request to receive your data in a portable format.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Objection:
                    </strong>{" "}
                    You may object to processing where we rely on legitimate
                    interests.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Withdraw Consent:
                    </strong>{" "}
                    Where processing is based on consent, you may withdraw
                    consent at any time.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      To exercise these rights, contact us at
                    </strong>{" "}
                    <a
                      href="mailto:info@monolith.life"
                      className="text-[#A3BC02] hover:underline"
                    >
                      info@monolith.life
                    </a>
                    .
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Supervisory Authority:
                    </strong>{" "}
                    You also have the right to lodge a complaint with your local
                    data protection authority.
                  </li>
                </ul>
              </section>

              {/* 12. Security Measures */}
              <section>
                <h2
                  id="security"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  12. Data Security
                </h2>
                <ul className="space-y-4 text-gray-700">
                  <li>
                    We implement appropriate technical and organizational
                    measures to protect your personal data and User Content,
                    including encryption, access controls, secure hosting, and
                    regular security reviews.
                  </li>
                  <li>
                    While we strive to protect your data, no method of
                    transmission or storage is 100% secure.
                  </li>
                </ul>
              </section>

              {/* 13. Changes to this Policy */}
              <section>
                <h2
                  id="changes"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  13. Changes to this Privacy Policy
                </h2>
                <p className="text-gray-700 leading-relaxed">
                  We may update this Privacy Policy from time to time. We will
                  notify you of material changes via email or through the
                  Service. Continued use of the Service after changes take
                  effect constitutes acceptance of the new policy.
                </p>
              </section>

              {/* 14. Contact */}
              <section>
                <h2
                  id="contact"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  14. Contact Us
                </h2>
                <p className="text-gray-700 leading-relaxed">
                  For questions or requests regarding your personal data or this
                  Privacy Policy, please contact us at{" "}
                  <a
                    href="mailto:info@monolith.life"
                    className="text-[#A3BC02] hover:underline"
                  >
                    info@monolith.life
                  </a>
                  .
                </p>
              </section>
            </div>

            <div className="mt-12 pt-8 border-t border-gray-200 text-sm text-gray-500">
              &copy; {new Date().getFullYear()} Monolith Inc. All rights
              reserved.
            </div>
          </div>
        </div>
      </main>

      <Footer />
    </div>
  );
}

================
File: app/signup/loading.tsx
================
export default function Loading() {
  return null
}

================
File: app/signup/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { motion, AnimatePresence } from "framer-motion";
import { useForm, Controller } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Card, CardContent } from "@/components/ui/card";
import { Eye, EyeOff, Building2, XCircle, Loader2, AlertCircle, ShieldAlert } from "lucide-react";
import Link from "next/link";

const companySizes = ["1-10", "11-50", "51-200", "201-500", "500+"];

const industries = [
  "Technology",
  "Healthcare",
  "Finance",
  "Education",
  "Manufacturing",
  "Retail",
  "Consulting",
  "Other",
];

const signupSchema = z
  .object({
    email: z.string().email("Please enter a valid email address"),
    password: z.string().min(8, "Password must be at least 8 characters"),
    confirmPassword: z.string(),
    first_name: z.string().min(2, "First name must be at least 2 characters"),
    last_name: z.string().min(2, "Last name must be at least 2 characters"),
    company_name: z.string().optional(),
    company_size: z.string().optional(),
    industry: z.string().optional(),
    acceptTerms: z
      .boolean()
      .refine((val) => val === true, "You must accept the terms of service"),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  });

type SignupForm = z.infer<typeof signupSchema>;

interface InviteDetails {
  companyName: string;
  inviterName: string;
  email: string;
  role: string;
  customMessage?: string;
}

export default function SignupPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const inviteToken = searchParams.get("invite_token");
  const prefilledEmail = searchParams.get("email");

  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [inviteDetails, setInviteDetails] = useState<InviteDetails | null>(
    null
  );
  const [domainError, setDomainError] = useState<string | null>(null);
  const [passwordStrength, setPasswordStrength] = useState(0);
  const [errorStatusCode, setErrorStatusCode] = useState<number | null>(null);

  const isInviteFlow = !!inviteToken;
  const isNewCompanyFlow = !isInviteFlow;

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
    setValue,
    setError,
    clearErrors,
    control,
  } = useForm<SignupForm>({
    resolver: zodResolver(signupSchema),
    defaultValues: {
      email: prefilledEmail || "",
      acceptTerms: false,
    },
  });

  const watchedPassword = watch("password");
  const watchedEmail = watch("email");

  // Validate invite token on mount
  useEffect(() => {
    if (inviteToken) {
      validateInviteToken();
    }
  }, [inviteToken]);

  // Calculate password strength
  useEffect(() => {
    if (watchedPassword) {
      let strength = 0;
      if (watchedPassword.length >= 8) strength += 25;
      if (/[A-Z]/.test(watchedPassword)) strength += 25;
      if (/[0-9]/.test(watchedPassword)) strength += 25;
      if (/[^A-Za-z0-9]/.test(watchedPassword)) strength += 25;
      setPasswordStrength(strength);
    } else {
      setPasswordStrength(0);
    }
  }, [watchedPassword]);

  // Check domain for existing company (only for new company flow) with debounce
  useEffect(() => {
    if (isNewCompanyFlow && watchedEmail && watchedEmail.includes("@")) {
      const domain = watchedEmail.split("@")[1];
      if (domain && !isGenericDomain(domain)) {
        // Debounce the domain check to avoid too many API calls
        const timeoutId = setTimeout(() => {
          checkDomainExists(domain);
        }, 500); // Wait 500ms after user stops typing
        
        return () => clearTimeout(timeoutId);
      } else {
        setDomainError(null);
      }
    }
  }, [watchedEmail, isNewCompanyFlow]);

  const validateInviteToken = async () => {
    try {
      const response = await fetch(
        `/api/invites/validate?token=${inviteToken}`
      );
      if (response.ok) {
        const details = await response.json();
        setInviteDetails(details);
        setValue("email", details.email);
      } else {
        router.push("/invite?token=" + inviteToken);
      }
    } catch (error) {
      router.push("/invite?token=" + inviteToken);
    }
  };

  const checkDomainExists = async (domain: string) => {
    try {
      const response = await fetch("/api/auth/check-domain", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email: watchedEmail }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.companyExists) {
          setDomainError(
            `A company workspace already exists for ${domain}. Please request an invite from your admin.`
          );
        } else {
          setDomainError(null);
        }
      }
    } catch (error) {
      // Silently handle error
    }
  };

  const isGenericDomain = (domain: string) => {
    const genericDomains = [
      "gmail.com",
      "yahoo.com",
      "hotmail.com",
      "outlook.com",
      "icloud.com",
    ];
    return genericDomains.includes(domain.toLowerCase());
  };

  const onSubmit = async (data: SignupForm) => {
    if (domainError) return;

    // Clear any existing root errors when starting submission
    if (errors.root) {
      clearErrors("root");
    }
    setIsLoading(true);
    
    try {
      // Always use the same signup endpoint, backend handles invite logic
      const endpoint = "/api/auth/signup";
      const payload = isInviteFlow ? { ...data, invite_token: inviteToken } : data;

      const response = await fetch(endpoint, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      const responseData = await response.json();

      if (response.ok && responseData.success) {
        router.push("/onboarding");
      } else {
        // Show the exact error from backend
        setErrorStatusCode(responseData.statusCode || response.status);
        setError("root", {
          message: responseData.message || "Failed to create account",
        });
        setIsLoading(false);
      }
    } catch (error) {
      setError("root", {
        message: "Unable to connect to server. Please try again.",
      });
      setIsLoading(false);
    }
  };

  const getPasswordStrengthColor = () => {
    if (passwordStrength < 50) return "bg-red-500";
    if (passwordStrength < 75) return "bg-yellow-500";
    return "bg-green-500";
  };

  const getPasswordStrengthText = () => {
    if (passwordStrength < 25) return "Very Weak";
    if (passwordStrength < 50) return "Weak";
    if (passwordStrength < 75) return "Good";
    return "Strong";
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-white via-[#fafbf9] to-[#f0f7e8] flex items-center justify-center p-6 relative overflow-hidden">
      {/* Decorative Background Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-[#A3BC02]/5 rounded-full blur-3xl" />
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-[#A3BC02]/3 rounded-full blur-3xl" />
        <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-radial from-[#A3BC02]/2 to-transparent rounded-full blur-2xl" />
      </div>

      <div className="w-full max-w-md relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          {/* Header */}
          <div className="text-center mb-8">
            <Link href="/" className="inline-block mb-6">
              <div className="text-2xl font-serif text-custom-dark-green">
                Mono<span className="underline decoration-[#A3BC02]">l</span>ith
              </div>
            </Link>

            <h1 className="text-3xl font-serif text-custom-dark-green mb-2">
              {isInviteFlow ? "Join Your Team" : "Create Your Account"}
            </h1>

            <p className="text-gray-600">
              {isInviteFlow
                ? `You've been invited to join ${
                    inviteDetails?.companyName || "a team"
                  }`
                : "Start your journey with intelligent content discovery"}
            </p>
          </div>

          {/* Invite Details Card */}
          {isInviteFlow && inviteDetails && (
            <motion.div
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.2 }}
            >
              <Card className="mb-6 border-[#A3BC02]/20 bg-gradient-to-br from-[#A3BC02]/5 to-white/80 backdrop-blur-sm shadow-lg shadow-[#A3BC02]/10">
                <CardContent className="p-4">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 bg-[#A3BC02]/10 rounded-full flex items-center justify-center">
                      <Building2 className="w-5 h-5 text-[#A3BC02]" />
                    </div>
                    <div>
                      <p className="font-medium text-custom-dark-green">
                        {inviteDetails.companyName}
                      </p>
                      <p className="text-sm text-gray-600">
                        Invited by {inviteDetails.inviterName} as{" "}
                        {inviteDetails.role}
                      </p>
                    </div>
                  </div>
                  {inviteDetails.customMessage && (
                    <p className="mt-3 text-sm text-gray-700 italic">
                      "{inviteDetails.customMessage}"
                    </p>
                  )}
                </CardContent>
              </Card>
            </motion.div>
          )}

          {/* Signup Form */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
          >
            <Card className="backdrop-blur-sm bg-white/80 border-white/20 shadow-xl shadow-[#A3BC02]/5">
              <CardContent className="p-6 relative">
                {/* Subtle gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-white/50 to-transparent rounded-lg pointer-events-none" />
                <div className="relative z-10">
                  <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                    {/* Email */}
                    <div>
                      <Label htmlFor="email">Email Address</Label>
                      <Input
                        id="email"
                        type="email"
                        disabled={isInviteFlow}
                        {...register("email")}
                        className="mt-1"
                      />
                      {errors.email && (
                        <p className="text-sm text-red-600 mt-1">
                          {errors.email.message}
                        </p>
                      )}
                      {domainError && (
                        <Alert className="mt-2 border-red-200 bg-red-50">
                          <XCircle className="h-4 w-4 text-red-600" />
                          <AlertDescription className="text-red-700">
                            {domainError}
                          </AlertDescription>
                        </Alert>
                      )}
                    </div>

                    {/* Name Fields */}
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="firstName">First Name</Label>
                        <Input
                          id="firstName"
                          {...register("first_name")}
                          className="mt-1"
                        />
                        {errors.first_name && (
                          <p className="text-sm text-red-600 mt-1">
                            {errors.first_name.message}
                          </p>
                        )}
                      </div>
                      <div>
                        <Label htmlFor="lastName">Last Name</Label>
                        <Input
                          id="lastName"
                          {...register("last_name")}
                          className="mt-1"
                        />
                        {errors.last_name && (
                          <p className="text-sm text-red-600 mt-1">
                            {errors.last_name.message}
                          </p>
                        )}
                      </div>
                    </div>

                    {/* Company Fields (New Company Flow Only) */}
                    {isNewCompanyFlow && (
                      <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: "auto" }}
                        className="space-y-4"
                      >
                        <div>
                          <Label htmlFor="companyName">Company Name *</Label>
                          <Input
                            id="companyName"
                            {...register("company_name", {
                              required: "Company name is required",
                            })}
                            className="mt-1"
                          />
                          {errors.company_name && (
                            <p className="text-sm text-red-600 mt-1">
                              {errors.company_name.message}
                            </p>
                          )}
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <Label htmlFor="companySize">Company Size</Label>
                            <Select
                              onValueChange={(value) =>
                                setValue("company_size", value)
                              }
                            >
                              <SelectTrigger className="mt-1">
                                <SelectValue placeholder="Select size" />
                              </SelectTrigger>
                              <SelectContent>
                                {companySizes.map((size) => (
                                  <SelectItem key={size} value={size}>
                                    {size} employees
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </div>
                          <div>
                            <Label htmlFor="industry">Industry</Label>
                            <Select
                              onValueChange={(value) =>
                                setValue("industry", value)
                              }
                            >
                              <SelectTrigger className="mt-1">
                                <SelectValue placeholder="Select industry" />
                              </SelectTrigger>
                              <SelectContent>
                                {industries.map((industry) => (
                                  <SelectItem key={industry} value={industry}>
                                    {industry}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </div>
                        </div>
                      </motion.div>
                    )}

                    {/* Password */}
                    <div>
                      <Label htmlFor="password">Password</Label>
                      <div className="relative mt-1">
                        <Input
                          id="password"
                          type={showPassword ? "text" : "password"}
                          {...register("password")}
                        />
                        <button
                          type="button"
                          onClick={() => setShowPassword(!showPassword)}
                          className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700"
                        >
                          {showPassword ? (
                            <EyeOff className="w-4 h-4" />
                          ) : (
                            <Eye className="w-4 h-4" />
                          )}
                        </button>
                      </div>
                      {watchedPassword && (
                        <div className="mt-2">
                          <div className="flex items-center gap-2 mb-1">
                            <div className="flex-1 h-1 bg-gray-200 rounded-full overflow-hidden">
                              <div
                                className={`h-full transition-all duration-300 ${getPasswordStrengthColor()}`}
                                style={{ width: `${passwordStrength}%` }}
                              />
                            </div>
                            <span className="text-xs text-gray-600">
                              {getPasswordStrengthText()}
                            </span>
                          </div>
                        </div>
                      )}
                      {errors.password && (
                        <p className="text-sm text-red-600 mt-1">
                          {errors.password.message}
                        </p>
                      )}
                    </div>

                    {/* Confirm Password */}
                    <div>
                      <Label htmlFor="confirmPassword">Confirm Password</Label>
                      <div className="relative mt-1">
                        <Input
                          id="confirmPassword"
                          type={showConfirmPassword ? "text" : "password"}
                          {...register("confirmPassword")}
                        />
                        <button
                          type="button"
                          onClick={() =>
                            setShowConfirmPassword(!showConfirmPassword)
                          }
                          className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700"
                        >
                          {showConfirmPassword ? (
                            <EyeOff className="w-4 h-4" />
                          ) : (
                            <Eye className="w-4 h-4" />
                          )}
                        </button>
                      </div>
                      {errors.confirmPassword && (
                        <p className="text-sm text-red-600 mt-1">
                          {errors.confirmPassword.message}
                        </p>
                      )}
                    </div>

                    {/* Terms Checkbox */}
                    <div className="flex items-start space-x-2">
                      <Controller
                        name="acceptTerms"
                        control={control}
                        render={({ field }) => (
                          <Checkbox
                            id="acceptTerms"
                            checked={field.value}
                            onCheckedChange={field.onChange}
                            className="mt-1"
                          />
                        )}
                      />
                      <Label
                        htmlFor="acceptTerms"
                        className="text-sm leading-5 cursor-pointer"
                      >
                        I agree to the{" "}
                        <Link
                          href="/terms-of-service"
                          className="text-[#A3BC02] hover:underline"
                        >
                          Terms of Service
                        </Link>{" "}
                        and{" "}
                        <Link
                          href="/privacy-policy"
                          className="text-[#A3BC02] hover:underline"
                        >
                          Privacy Policy
                        </Link>
                      </Label>
                    </div>
                    {errors.acceptTerms && (
                      <p className="text-sm text-red-600">
                        {errors.acceptTerms.message}
                      </p>
                    )}

                    {/* Error Message */}
                    <AnimatePresence mode="wait">
                      {errors.root && (
                        <motion.div
                          initial={{ opacity: 0, y: -10 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: -10 }}
                          transition={{ duration: 0.2 }}
                        >
                          <Alert className={
                            errorStatusCode === 429 
                              ? "border-orange-200 bg-orange-50" 
                              : errorStatusCode === 409
                              ? "border-purple-200 bg-purple-50"
                              : "border-red-200 bg-red-50"
                          }>
                            {errorStatusCode === 429 ? (
                              <ShieldAlert className="h-4 w-4 text-orange-600" />
                            ) : errorStatusCode === 409 ? (
                              <AlertCircle className="h-4 w-4 text-purple-600" />
                            ) : (
                              <XCircle className="h-4 w-4 text-red-600" />
                            )}
                            <AlertDescription className={
                              errorStatusCode === 429 
                                ? "text-orange-700" 
                                : errorStatusCode === 409
                                ? "text-purple-700"
                                : "text-red-700"
                            }>
                              {errors.root.message}
                            </AlertDescription>
                          </Alert>
                        </motion.div>
                      )}
                    </AnimatePresence>

                    {/* Submit Button */}
                    <Button
                      type="submit"
                      disabled={isLoading || !!domainError}
                      className="w-full bg-[#A3BC02] hover:bg-[#8BA000] text-white"
                    >
                      {isLoading ? (
                        <>
                          <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                          Creating Account...
                        </>
                      ) : isInviteFlow ? (
                        "Join Team"
                      ) : (
                        "Create Account"
                      )}
                    </Button>
                  </form>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          {/* Footer */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.5 }}
            className="text-center mt-6"
          >
            <p className="text-gray-600">
              Already have an account?{" "}
              <Link
                href="/login"
                className="text-[#A3BC02] hover:underline font-medium"
              >
                Sign in
              </Link>
            </p>
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
}

================
File: app/terms-of-service/page.tsx
================
import Header from "@/components/landing/Header";
import Footer from "@/components/landing/Footer";
import Link from "next/link";

const toc = [
  { id: "introduction", label: "Introduction" },
  { id: "eligibility", label: "Who May Use the Service" },
  { id: "service-description", label: "Service Description" },
  { id: "account", label: "Account Registration & Security" },
  { id: "user-content", label: "User Content & Data Protection" },
  { id: "privacy", label: "Data Security & Privacy" },
  { id: "acceptable-use", label: "Acceptable Use" },
  { id: "ip", label: "Intellectual Property" },
  { id: "third-party", label: "Third-Party Services" },
  { id: "availability", label: "Service Availability & Changes" },
  { id: "fees", label: "Fees & Payment" },
  { id: "warranty", label: "Disclaimer of Warranties" },
  { id: "liability", label: "Limitation of Liability" },
  { id: "indemnification", label: "Indemnification" },
  { id: "termination", label: "Suspension & Termination" },
  { id: "changes", label: "Changes to These Terms" },
  { id: "law", label: "Governing Law & Jurisdiction" },
  { id: "contact", label: "Contact Us" },
];

export default function TermsOfServicePage() {
  return (
    <div className="min-h-dvh">
      <Header />

      <main className="pt-24 pb-16">
        <div className="max-w-4xl mx-auto px-6">
          <div className="bg-white rounded-lg shadow-sm border border-gray-100 p-8 md:p-12">
            <h1 className="text-5xl md:text-6xl font-serif text-custom-dark-green mb-4 leading-tight">
              Terms of Service
            </h1>
            <p className="text-sm text-gray-500 mb-12">
              Last updated:{" "}
              {new Date().toLocaleDateString("en-US", {
                month: "long",
                day: "numeric",
                year: "numeric",
              })}
            </p>

            {/* Table of Contents */}
            <div className="mb-12 bg-gray-50 rounded-lg p-8 border border-gray-100">
              <h2 className="text-2xl font-serif text-custom-dark-green mb-6">
                Table of Contents
              </h2>
              <ul className="grid md:grid-cols-2 gap-2">
                {toc.map((section) => (
                  <li key={section.id}>
                    <a
                      href={`#${section.id}`}
                      className="hover:text-[#A3BC02] text-custom-dark-green underline-offset-2 underline focus:text-custom-dark-green focus:underline transition-all duration-150 ease-in-out text-sm font-medium"
                    >
                      {section.label}
                    </a>
                  </li>
                ))}
              </ul>
            </div>

            <div className="prose prose-lg max-w-none space-y-10">
              {/* 1. Introduction */}
              <section>
                <h2
                  id="introduction"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  1. Introduction
                </h2>
                <p className="text-gray-700 leading-relaxed">
                  Welcome to Monolith ("Monolith", "we", "our", or "us"). These
                  Terms of Service ("Terms") govern your access to and use of
                  our website at www.monolith.life, our cloud-based
                  software-as-a-service ("SaaS") platform, and related services
                  ("Service"). Please read these Terms carefully. By accessing
                  or using our Service, you agree to be bound by these Terms and
                  our{" "}
                  <Link
                    href="/privacy-policy"
                    className="text-[#A3BC02] hover:underline"
                  >
                    Privacy Policy
                  </Link>
                  . If you do not agree, you may not use our Service.
                </p>
              </section>

              {/* 2. Who May Use */}
              <section>
                <h2
                  id="eligibility"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  2. Who May Use the Service
                </h2>
                <p className="text-gray-700 leading-relaxed">
                  You must be at least 18 years old and have the legal capacity
                  to enter into contracts to use our Service. You may use the
                  Service only in compliance with these Terms and all applicable
                  laws and regulations, including the General Data Protection
                  Regulation (GDPR) if you are located in the European Economic
                  Area ("EEA").
                </p>
              </section>

              {/* 3. Service Description */}
              <section>
                <h2
                  id="service-description"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  3. Service Description
                </h2>
                <p className="text-gray-700 leading-relaxed">
                  Monolith is a SaaS platform providing an AI-powered knowledge
                  assistant for businesses and organizations. Our Service helps
                  you aggregate, search, and access your organization's
                  information from connected tools and repositories. The Service
                  is subject to change as we continuously improve our features
                  and offerings.
                </p>
              </section>

              {/* 4. Account */}
              <section>
                <h2
                  id="account"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  4. Account Registration & Security
                </h2>
                <ul className="space-y-3 text-gray-700">
                  <li>
                    You may need to create an account to access certain
                    features. You agree to provide accurate and complete
                    information and keep your account details up to date.
                  </li>
                  <li>
                    You are responsible for maintaining the confidentiality of
                    your account credentials and all activity that occurs under
                    your account.
                  </li>
                  <li>
                    You must notify us immediately at{" "}
                    <a
                      href="mailto:info@monolith.life"
                      className="text-[#A3BC02] hover:underline"
                    >
                      info@monolith.life
                    </a>{" "}
                    if you suspect any unauthorised use or security breach.
                  </li>
                  <li>
                    We may suspend or terminate your account if we believe you
                    have violated these Terms.
                  </li>
                </ul>
              </section>

              {/* 5. User Content */}
              <section>
                <h2
                  id="user-content"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  5. User Content & Data Protection
                </h2>
                <p className="text-gray-700 leading-relaxed mb-4">
                  You may upload, submit, or store data, documents, and other
                  content ("User Content") using our Service. You retain all
                  rights in your User Content.
                </p>
                <ul className="space-y-4 text-gray-700">
                  <li>
                    <strong className="text-custom-dark-green">
                      Data Processing:
                    </strong>{" "}
                    As a processor of your data, we process and safeguard your
                    User Content in compliance with the GDPR and as described in
                    our{" "}
                    <Link
                      href="/privacy-policy"
                      className="text-[#A3BC02] hover:underline"
                    >
                      Privacy Policy
                    </Link>
                    .
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Your Responsibility:
                    </strong>{" "}
                    You must ensure you have all necessary rights and lawful
                    basis (including any required consents) to upload User
                    Content and for us to process it as described.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">License:</strong>{" "}
                    By uploading User Content, you grant us a limited license to
                    use, process, and display your content solely for providing
                    and improving the Service.
                  </li>
                  <li>
                    <strong className="text-custom-dark-green">
                      Prohibited Content:
                    </strong>{" "}
                    You may not upload illegal, infringing, or harmful content,
                    or content you do not have the right to share.
                  </li>
                </ul>
              </section>

              {/* 6. Data Security & Privacy */}
              <section>
                <h2
                  id="privacy"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  6. Data Security & Privacy
                </h2>
                <ul className="space-y-4 text-gray-700">
                  <li>
                    We implement appropriate technical and organisational
                    measures to protect your personal data and User Content in
                    accordance with GDPR Article 32.
                  </li>
                  <li>
                    You have the right to access, rectify, erase, restrict, or
                    port your personal data, and to object to certain
                    processing. To exercise these rights, contact us at{" "}
                    <a
                      href="mailto:info@monolith.life"
                      className="text-[#A3BC02] hover:underline"
                    >
                      info@monolith.life
                    </a>
                    .
                  </li>
                  <li>
                    We only process personal data as instructed by you, as the
                    data controller, and as necessary to provide the Service.
                  </li>
                </ul>
              </section>

              {/* 7. Acceptable Use */}
              <section>
                <h2
                  id="acceptable-use"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  7. Acceptable Use
                </h2>
                <ul className="space-y-3 text-gray-700">
                  <li>
                    Do not use the Service for any unlawful, harmful, or
                    fraudulent purpose.
                  </li>
                  <li>
                    Do not interfere with the security or operation of the
                    Service, or attempt to gain unauthorised access to other
                    accounts or systems.
                  </li>
                  <li>
                    Do not upload or transmit viruses, malware, or malicious
                    code.
                  </li>
                  <li>
                    Do not use the Service to violate the rights (including
                    intellectual property rights) of others.
                  </li>
                  <li>
                    Do not attempt to reverse engineer, decompile, or
                    disassemble any part of the Service.
                  </li>
                </ul>
              </section>

              {/* 8. IP */}
              <section>
                <h2
                  id="ip"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  8. Intellectual Property
                </h2>
                <ul className="space-y-4 text-gray-700">
                  <li>
                    All intellectual property rights in the Service (excluding
                    your User Content) are owned by Monolith or our licensors
                    and are protected by applicable law.
                  </li>
                  <li>
                    You may not use our trademarks, branding, or materials
                    without prior written permission.
                  </li>
                  <li>
                    We reserve all rights not expressly granted to you under
                    these Terms.
                  </li>
                </ul>
              </section>

              {/* 9. Third-Party Services */}
              <section>
                <h2
                  id="third-party"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  9. Third-Party Services
                </h2>
                <ul className="space-y-4 text-gray-700">
                  <li>
                    Our Service may integrate with or link to third-party
                    services ("Third-Party Services"). We are not responsible
                    for the availability, content, or privacy practices of such
                    services.
                  </li>
                  <li>
                    Use of Third-Party Services is subject to their own terms
                    and policies.
                  </li>
                </ul>
              </section>

              {/* 10. Availability */}
              <section>
                <h2
                  id="availability"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  10. Service Availability & Changes
                </h2>
                <ul className="space-y-4 text-gray-700">
                  <li>
                    We aim to provide reliable Service, but do not guarantee it
                    will always be available, uninterrupted, or error-free.
                  </li>
                  <li>
                    We may modify, suspend, or discontinue any aspect of the
                    Service at any time. We will endeavour to notify users of
                    major changes.
                  </li>
                </ul>
              </section>

              {/* 11. Fees & Payment */}
              <section>
                <h2
                  id="fees"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  11. Fees & Payment
                </h2>
                <ul className="space-y-4 text-gray-700">
                  <li>
                    If you purchase paid features or subscriptions, you agree to
                    pay all applicable fees as described at the time of
                    purchase.
                  </li>
                  <li>All fees are non-refundable unless required by law.</li>
                  <li>
                    We reserve the right to change our prices. We will notify
                    users in advance of any price changes.
                  </li>
                </ul>
              </section>

              {/* 12. Disclaimer */}
              <section>
                <h2
                  id="warranty"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  12. Disclaimer of Warranties
                </h2>
                <p className="text-gray-700 leading-relaxed">
                  The Service is provided "as is" and "as available". We do not
                  warrant that the Service will be error-free or uninterrupted.
                  To the fullest extent permitted by law, we disclaim all
                  warranties, express or implied.
                </p>
              </section>

              {/* 13. Limitation of Liability */}
              <section>
                <h2
                  id="liability"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  13. Limitation of Liability
                </h2>
                <p className="text-gray-700 leading-relaxed mb-4">
                  To the maximum extent permitted by law, Monolith and its
                  affiliates are not liable for indirect, incidental, special,
                  consequential, or punitive damages, or any loss of profits or
                  revenues, arising from your use of the Service. Our total
                  liability under these Terms shall not exceed the amount paid
                  by you for the Service during the twelve months preceding the
                  claim.
                </p>
                <p className="text-gray-700 leading-relaxed">
                  Nothing in these Terms excludes or limits liability for death
                  or personal injury caused by negligence, or for fraud, or for
                  any other liability which cannot be excluded or limited by
                  applicable law (including GDPR).
                </p>
              </section>

              {/* 14. Indemnification */}
              <section>
                <h2
                  id="indemnification"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  14. Indemnification
                </h2>
                <p className="text-gray-700 leading-relaxed">
                  You agree to indemnify and hold harmless Monolith and its
                  affiliates from any claims, damages, or expenses arising from
                  your breach of these Terms or misuse of the Service.
                </p>
              </section>

              {/* 15. Suspension & Termination */}
              <section>
                <h2
                  id="termination"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  15. Suspension & Termination
                </h2>
                <p className="text-gray-700 leading-relaxed mb-4">
                  We may suspend or terminate your access to the Service at any
                  time if you violate these Terms, applicable law, or if
                  required to by law or competent authority. You may terminate
                  your account at any time by contacting us.
                </p>
                <p className="text-gray-700 leading-relaxed">
                  Upon termination, your right to use the Service will cease,
                  but sections intended to survive (including confidentiality,
                  intellectual property, and limitations of liability) will
                  continue to apply.
                </p>
              </section>

              {/* 16. Changes */}
              <section>
                <h2
                  id="changes"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  16. Changes to These Terms
                </h2>
                <p className="text-gray-700 leading-relaxed">
                  We may update these Terms from time to time. We will notify
                  users of material changes via email or by posting a notice on
                  our website. Continued use of the Service after changes take
                  effect constitutes acceptance of the new Terms.
                </p>
              </section>

              {/* 17. Law & Jurisdiction */}
              <section>
                <h2
                  id="law"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  17. Governing Law & Jurisdiction
                </h2>
                <p className="text-gray-700 leading-relaxed mb-4">
                  These Terms are governed by the laws of the United States and
                  applicable state laws, unless otherwise required by mandatory
                  law in your country of residence. Any disputes will be subject
                  to the jurisdiction of the courts in your country of residence
                  where applicable.
                </p>
                <p className="text-gray-700 leading-relaxed">
                  The Service is intended primarily for use by businesses and
                  organizations. If you are an individual consumer, additional
                  consumer protection laws may apply.
                </p>
              </section>

              {/* 18. Contact */}
              <section>
                <h2
                  id="contact"
                  className="scroll-mt-24 text-3xl font-serif text-custom-dark-green mb-4"
                >
                  18. Contact Us
                </h2>
                <p className="text-gray-700 leading-relaxed">
                  For any questions about these Terms or your rights, please
                  contact us at{" "}
                  <a
                    href="mailto:info@monolith.life"
                    className="text-[#A3BC02] hover:underline"
                  >
                    info@monolith.life
                  </a>
                  .
                </p>
              </section>
            </div>

            <div className="mt-12 pt-8 border-t border-gray-200 text-sm text-gray-500">
              &copy; {new Date().getFullYear()} Monolith Inc. All rights
              reserved.
            </div>
          </div>
        </div>
      </main>

      <Footer />
    </div>
  );
}

================
File: app/test-auth/page.tsx
================
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function TestAuthPage() {
  const [results, setResults] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);

  const addResult = (test: string, result: any) => {
    setResults((prev) => [...prev, { test, result, timestamp: new Date().toISOString() }]);
  };

  const testAuthMe = async () => {
    setLoading(true);
    try {
      const response = await fetch("/api/auth/me");
      const data = await response.json();
      addResult("GET /api/auth/me", {
        status: response.status,
        ok: response.ok,
        data,
      });
    } catch (error) {
      addResult("GET /api/auth/me", { error: error.message });
    }
    setLoading(false);
  };

  const testRefreshToken = async () => {
    setLoading(true);
    try {
      const response = await fetch("/api/auth/refresh", {
        method: "POST",
      });
      const data = await response.json();
      addResult("POST /api/auth/refresh", {
        status: response.status,
        ok: response.ok,
        data,
      });
    } catch (error) {
      addResult("POST /api/auth/refresh", { error: error.message });
    }
    setLoading(false);
  };

  const testProtectedEndpoint = async () => {
    setLoading(true);
    try {
      const response = await fetch("/api/documents");
      const data = await response.json();
      addResult("GET /api/documents (Protected)", {
        status: response.status,
        ok: response.ok,
        data: data.items ? `${data.items.length} documents` : data,
      });
    } catch (error) {
      addResult("GET /api/documents (Protected)", { error: error.message });
    }
    setLoading(false);
  };

  const clearResults = () => {
    setResults([]);
  };

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <Card>
        <CardHeader>
          <CardTitle>Auth Token Testing</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex gap-2 flex-wrap">
              <Button onClick={testAuthMe} disabled={loading}>
                Test /api/auth/me
              </Button>
              <Button onClick={testRefreshToken} disabled={loading}>
                Test Token Refresh
              </Button>
              <Button onClick={testProtectedEndpoint} disabled={loading}>
                Test Protected Endpoint
              </Button>
              <Button onClick={clearResults} variant="outline">
                Clear Results
              </Button>
            </div>

            <div className="mt-6 space-y-4">
              {results.length === 0 ? (
                <p className="text-muted-foreground">No test results yet. Click a button to test.</p>
              ) : (
                results.map((result, index) => (
                  <Card key={index}>
                    <CardHeader className="pb-3">
                      <div className="flex justify-between items-center">
                        <h3 className="font-semibold">{result.test}</h3>
                        <span className="text-xs text-muted-foreground">
                          {new Date(result.timestamp).toLocaleTimeString()}
                        </span>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <pre className="text-xs overflow-x-auto bg-muted p-3 rounded">
                        {JSON.stringify(result.result, null, 2)}
                      </pre>
                    </CardContent>
                  </Card>
                ))
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: app/waitlist/page.tsx
================
"use client";
import { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import {
  ArrowLeft,
  CheckCircle,
  Loader2,
  Users,
  Sparkles,
  Shield,
  Zap,
  Bot,
} from "lucide-react";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import Header from "@/components/landing/Header";
import Footer from "@/components/landing/Footer";
import { countries, Country } from "@/lib/countries";
import { Turnstile } from "@marsidev/react-turnstile";

const formSchema = z.object({
  fullName: z.string().min(2, "Full name must be at least 2 characters."),
  email: z.string().email("Please enter a valid email address."),
  companyName: z.string().min(1, "Company name is required."),
  position: z.string().min(1, "Position is required."),
  city: z.string().min(1, "City is required."),
  country: z.string().min(1, "Please select a country."),
});

type FormValues = z.infer<typeof formSchema>;

export default function WaitlistPage() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [turnstileToken, setTurnstileToken] = useState<string | null>(null);
  const [turnstileError, setTurnstileError] = useState<string | null>(null);

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      fullName: "",
      email: "",
      companyName: "",
      position: "",
      city: "",
      country: "",
    },
  });

  const onSubmit = async (data: FormValues) => {
    setError(null);
    setSuccessMessage(null);
    setTurnstileError(null);

    if (!turnstileToken) {
      setTurnstileError(
        "Please complete the security check before submitting."
      );
      setIsLoading(false);
      return;
    }

    setIsLoading(true);
    try {
      const payload = {
        ...data,
        turnstileToken: turnstileToken,
      };

      const response = await fetch("/api/waitlist", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      const responseData = await response.json();

      if (!response.ok) {
        const errorMessage =
          responseData.error ||
          responseData.message ||
          "Submission failed. Please try again.";
        if (
          response.status === 403 &&
          errorMessage.toLowerCase().includes("security check failed")
        ) {
          setTurnstileError(errorMessage);
          setError(null);
        } else {
          let detailedError = errorMessage;
          if (
            responseData.details &&
            typeof responseData.details === "object" &&
            !Array.isArray(responseData.details)
          ) {
            try {
              const formattedDetails = Object.values(responseData.details)
                // @ts-ignore allow _errors for ZodError.format()
                .map((detail: any) => detail._errors.join(", "))
                .join("; ");
              if (formattedDetails)
                detailedError += ` Details: ${formattedDetails}`;
            } catch (e) {
              console.warn(
                "Could not parse Zod error details",
                responseData.details
              );
            }
          }
          setError(detailedError);
        }
        setIsSubmitted(false);
      } else if (responseData.success) {
        setIsSubmitted(true);
        setSuccessMessage(
          responseData.message ||
            "You've been added to our waitlist. We'll notify you when Monolith is ready for you."
        );
      } else {
        setError(
          responseData.message ||
            "Submission was processed but reported as not successful."
        );
        setIsSubmitted(false);
      }
    } catch (err) {
      console.error("CLIENT SIDE - onSubmit catch error:", err);
      setError(
        err instanceof Error ? err.message : "An unexpected API error occurred"
      );
      setIsSubmitted(false);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-dvh bg-[#FEFFFE] font-['Instrument_Sans']">
      <Header />

      {/* Hero Section */}
      <section className="relative overflow-hidden bg-gradient-to-br from-[#FEFFFE] via-[#F8FBF6] to-[#F0F7E8] pt-20 pb-16">
        <div className="absolute inset-0 bg-[url('/placeholder.svg?height=800&width=1200&query=subtle+geometric+pattern')] opacity-5"></div>
        <div className="relative mx-auto max-w-7xl px-6 lg:px-8">
          <div className="mx-auto max-w-2xl text-center">
            <div className="mb-8 flex justify-center">
              <div className="relative rounded-full px-4 py-2 text-sm leading-6 text-[#3E4128] ring-1 ring-[#A3BC02]/20 hover:ring-[#A3BC02]/30 transition-all duration-300">
                <span className="font-semibold text-[#A3BC02]">
                  Early Access
                </span>
                <span className="mx-2">•</span>
                Limited spots available
              </div>
            </div>
            <h1 className="font-serif text-4xl font-bold tracking-tight text-[#3E4128] sm:text-6xl">
              Join the{" "}
              <span className="relative">
                <span className="bg-gradient-to-r from-[#A3BC02] to-[#8BA000] bg-clip-text text-transparent">
                  Future
                </span>
                <svg
                  className="absolute -bottom-2 left-0 w-full"
                  height="8"
                  viewBox="0 0 100 8"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M0 4C20 1 40 1 60 4C80 7 90 7 100 4"
                    stroke="#A3BC02"
                    strokeWidth="2"
                    fill="none"
                  />
                </svg>
              </span>{" "}
              of Knowledge
            </h1>
            <p className="mt-6 text-lg leading-8 text-[#6B7280]">
              Be among the first to experience Monolith's AI-powered knowledge
              assistant. Transform how your team finds, shares, and uses
              information.
            </p>
          </div>
        </div>
      </section>

      {/* Main Content */}
      <section className="py-16">
        <div className="mx-auto max-w-7xl px-6 lg:px-8">
          {isSubmitted ? (
            /* Success View */
            <div className="mx-auto max-w-md">
              <Card className="border-0 shadow-2xl bg-white/80 backdrop-blur-sm">
                <CardHeader className="text-center space-y-4 pb-8">
                  <div className="mx-auto flex h-16 w-16 items-center justify-center rounded-full bg-gradient-to-r from-[#A3BC02] to-[#8BA000]">
                    <CheckCircle className="h-8 w-8 text-white" />
                  </div>
                  <div>
                    <CardTitle className="font-serif text-2xl font-bold text-[#3E4128]">
                      Welcome to the Future!
                    </CardTitle>
                    <CardDescription className="mt-2 text-base text-[#6B7280]">
                      {successMessage}
                    </CardDescription>
                  </div>
                </CardHeader>
                <CardContent className="text-center pb-6">
                  <div className="space-y-4">
                    <div className="rounded-lg bg-[#F8FBF6] p-4">
                      <h3 className="font-semibold text-[#3E4128] mb-2">
                        What happens next?
                      </h3>
                      <ul className="text-sm text-[#6B7280] space-y-1">
                        <li>• You'll receive a confirmation email shortly</li>
                        <li>• We'll keep you updated on our progress</li>
                        <li>• You'll get early access when we launch</li>
                      </ul>
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="pt-0">
                  <Link href="/" className="w-full">
                    <Button className="w-full bg-[#3E4128] text-white hover:bg-[#3E4128]/90 transition-all duration-300">
                      <ArrowLeft className="mr-2 h-4 w-4" />
                      Back to Home
                    </Button>
                  </Link>
                </CardFooter>
              </Card>
            </div>
          ) : (
            /* Form View */
            <div className="grid lg:grid-cols-2 gap-12 items-start">
              {/* Left Column - Benefits */}
              <div className="space-y-8">
                <div>
                  <h2 className="font-serif text-3xl font-bold text-[#3E4128] mb-4">
                    Why Join Our Waitlist?
                  </h2>
                  <p className="text-lg text-[#6B7280]">
                    Get exclusive early access to the most advanced AI knowledge
                    assistant for teams.
                  </p>
                </div>

                <div className="space-y-6">
                  <div className="flex items-start space-x-4">
                    <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-[#A3BC02]/10">
                      <Sparkles className="h-5 w-5 text-[#A3BC02]" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-[#3E4128]">
                        Early Access Benefits
                      </h3>
                      <p className="text-[#6B7280]">
                        Be the first to experience our features and get priority
                        support.
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-4">
                    <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-[#A3BC02]/10">
                      <Shield className="h-5 w-5 text-[#A3BC02]" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-[#3E4128]">
                        Exclusive Pricing
                      </h3>
                      <p className="text-[#6B7280]">
                        Lock in special launch pricing and get additional months
                        free.
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-4">
                    <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-[#A3BC02]/10">
                      <Users className="h-5 w-5 text-[#A3BC02]" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-[#3E4128]">
                        Shape the Product
                      </h3>
                      <p className="text-[#6B7280]">
                        Your feedback will directly influence our development
                        roadmap.
                      </p>
                    </div>
                  </div>

                  <div className="flex items-start space-x-4">
                    <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-[#A3BC02]/10">
                      <Zap className="h-5 w-5 text-[#A3BC02]" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-[#3E4128]">
                        Premium Support
                      </h3>
                      <p className="text-[#6B7280]">
                        Get dedicated onboarding and priority customer support.
                      </p>
                    </div>
                  </div>
                </div>

                <div className="rounded-xl bg-gradient-to-r from-[#A3BC02]/10 to-[#8BA000]/10 p-6 border border-[#A3BC02]/20">
                  <div className="flex items-center space-x-3 mb-3">
                    <div className="flex h-8 w-8 items-center justify-center rounded-full bg-[#A3BC02]">
                      <Users className="h-4 w-4 text-white" />
                    </div>
                    <span className="font-semibold text-[#3E4128]">
                      Be first in line when we launch
                    </span>
                  </div>
                  <p className="text-sm text-[#6B7280]">
                    We're putting the finishing touches on something special.
                    Join our waitlist to get exclusive early access and be
                    notified the moment we're ready.
                  </p>
                </div>
              </div>

              {/* Right Column - Form */}
              <div className="lg:sticky lg:top-8">
                <Card className="border-0 shadow-2xl bg-white/80 backdrop-blur-sm">
                  <CardHeader className="text-center space-y-2">
                    <CardTitle className="font-serif text-2xl font-bold text-[#3E4128]">
                      Join the Waitlist
                    </CardTitle>
                    <CardDescription className="text-[#6B7280]">
                      Secure your spot and be notified when we launch
                    </CardDescription>
                  </CardHeader>

                  <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)}>
                      {error && (
                        <div className="mx-6 mb-4 rounded-lg border border-red-200 bg-red-50 p-3 text-sm text-red-600">
                          {error}
                        </div>
                      )}
                      {turnstileError && (
                        <div className="rounded-md border border-yellow-300 bg-yellow-50 p-3 text-sm text-yellow-700 mx-6 mb-4">
                          {turnstileError}
                        </div>
                      )}

                      <CardContent className="space-y-4">
                        <FormField
                          control={form.control}
                          name="fullName"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-[#3E4128] font-medium">
                                Full Name
                              </FormLabel>
                              <FormControl>
                                <Input
                                  placeholder="John Doe"
                                  className="border-[#E5E7EB] focus:border-[#A3BC02] focus:ring-[#A3BC02]"
                                  {...field}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="email"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-[#3E4128] font-medium">
                                Work Email
                              </FormLabel>
                              <FormControl>
                                <Input
                                  type="email"
                                  placeholder="john@company.com"
                                  className="border-[#E5E7EB] focus:border-[#A3BC02] focus:ring-[#A3BC02]"
                                  {...field}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="companyName"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-[#3E4128] font-medium">
                                Company Name
                              </FormLabel>
                              <FormControl>
                                <Input
                                  placeholder="Acme Inc."
                                  className="border-[#E5E7EB] focus:border-[#A3BC02] focus:ring-[#A3BC02]"
                                  {...field}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="position"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-[#3E4128] font-medium">
                                Your Role
                              </FormLabel>
                              <FormControl>
                                <Input
                                  placeholder="Marketing Manager"
                                  className="border-[#E5E7EB] focus:border-[#A3BC02] focus:ring-[#A3BC02]"
                                  {...field}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <div className="grid grid-cols-2 gap-4">
                          <FormField
                            control={form.control}
                            name="city"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel className="text-[#3E4128] font-medium">
                                  City
                                </FormLabel>
                                <FormControl>
                                  <Input
                                    placeholder="New York"
                                    className="border-[#E5E7EB] focus:border-[#A3BC02] focus:ring-[#A3BC02]"
                                    {...field}
                                  />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={form.control}
                            name="country"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel className="text-[#3E4128] font-medium">
                                  Country
                                </FormLabel>
                                <Select
                                  onValueChange={field.onChange}
                                  defaultValue={field.value}
                                >
                                  <FormControl>
                                    <SelectTrigger className="border-[#E5E7EB] focus:border-[#A3BC02] focus:ring-[#A3BC02]">
                                      <SelectValue placeholder="Select" />
                                    </SelectTrigger>
                                  </FormControl>
                                  <SelectContent>
                                    {countries.map((country: Country) => (
                                      <SelectItem
                                        key={country.code}
                                        value={country.name}
                                      >
                                        {country.name}
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>
                      </CardContent>

                      <CardFooter className="flex flex-col space-y-4">
                        <div className="px-6 mb-6 mt-2">
                          <Turnstile
                            className="flex justify-center !w-[250px]"
                            siteKey={
                              process.env.NEXT_PUBLIC_TURNSTILE_SITE_KEY || ""
                            }
                            onSuccess={(token) => {
                              setTurnstileToken(token);
                              setTurnstileError(null);
                            }}
                            onError={() => {
                              console.error("Turnstile error loading widget");
                              setTurnstileError(
                                "Security check could not load. Please refresh the page."
                              );
                              setTurnstileToken(null);
                            }}
                            onExpire={() => {
                              setTurnstileError(
                                "Security check expired. Please complete it again."
                              );
                              setTurnstileToken(null);
                            }}
                            options={{
                              theme: "light",
                            }}
                          />
                        </div>

                        <Button
                          type="submit"
                          className="w-full bg-gradient-to-r from-[#A3BC02] to-[#8BA000] text-white hover:from-[#8BA000] hover:to-[#7A9000] transition-all duration-300 font-semibold py-6"
                          disabled={isLoading || !turnstileToken}
                        >
                          {isLoading ? (
                            <>
                              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                              Joining Waitlist...
                            </>
                          ) : (
                            <>
                              <Users className="mr-2 h-4 w-4" />
                              Join the Waitlist
                            </>
                          )}
                        </Button>

                        <div className="text-center text-xs text-[#6B7280]">
                          By joining our waitlist, you agree to our{" "}
                          <Link
                            href="/terms-of-service"
                            className="text-[#A3BC02] hover:text-[#8BA000] hover:underline transition-colors"
                          >
                            Terms of Service
                          </Link>{" "}
                          and{" "}
                          <Link
                            href="/privacy-policy"
                            className="text-[#A3BC02] hover:text-[#8BA000] hover:underline transition-colors"
                          >
                            Privacy Policy
                          </Link>
                          .
                        </div>
                      </CardFooter>
                    </form>
                  </Form>
                </Card>
              </div>
            </div>
          )}
        </div>
      </section>

      <Footer />
    </div>
  );
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --font-instrument-sans: "Instrument Sans", sans-serif;
  --font-instrument-serif: "Instrument Serif", serif;
}

.font-sans {
  font-family: var(--font-instrument-sans);
}

.font-serif {
  font-family: var(--font-instrument-serif);
}

.hero-gradient {
  position: relative;
  min-height: 100vh;
  background: linear-gradient(
      to bottom,
      rgba(255, 255, 255, 0.4) 0%,
      rgba(255, 255, 255, 0.5) 1%,
      rgba(255, 255, 255, 0.15) 44%,
      transparent 100%
    ),
    radial-gradient(
      ellipse at 50% 0%,
      rgba(255, 255, 255, 1) 0%,
      rgba(255, 255, 255, 0.4) 20%,
      rgba(163, 188, 2, 0.3) 70%,
      #a3bc02 100%
    ),
    radial-gradient(
      ellipse 250px 600vh at center bottom,
      rgba(255, 255, 255, 0.9) 0%,
      rgba(255, 255, 255, 0.3) 40%,
      rgba(255, 255, 255, 0.12) 70%,
      transparent 100%
    ),
    /* Ambient background */
      radial-gradient(ellipse at center, #f7fad7 0%, #a3bc02 100%);
  background-blend-mode: lighten;
}

.first-pricing-card {
  background: conic-gradient(
    from 180deg at 50% 105.6%,
    #efefef 88.26922953128815deg,
    #fff 180deg,
    #efefef 256.1538362503052deg
  );
}

.last-pricing-card {
  background: conic-gradient(
    from 180deg at 50% 105.6%,
    #000 88.26922953128815deg,
    #1d1d1d 180deg,
    #000 256.1538362503052deg
  );
}

.center-pricing-card {
  background-image: url("/images/team-pricing.png");
  background-size: cover;
}

.mission-gradient {
  box-shadow: inset 0 0 150px #a3bc01;
}

.custom-double-shadow {
  /* First shadow: #A3BC00, 28% opacity, blur 157.63px */
  /* Second shadow: #A3BC01, full opacity, blur 127px */
  box-shadow: 0 0 157.63px 0 rgba(163, 188, 0, 0.28), 0 0 127px 0 #a3bc01;
}

.final-gradient {
  background: linear-gradient(135deg, #a3bc02 0%, #e1f179 50%, #ff9800 100%);
}

.button-gradient {
  background: linear-gradient(135deg, #e1f179 0%, #e1f179 100%);
}

.monolith-logo {
  font-weight: bold;
}

.monolith-logo .underline-l {
  text-decoration: underline;
}

@layer base {
  :root {
    --background: 0 0% 96.5%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  html {
    background: #F6F6F6;
    min-height: 100%;
  }
  body {
    @apply text-foreground;
    background: #F6F6F6;
    min-height: 100vh;
  }
}

.bg-security {
  background-image: none;
  background-size: auto 100%;
  background-repeat: no-repeat;
}

@media (min-width: 1024px) {
  /* lg in Tailwind */
  .bg-security {
    background-image: url("data:image/svg+xml,%3Csvg width='32' height='48' viewBox='0 0 32 48' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M31.9581 15.5337V47.4834L9.42845 34.4757V21.9914H23.1968V40.9777L30.7075 45.314V16.7843H1.29249V45.7728H20.2345L8.16709 38.8048L8.79238 37.7207L24.9074 47.0246H0.0419121V15.5337H31.9581ZM10.6802 33.7522L21.945 40.2554V23.2432H10.6802V33.7522Z' fill='%23000000'/%3E%3Cpath d='M16.3941 0.00598937C18.3607 0.0544454 20.3028 0.464606 22.1223 1.21824L22.4841 1.37396C24.2829 2.1714 25.9198 3.29438 27.3127 4.68728L27.5882 4.96878C28.9448 6.3938 30.028 8.05791 30.7818 9.87767L30.9279 10.243C31.6358 12.0787 32 14.0303 32 16V16.6672H0V16C0 13.8991 0.414301 11.8187 1.21824 9.87767L1.37396 9.51591C2.1714 7.71714 3.29438 6.08018 4.68728 4.68728L4.96878 4.41177C6.3938 3.05525 8.05791 1.97201 9.87767 1.21824L10.243 1.0721C12.0787 0.36417 14.0303 8.60976e-08 16 0L16.3941 0.00598937ZM15.2789 1.3512C13.839 1.42208 12.4174 1.70531 11.06 2.19091L10.388 2.45085C8.83116 3.0957 7.39833 4.00265 6.15228 5.13169L5.63001 5.63001C4.26813 6.99188 3.18789 8.60858 2.45085 10.388C1.79909 11.9615 1.42734 13.6347 1.35 15.3328H30.65C30.5836 13.8745 30.3007 12.4343 29.8091 11.06L29.5491 10.388C28.9043 8.83116 27.9974 7.39833 26.8683 6.15228L26.37 5.63001C25.1784 4.43844 23.7921 3.46227 22.2721 2.74313L21.612 2.45085C19.8327 1.71385 17.9259 1.33443 16 1.33443L15.2789 1.3512Z' fill='%23000000'/%3E%3C/svg%3E%0A");
    background-position: 95% center;
  }
}

@media (min-width: 1280px) {
  /* lg in Tailwind */
  .bg-security {
    background-image: url("data:image/svg+xml,%3Csvg width='32' height='48' viewBox='0 0 32 48' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M31.9581 15.5337V47.4834L9.42845 34.4757V21.9914H23.1968V40.9777L30.7075 45.314V16.7843H1.29249V45.7728H20.2345L8.16709 38.8048L8.79238 37.7207L24.9074 47.0246H0.0419121V15.5337H31.9581ZM10.6802 33.7522L21.945 40.2554V23.2432H10.6802V33.7522Z' fill='%23000000'/%3E%3Cpath d='M16.3941 0.00598937C18.3607 0.0544454 20.3028 0.464606 22.1223 1.21824L22.4841 1.37396C24.2829 2.1714 25.9198 3.29438 27.3127 4.68728L27.5882 4.96878C28.9448 6.3938 30.028 8.05791 30.7818 9.87767L30.9279 10.243C31.6358 12.0787 32 14.0303 32 16V16.6672H0V16C0 13.8991 0.414301 11.8187 1.21824 9.87767L1.37396 9.51591C2.1714 7.71714 3.29438 6.08018 4.68728 4.68728L4.96878 4.41177C6.3938 3.05525 8.05791 1.97201 9.87767 1.21824L10.243 1.0721C12.0787 0.36417 14.0303 8.60976e-08 16 0L16.3941 0.00598937ZM15.2789 1.3512C13.839 1.42208 12.4174 1.70531 11.06 2.19091L10.388 2.45085C8.83116 3.0957 7.39833 4.00265 6.15228 5.13169L5.63001 5.63001C4.26813 6.99188 3.18789 8.60858 2.45085 10.388C1.79909 11.9615 1.42734 13.6347 1.35 15.3328H30.65C30.5836 13.8745 30.3007 12.4343 29.8091 11.06L29.5491 10.388C28.9043 8.83116 27.9974 7.39833 26.8683 6.15228L26.37 5.63001C25.1784 4.43844 23.7921 3.46227 22.2721 2.74313L21.612 2.45085C19.8327 1.71385 17.9259 1.33443 16 1.33443L15.2789 1.3512Z' fill='%23000000'/%3E%3C/svg%3E%0A");
    background-position: 85% center;
  }
}
@media (min-width: 1536px) {
  /* lg in Tailwind */
  .bg-security {
    background-image: url("data:image/svg+xml,%3Csvg width='32' height='48' viewBox='0 0 32 48' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M31.9581 15.5337V47.4834L9.42845 34.4757V21.9914H23.1968V40.9777L30.7075 45.314V16.7843H1.29249V45.7728H20.2345L8.16709 38.8048L8.79238 37.7207L24.9074 47.0246H0.0419121V15.5337H31.9581ZM10.6802 33.7522L21.945 40.2554V23.2432H10.6802V33.7522Z' fill='%23000000'/%3E%3Cpath d='M16.3941 0.00598937C18.3607 0.0544454 20.3028 0.464606 22.1223 1.21824L22.4841 1.37396C24.2829 2.1714 25.9198 3.29438 27.3127 4.68728L27.5882 4.96878C28.9448 6.3938 30.028 8.05791 30.7818 9.87767L30.9279 10.243C31.6358 12.0787 32 14.0303 32 16V16.6672H0V16C0 13.8991 0.414301 11.8187 1.21824 9.87767L1.37396 9.51591C2.1714 7.71714 3.29438 6.08018 4.68728 4.68728L4.96878 4.41177C6.3938 3.05525 8.05791 1.97201 9.87767 1.21824L10.243 1.0721C12.0787 0.36417 14.0303 8.60976e-08 16 0L16.3941 0.00598937ZM15.2789 1.3512C13.839 1.42208 12.4174 1.70531 11.06 2.19091L10.388 2.45085C8.83116 3.0957 7.39833 4.00265 6.15228 5.13169L5.63001 5.63001C4.26813 6.99188 3.18789 8.60858 2.45085 10.388C1.79909 11.9615 1.42734 13.6347 1.35 15.3328H30.65C30.5836 13.8745 30.3007 12.4343 29.8091 11.06L29.5491 10.388C28.9043 8.83116 27.9974 7.39833 26.8683 6.15228L26.37 5.63001C25.1784 4.43844 23.7921 3.46227 22.2721 2.74313L21.612 2.45085C19.8327 1.71385 17.9259 1.33443 16 1.33443L15.2789 1.3512Z' fill='%23000000'/%3E%3C/svg%3E%0A");
    background-position: 60% center;
  }
}

html {
  scroll-behavior: smooth;
}

================
File: app/layout.tsx
================
import type React from "react"
import type { Metadata } from "next"
import { Instrument_Sans, Instrument_Serif } from "next/font/google"
import { Toaster } from "sonner"
import { AuthProvider } from "@/lib/auth-context"
import "./globals.css"

const instrumentSans = Instrument_Sans({
  subsets: ["latin"],
  variable: "--font-instrument-sans",
  weight: ["400", "600", "700"],
})

const instrumentSerif = Instrument_Serif({
  subsets: ["latin"],
  variable: "--font-instrument-serif",
  weight: "400",
})

export const metadata: Metadata = {
  title: "Monolith - Know more. Move faster.",
  description: "Your team's collective brain, fully searchable.",
    generator: 'v0.dev'
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={`${instrumentSans.variable} ${instrumentSerif.variable}`}>
      <body className="font-sans antialiased">
        <AuthProvider>
          {children}
        </AuthProvider>
        <Toaster position="top-right" />
      </body>
    </html>
  )
}

================
File: app/loading.tsx
================
export default function Loading() {
  return null
}

================
File: app/not-found.tsx
================
"use client"
import { motion } from "framer-motion"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Search, Home, LayoutDashboard, ArrowLeft, FileQuestion } from "lucide-react"

export default function NotFound() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-white via-[#fafbf9] to-[#f0f7e8] relative overflow-hidden">
      {/* Decorative background elements */}
      <div className="absolute top-20 left-10 w-72 h-72 bg-[#A3BC02]/5 rounded-full blur-3xl pointer-events-none" />
      <div className="absolute bottom-20 right-10 w-96 h-96 bg-[#E1F179]/10 rounded-full blur-3xl pointer-events-none" />
      <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[600px] h-[600px] bg-gradient-radial from-[#A3BC02]/3 to-transparent rounded-full blur-2xl pointer-events-none" />

      <div className="relative z-10 flex flex-col items-center justify-center min-h-screen px-6">
        <motion.div
          className="text-center max-w-2xl mx-auto"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          {/* Monolith Logo */}
          <motion.div
            className="mb-8"
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.6, delay: 0.1 }}
          >
            <Link
              href="/"
              className="text-4xl md:text-5xl font-serif text-[#3E4128] hover:text-[#A3BC02] transition-colors inline-block"
            >
              Mono
              <span className="underline decoration-[#A3BC02] decoration-2 underline-offset-2">l</span>
              ith
            </Link>
          </motion.div>

          {/* 404 Icon and Message */}
          <motion.div
            className="mb-8"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
          >
            <div className="flex justify-center mb-6">
              <div className="p-4 bg-[#A3BC02]/10 rounded-full">
                <FileQuestion className="w-16 h-16 text-[#A3BC02]" />
              </div>
            </div>

            <h1 className="text-6xl md:text-8xl font-bold text-[#3E4128] mb-4">404</h1>
            <h2 className="text-2xl md:text-3xl font-serif text-[#3E4128] mb-4">Oops! Page not found</h2>
            <p className="text-lg text-gray-600 mb-8 max-w-md mx-auto">
              The page you're looking for doesn't exist or has been moved. Let's help you find what you need.
            </p>
          </motion.div>

          {/* Navigation Buttons */}
          <motion.div
            className="flex flex-col sm:flex-row gap-4 justify-center items-center"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.4 }}
          >
            <Button
              asChild
              className="bg-[#A3BC02] hover:bg-[#8BA000] text-white px-6 py-3 rounded-lg font-medium transition-all duration-200 shadow-lg shadow-[#A3BC02]/20 hover:shadow-[#A3BC02]/30"
            >
              <Link href="/dashboard" className="flex items-center gap-2">
                <LayoutDashboard className="w-5 h-5" />
                Go to Dashboard
              </Link>
            </Button>

            <Button
              asChild
              variant="outline"
              className="border-[#A3BC02]/30 text-[#3E4128] hover:bg-[#A3BC02]/5 px-6 py-3 rounded-lg font-medium transition-all duration-200"
            >
              <Link href="/" className="flex items-center gap-2">
                <Home className="w-5 h-5" />
                Back to Home
              </Link>
            </Button>

            <Button
              asChild
              variant="ghost"
              className="text-gray-600 hover:text-[#3E4128] px-6 py-3 rounded-lg font-medium transition-all duration-200"
              onClick={() => window.history.back()}
            >
              <span className="flex items-center gap-2 cursor-pointer">
                <ArrowLeft className="w-5 h-5" />
                Go Back
              </span>
            </Button>
          </motion.div>

          {/* Breadcrumb */}
          <motion.div
            className="mt-12 text-sm text-gray-500"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.6, delay: 0.5 }}
          >
            <Link href="/" className="hover:text-[#A3BC02] transition-colors">
              Home
            </Link>
            <span className="mx-2">→</span>
            <span>404 Error</span>
          </motion.div>
        </motion.div>
      </div>
    </div>
  )
}

================
File: app/page.tsx
================
"use client";

import Header from "@/components/landing/Header";
import Hero from "@/components/landing/Hero";
import CompanyLogos from "@/components/landing/CompanyLogos";
import FindInNaturalLanguage from "@/components/landing/FindInNaturalLanguage";
import Security from "@/components/landing/Security";
import MissionStatement from "@/components/landing/MissionStatement";
import FinalCTA from "@/components/landing/FinalCTA";
import FocusMode from "@/components/landing/FocusMode";
import Language from "@/components/landing/Language";
import Pricing from "@/components/landing/Pricing";
import Footer from "@/components/landing/Footer";

export default function HomePage() {
  return (
    <div className="min-h-dvh">
      <Header />
      <Hero />
      <CompanyLogos />
      <FindInNaturalLanguage />
      <Security />
      <MissionStatement />
      <FinalCTA />
      <FocusMode />
      <Language />
      <Pricing />
      <Footer />
    </div>
  );
}

================
File: hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: hooks/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: lib/api-client.ts
================
import { cookies } from "next/headers";
import { NextResponse } from "next/server";

interface ApiRequestOptions extends RequestInit {
  skipAuth?: boolean;
}

export async function apiRequest(
  url: string,
  options: ApiRequestOptions = {}
): Promise<Response> {
  const cookieStore = await cookies();
  let accessToken = cookieStore.get("auth_token");
  const refreshToken = cookieStore.get("refresh_token");

  const headers = new Headers(options.headers);

  // Add auth header if token exists and not skipping auth
  if (!options.skipAuth && accessToken?.value) {
    headers.set("Authorization", `Bearer ${accessToken.value}`);
  }

  // Make the request
  let response = await fetch(url, {
    ...options,
    headers,
  });

  // If 401 and we have refresh token, try to refresh once
  if (response.status === 401 && refreshToken?.value && !options.skipAuth) {
    try {
      // Call refresh endpoint
      const refreshResponse = await fetch(`${process.env.FASTAPI_BASE_URL}/api/v1/auth/refresh`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ refresh_token: refreshToken.value })
      });

      if (refreshResponse.ok) {
        const { access_token, refresh_token: new_refresh_token } = await refreshResponse.json();
        
        // Update stored tokens
        cookieStore.set("auth_token", access_token, {
          httpOnly: true,
          secure: process.env.NODE_ENV === "production",
          sameSite: "lax",
          path: "/",
          maxAge: 60 * 60, // 1 hour for access token
        });

        cookieStore.set("refresh_token", new_refresh_token, {
          httpOnly: true,
          secure: process.env.NODE_ENV === "production",
          sameSite: "lax",
          path: "/",
          maxAge: 30 * 24 * 60 * 60, // 30 days for refresh token
        });

        // Retry original request with new token
        headers.set("Authorization", `Bearer ${access_token}`);
        response = await fetch(url, {
          ...options,
          headers,
        });
      } else {
        // Refresh failed - redirect to login
        if (typeof window !== 'undefined') {
          window.location.href = '/auth/login';
        }
      }
    } catch (refreshError) {
      console.error('Token refresh failed:', refreshError);
      if (typeof window !== 'undefined') {
        window.location.href = '/auth/login';
      }
    }
  }

  return response;
}

// Helper function for making backend API requests
export async function backendApiRequest(
  endpoint: string,
  options: ApiRequestOptions = {}
): Promise<Response> {
  const baseUrl = process.env.FASTAPI_BASE_URL;
  if (!baseUrl) {
    throw new Error("FASTAPI_BASE_URL is not configured");
  }

  const url = `${baseUrl}${endpoint}`;
  return apiRequest(url, options);
}

// Type-safe wrapper for JSON responses
export async function apiRequestJson<T = any>(
  url: string,
  options: ApiRequestOptions = {}
): Promise<{ data?: T; error?: any; response: Response }> {
  try {
    const response = await apiRequest(url, options);
    
    if (!response.ok) {
      const error = await response.json().catch(() => ({
        message: "An error occurred",
      }));
      return { error, response };
    }

    const data = await response.json();
    return { data, response };
  } catch (error) {
    return {
      error: {
        message: error instanceof Error ? error.message : "Network error",
      },
      response: new Response(null, { status: 500 }),
    };
  }
}

================
File: lib/auth-api-client.ts
================
import { cookies } from "next/headers";

interface ApiRequestOptions extends RequestInit {
  skipAuth?: boolean;
}

// Request queue to hold requests during token refresh
interface QueuedRequest {
  resolve: (response: Response) => void;
  reject: (error: any) => void;
  url: string;
  options: ApiRequestOptions;
}

let isRefreshing = false;
let requestQueue: QueuedRequest[] = [];

// Process queued requests after refresh
function processQueue(error: Error | null = null) {
  const queue = [...requestQueue];
  requestQueue = [];
  
  queue.forEach(({ resolve, reject, url, options }) => {
    if (error) {
      reject(error);
    } else {
      // Retry the request
      authApiRequest(url, options).then(resolve).catch(reject);
    }
  });
}

// Server-side auth-aware API request function
export async function authApiRequest(
  url: string,
  options: ApiRequestOptions = {}
): Promise<Response> {
  const cookieStore = await cookies();
  const accessToken = cookieStore.get("auth_token");
  const refreshToken = cookieStore.get("refresh_token");

  const headers = new Headers(options.headers);

  // Add auth header if token exists and not skipping auth
  if (!options.skipAuth && accessToken?.value) {
    headers.set("Authorization", `Bearer ${accessToken.value}`);
  }

  // Make the initial request
  let response = await fetch(url, {
    ...options,
    headers,
  });

  // Handle 401 responses
  if (response.status === 401 && refreshToken?.value && !options.skipAuth) {
    // If already refreshing, queue this request
    if (isRefreshing) {
      return new Promise((resolve, reject) => {
        requestQueue.push({ resolve, reject, url, options });
      });
    }

    isRefreshing = true;

    try {
      // Attempt to refresh token
      const refreshResponse = await fetch(`${process.env.FASTAPI_BASE_URL}/api/v1/auth/refresh`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ refresh_token: refreshToken.value })
      });

      if (refreshResponse.ok) {
        const { access_token, refresh_token: new_refresh_token } = await refreshResponse.json();
        
        // Update stored tokens
        cookieStore.set("auth_token", access_token, {
          httpOnly: true,
          secure: process.env.NODE_ENV === "production",
          sameSite: "lax",
          path: "/",
          maxAge: 60 * 60, // 1 hour for access token
        });

        cookieStore.set("refresh_token", new_refresh_token, {
          httpOnly: true,
          secure: process.env.NODE_ENV === "production",
          sameSite: "lax",
          path: "/",
          maxAge: 30 * 24 * 60 * 60, // 30 days for refresh token
        });

        // Retry original request with new token
        headers.set("Authorization", `Bearer ${access_token}`);
        response = await fetch(url, {
          ...options,
          headers,
        });

        // Process any queued requests
        processQueue();
      } else {
        // Refresh failed - clear tokens
        cookieStore.delete("auth_token");
        cookieStore.delete("refresh_token");
        
        // Process queue with error
        processQueue(new Error('Token refresh failed'));
      }
    } catch (refreshError) {
      console.error('Token refresh error:', refreshError);
      
      // Clear tokens on error
      cookieStore.delete("auth_token");
      cookieStore.delete("refresh_token");
      
      // Process queue with error
      processQueue(refreshError as Error);
    } finally {
      isRefreshing = false;
    }
  }

  return response;
}

// Helper function for making backend API requests
export async function backendAuthApiRequest(
  endpoint: string,
  options: ApiRequestOptions = {}
): Promise<Response> {
  const baseUrl = process.env.FASTAPI_BASE_URL;
  if (!baseUrl) {
    throw new Error("FASTAPI_BASE_URL is not configured");
  }

  const url = `${baseUrl}${endpoint}`;
  return authApiRequest(url, options);
}

// Type-safe wrapper for JSON responses
export async function authApiRequestJson<T = any>(
  url: string,
  options: ApiRequestOptions = {}
): Promise<{ data?: T; error?: any; response: Response }> {
  try {
    const response = await authApiRequest(url, options);
    
    if (!response.ok) {
      const error = await response.json().catch(() => ({
        message: "An error occurred",
      }));
      return { error, response };
    }

    const data = await response.json();
    return { data, response };
  } catch (error) {
    return {
      error: {
        message: error instanceof Error ? error.message : "Network error",
      },
      response: new Response(null, { status: 500 }),
    };
  }
}

================
File: lib/auth-context.tsx
================
"use client";

import React, { createContext, useContext, useState, useCallback, useRef, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { jwtDecode } from 'jwt-decode';

interface User {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
  tenant_id: string;
  role: string;
}

interface JWTPayload {
  exp: number;
  iat: number;
  sub?: string;
  [key: string]: any;
}

interface AuthContextValue {
  // State
  isAuthenticated: boolean;
  isLoading: boolean;
  user: User | null;
  
  // Token management
  getAccessToken: () => Promise<string | null>;
  
  // Auth actions
  login: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  refreshTokens: () => Promise<boolean>;
  
  // Utilities
  checkAuth: () => Promise<void>;
}

const AuthContext = createContext<AuthContextValue | undefined>(undefined);

// Singleton promise for token refresh to prevent concurrent refreshes
let refreshPromise: Promise<boolean> | null = null;

// Helper function to extract expiration from JWT
function getTokenExpiration(token: string): Date | null {
  try {
    const decoded = jwtDecode<JWTPayload>(token);
    if (decoded.exp) {
      return new Date(decoded.exp * 1000);
    }
  } catch (error) {
    console.warn('Failed to decode JWT token:', error);
  }
  return null;
}

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const router = useRouter();
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState<User | null>(null);
  
  // Timer for proactive refresh
  const refreshTimerRef = useRef<NodeJS.Timeout | null>(null);
  const tokenExpiresAtRef = useRef<Date | null>(null);
  
  // Prevent multiple simultaneous auth checks
  const authCheckInProgressRef = useRef(false);
  const mountedRef = useRef(false);

  // Clear refresh timer
  const clearRefreshTimer = () => {
    if (refreshTimerRef.current) {
      clearTimeout(refreshTimerRef.current);
      refreshTimerRef.current = null;
    }
  };

  // Set up proactive token refresh
  const setupRefreshTimer = (expiresAt: Date) => {
    clearRefreshTimer();
    
    const now = new Date();
    const expiresTime = expiresAt.getTime();
    const nowTime = now.getTime();
    
    // Refresh 5 minutes before expiration
    const refreshTime = expiresTime - (5 * 60 * 1000);
    const timeUntilRefresh = refreshTime - nowTime;
    
    if (timeUntilRefresh > 0) {
      refreshTimerRef.current = setTimeout(async () => {
        await refreshTokens();
      }, timeUntilRefresh);
    }
  };

  // Get access token (checks expiration and refreshes if needed)
  const getAccessToken = useCallback(async (): Promise<string | null> => {
    try {
      // Check if we need to refresh based on expiration time
      if (tokenExpiresAtRef.current) {
        const now = new Date();
        const expiresAt = tokenExpiresAtRef.current;
        
        // If token expires in less than 1 minute, refresh now
        if (expiresAt.getTime() - now.getTime() < 60 * 1000) {
          const refreshed = await refreshTokens();
          if (!refreshed) {
            return null;
          }
        }
      }
      
      // Get current token from cookie via API endpoint
      const response = await fetch('/api/auth/me', {
        method: 'GET',
        credentials: 'include',
      });
      
      if (response.ok) {
        const data = await response.json();
        return data.access_token || null;
      }
      
      return null;
    } catch (error) {
      console.error('Error getting access token:', error);
      return null;
    }
  }, []);

  // Refresh tokens with mutex to prevent concurrent refreshes
  const refreshTokens = useCallback(async (): Promise<boolean> => {
    // If a refresh is already in progress, wait for it
    if (refreshPromise) {
      return await refreshPromise;
    }
    
    // Create new refresh promise
    refreshPromise = (async () => {
      try {
        const response = await fetch('/api/auth/refresh', {
          method: 'POST',
          credentials: 'include',
        });
        
        if (response.ok) {
          const data = await response.json();
          
          // Update expiration time
          if (data.expires_at) {
            tokenExpiresAtRef.current = new Date(data.expires_at);
            setupRefreshTimer(tokenExpiresAtRef.current);
          }
          
          return true;
        } else {
          console.error('Token refresh failed:', response.status);
          
          // Clear auth state on refresh failure
          setIsAuthenticated(false);
          setUser(null);
          clearRefreshTimer();
          
          // Only redirect to login if it's a permanent auth failure
          if (response.status === 401) {
            router.push('/login');
          }
          
          return false;
        }
      } catch (error) {
        console.error('Token refresh error:', error);
        return false;
      } finally {
        // Clear the refresh promise
        refreshPromise = null;
      }
    })();
    
    return await refreshPromise;
  }, [router]);

  // Login function
  const login = useCallback(async (email: string, password: string) => {
    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
        credentials: 'include',
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || 'Login failed');
      }
      
      // Set user data
      setUser(data.user);
      setIsAuthenticated(true);
      
      // Extract expiration from JWT or use provided expires_at
      const expiresAt = data.expires_at ? new Date(data.expires_at) : new Date(Date.now() + 60 * 60 * 1000); // 1 hour fallback
      tokenExpiresAtRef.current = expiresAt;
      setupRefreshTimer(expiresAt);
      
      // Redirect based on new company status
      if (data.is_new_company) {
        router.push('/onboarding');
      } else {
        router.push('/dashboard');
      }
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    }
  }, [router]);

  // Logout function
  const logout = useCallback(async () => {
    try {
      await fetch('/api/auth/logout', {
        method: 'POST',
        credentials: 'include',
      });
    } catch (error) {
      console.error('Logout error:', error);
    }
    
    // Clear local state
    setIsAuthenticated(false);
    setUser(null);
    clearRefreshTimer();
    tokenExpiresAtRef.current = null;
    
    // Redirect to login
    router.push('/login');
  }, [router]);

  // Check authentication status
  const checkAuth = useCallback(async () => {
    // Prevent multiple simultaneous auth checks
    if (authCheckInProgressRef.current || !mountedRef.current) {
      return;
    }
    
    authCheckInProgressRef.current = true;
    
    try {
      setIsLoading(true);
      
      const response = await fetch('/api/auth/me', {
        method: 'GET',
        credentials: 'include',
      });
      
      if (!mountedRef.current) return; // Component unmounted during fetch
      
      if (response.ok) {
        const data = await response.json();
        setUser(data.user);
        setIsAuthenticated(true);
        
        // Set up token expiration - try to extract from JWT if available
        let expiresAt: Date;
        if (data.access_token) {
          expiresAt = getTokenExpiration(data.access_token) || new Date(Date.now() + 60 * 60 * 1000);
        } else {
          expiresAt = data.expires_at ? new Date(data.expires_at) : new Date(Date.now() + 60 * 60 * 1000);
        }
        tokenExpiresAtRef.current = expiresAt;
        setupRefreshTimer(expiresAt);
      } else if (response.status === 401) {
        // Don't log error for 401 - it's expected when not authenticated
        setIsAuthenticated(false);
        setUser(null);
        clearRefreshTimer();
      } else {
        console.warn('Auth check failed:', response.status, response.statusText);
        setIsAuthenticated(false);
        setUser(null);
        clearRefreshTimer();
      }
    } catch (error) {
      if (!mountedRef.current) return; // Component unmounted during error
      console.error('Auth check error:', error);
      setIsAuthenticated(false);
      setUser(null);
      clearRefreshTimer();
    } finally {
      authCheckInProgressRef.current = false;
      if (mountedRef.current) {
        setIsLoading(false);
      }
    }
  }, []);

  // Track mounted state and initial auth check
  useEffect(() => {
    mountedRef.current = true;
    checkAuth();
    
    return () => {
      mountedRef.current = false;
      clearRefreshTimer();
    };
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  // Handle visibility change - refresh if needed when tab becomes active
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (!document.hidden && isAuthenticated && tokenExpiresAtRef.current) {
        const now = new Date();
        const expiresAt = tokenExpiresAtRef.current;
        
        // If token expires in less than 5 minutes, refresh now
        if (expiresAt.getTime() - now.getTime() < 5 * 60 * 1000) {
          refreshTokens();
        }
      }
    };
    
    document.addEventListener('visibilitychange', handleVisibilityChange);
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [isAuthenticated, refreshTokens]);

  const value: AuthContextValue = {
    isAuthenticated,
    isLoading,
    user,
    getAccessToken,
    login,
    logout,
    refreshTokens,
    checkAuth,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

================
File: lib/auth-usage-examples.md
================
# Authentication System Usage Guide

## Overview
The new authentication system provides centralized token management with automatic refresh, preventing "Already Used" refresh token errors and ensuring seamless user experience.

## Key Features
- **Automatic Token Refresh**: Tokens refresh 5 minutes before expiration
- **Concurrent Request Handling**: Prevents multiple simultaneous refresh attempts
- **Request Queuing**: Queues requests during token refresh
- **Proactive Management**: Refreshes tokens when app becomes active

## Usage in Components

### Client Components

```typescript
// Use the auth hook in client components
"use client";

import { useAuth } from '@/lib/auth-context';
import { clientApiRequest, clientApiRequestJson } from '@/lib/client-api';

export function MyClientComponent() {
  const { isAuthenticated, user, logout } = useAuth();

  const fetchData = async () => {
    // The client API automatically handles auth
    const { data, error } = await clientApiRequestJson('/api/documents');
    
    if (error) {
      console.error('Error fetching documents:', error);
      return;
    }
    
    // Use data
  };

  if (!isAuthenticated) {
    return <div>Please log in</div>;
  }

  return (
    <div>
      <h1>Welcome, {user?.first_name}!</h1>
      <button onClick={logout}>Logout</button>
    </div>
  );
}
```

### Server Components

```typescript
// Use the auth-aware API client in server components
import { authApiRequest, authApiRequestJson } from '@/lib/auth-api-client';

export default async function MyServerComponent() {
  // The auth API client automatically handles tokens
  const { data, error } = await authApiRequestJson(
    `${process.env.FASTAPI_BASE_URL}/api/v1/documents`
  );

  if (error) {
    return <div>Error loading documents</div>;
  }

  return (
    <div>
      {data.documents.map(doc => (
        <div key={doc.id}>{doc.title}</div>
      ))}
    </div>
  );
}
```

### API Routes

```typescript
// app/api/my-endpoint/route.ts
import { NextResponse } from 'next/server';
import { backendAuthApiRequest } from '@/lib/auth-api-client';

export async function GET() {
  try {
    // Automatically includes auth headers
    const response = await backendAuthApiRequest('/api/v1/some-endpoint');
    
    if (!response.ok) {
      return NextResponse.json(
        { error: 'Failed to fetch data' },
        { status: response.status }
      );
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
```

## Token Lifecycle

1. **Login**: User logs in, receives 1-hour access token and 30-day refresh token
2. **Active Use**: Tokens refresh automatically 5 minutes before expiration
3. **Inactive Tab**: When tab becomes active, checks if refresh is needed
4. **API Calls**: All 401 responses trigger automatic refresh (with mutex)
5. **Logout**: Clears all tokens and redirects to login

## Migration from Old System

Replace old API calls:

```typescript
// Old way (prone to refresh token reuse)
const response = await fetch('/api/documents', {
  headers: { 'Authorization': `Bearer ${token}` }
});

// New way (automatic token management)
const { data, error } = await clientApiRequestJson('/api/documents');
```

## Troubleshooting

- **Still getting 401 errors**: Ensure you're using the new API clients
- **Redirect loops**: Check that auth pages are in the public routes list
- **Token not refreshing**: Verify AuthProvider is wrapped around your app

================
File: lib/client-api.ts
================
"use client";

interface ApiRequestOptions extends RequestInit {
  skipAuth?: boolean;
}

// Request queue to hold requests during token refresh
interface QueuedRequest {
  resolve: (response: Response) => void;
  reject: (error: any) => void;
  url: string;
  options: ApiRequestOptions;
}

let isRefreshing = false;
let requestQueue: QueuedRequest[] = [];

// Process queued requests after refresh
async function processQueue(error: Error | null = null) {
  const queue = [...requestQueue];
  requestQueue = [];
  
  for (const { resolve, reject, url, options } of queue) {
    if (error) {
      reject(error);
    } else {
      try {
        const response = await clientApiRequest(url, options);
        resolve(response);
      } catch (err) {
        reject(err);
      }
    }
  }
}

// Client-side API request with automatic token refresh
export async function clientApiRequest(
  url: string,
  options: ApiRequestOptions = {}
): Promise<Response> {
  // Skip auth for auth endpoints
  const isAuthEndpoint = url.includes('/api/auth/') && 
    (url.includes('/login') || url.includes('/signup') || url.includes('/refresh'));
  
  if (isAuthEndpoint) {
    options.skipAuth = true;
  }

  // Always include credentials for cookie handling
  const requestOptions: RequestInit = {
    ...options,
    credentials: 'include',
  };

  // Make the initial request
  let response = await fetch(url, requestOptions);

  // Handle 401 responses
  if (response.status === 401 && !options.skipAuth) {
    // If already refreshing, queue this request
    if (isRefreshing) {
      return new Promise((resolve, reject) => {
        requestQueue.push({ resolve, reject, url, options });
      });
    }

    isRefreshing = true;

    try {
      // Attempt to refresh token
      const refreshResponse = await fetch('/api/auth/refresh', {
        method: 'POST',
        credentials: 'include',
      });

      if (refreshResponse.ok) {
        // Retry original request
        response = await fetch(url, requestOptions);
        
        // Process any queued requests
        await processQueue();
      } else {
        // Refresh failed - redirect to login
        window.location.href = '/login';
        
        // Process queue with error
        await processQueue(new Error('Authentication failed'));
      }
    } catch (refreshError) {
      console.error('Token refresh error:', refreshError);
      
      // Redirect to login on refresh error
      window.location.href = '/login';
      
      // Process queue with error
      await processQueue(refreshError as Error);
    } finally {
      isRefreshing = false;
    }
  }

  return response;
}

// Type-safe wrapper for JSON responses
export async function clientApiRequestJson<T = any>(
  url: string,
  options: ApiRequestOptions = {}
): Promise<{ data?: T; error?: any; ok: boolean }> {
  try {
    const response = await clientApiRequest(url, options);
    
    if (!response.ok) {
      const error = await response.json().catch(() => ({
        message: "An error occurred",
      }));
      return { error, ok: false };
    }

    const data = await response.json();
    return { data, ok: true };
  } catch (error) {
    return {
      error: {
        message: error instanceof Error ? error.message : "Network error",
      },
      ok: false,
    };
  }
}

// Helper to build backend API URLs
export function buildBackendUrl(endpoint: string): string {
  // In client-side code, we use relative URLs that go through Next.js API routes
  return `/api/proxy${endpoint}`;
}

================
File: lib/countries.ts
================
export interface Country {
  code: string;
  name: string;
  phone: string;
}

export const countries: Country[] = [
  { code: "US", name: "United States", phone: "1" },
  { code: "CA", name: "Canada", phone: "1" },
  { code: "GB", name: "United Kingdom", phone: "44" },
  { code: "AF", name: "Afghanistan", phone: "93" },
  { code: "AL", name: "Albania", phone: "355" },
  { code: "DZ", name: "Algeria", phone: "213" },
  { code: "AS", name: "American Samoa", phone: "1-684" },
  { code: "AD", name: "Andorra", phone: "376" },
  { code: "AO", name: "Angola", phone: "244" },
  { code: "AI", name: "Anguilla", phone: "1-264" },
  { code: "AQ", name: "Antarctica", phone: "672" },
  { code: "AG", name: "Antigua and Barbuda", phone: "1-268" },
  { code: "AR", name: "Argentina", phone: "54" },
  { code: "AM", name: "Armenia", phone: "374" },
  { code: "AW", name: "Aruba", phone: "297" },
  { code: "AU", name: "Australia", phone: "61" },
  { code: "AT", name: "Austria", phone: "43" },
  { code: "AZ", name: "Azerbaijan", phone: "994" },
  { code: "BS", name: "Bahamas", phone: "1-242" },
  { code: "BH", name: "Bahrain", phone: "973" },
  { code: "BD", name: "Bangladesh", phone: "880" },
  { code: "BB", name: "Barbados", phone: "1-246" },
  { code: "BY", name: "Belarus", phone: "375" },
  { code: "BE", name: "Belgium", phone: "32" },
  { code: "BZ", name: "Belize", phone: "501" },
  { code: "BJ", name: "Benin", phone: "229" },
  { code: "BM", name: "Bermuda", phone: "1-441" },
  { code: "BT", name: "Bhutan", phone: "975" },
  { code: "BO", name: "Bolivia", phone: "591" },
  { code: "BA", name: "Bosnia and Herzegovina", phone: "387" },
  { code: "BW", name: "Botswana", phone: "267" },
  { code: "BR", name: "Brazil", phone: "55" },
  { code: "IO", name: "British Indian Ocean Territory", phone: "246" },
  { code: "VG", name: "British Virgin Islands", phone: "1-284" },
  { code: "BN", name: "Brunei", phone: "673" },
  { code: "BG", name: "Bulgaria", phone: "359" },
  { code: "BF", name: "Burkina Faso", phone: "226" },
  { code: "BI", name: "Burundi", phone: "257" },
  { code: "KH", name: "Cambodia", phone: "855" },
  { code: "CM", name: "Cameroon", phone: "237" },
  { code: "CV", name: "Cape Verde", phone: "238" },
  { code: "KY", name: "Cayman Islands", phone: "1-345" },
  { code: "CF", name: "Central African Republic", phone: "236" },
  { code: "TD", name: "Chad", phone: "235" },
  { code: "CL", name: "Chile", phone: "56" },
  { code: "CN", name: "China", phone: "86" },
  { code: "CX", name: "Christmas Island", phone: "61" },
  { code: "CC", name: "Cocos Islands", phone: "61" },
  { code: "CO", name: "Colombia", phone: "57" },
  { code: "KM", name: "Comoros", phone: "269" },
  { code: "CK", name: "Cook Islands", phone: "682" },
  { code: "CR", name: "Costa Rica", phone: "506" },
  { code: "HR", name: "Croatia", phone: "385" },
  { code: "CU", name: "Cuba", phone: "53" },
  { code: "CW", name: "Curacao", phone: "599" },
  { code: "CY", name: "Cyprus", phone: "357" },
  { code: "CZ", name: "Czech Republic", phone: "420" },
  { code: "CD", name: "Democratic Republic of the Congo", phone: "243" },
  { code: "DK", name: "Denmark", phone: "45" },
  { code: "DJ", name: "Djibouti", phone: "253" },
  { code: "DM", name: "Dominica", phone: "1-767" },
  { code: "DO", name: "Dominican Republic", phone: "1-809, 1-829, 1-849" },
  { code: "TL", name: "East Timor", phone: "670" },
  { code: "EC", name: "Ecuador", phone: "593" },
  { code: "EG", name: "Egypt", phone: "20" },
  { code: "SV", name: "El Salvador", phone: "503" },
  { code: "GQ", name: "Equatorial Guinea", phone: "240" },
  { code: "ER", name: "Eritrea", phone: "291" },
  { code: "EE", name: "Estonia", phone: "372" },
  { code: "ET", name: "Ethiopia", phone: "251" },
  { code: "FK", name: "Falkland Islands", phone: "500" },
  { code: "FO", name: "Faroe Islands", phone: "298" },
  { code: "FJ", name: "Fiji", phone: "679" },
  { code: "FI", name: "Finland", phone: "358" },
  { code: "FR", name: "France", phone: "33" },
  { code: "GF", name: "French Guiana", phone: "594" },
  { code: "PF", name: "French Polynesia", phone: "689" },
  { code: "GA", name: "Gabon", phone: "241" },
  { code: "GM", name: "Gambia", phone: "220" },
  { code: "GE", name: "Georgia", phone: "995" },
  { code: "DE", name: "Germany", phone: "49" },
  { code: "GH", name: "Ghana", phone: "233" },
  { code: "GI", name: "Gibraltar", phone: "350" },
  { code: "GR", name: "Greece", phone: "30" },
  { code: "GL", name: "Greenland", phone: "299" },
  { code: "GD", name: "Grenada", phone: "1-473" },
  { code: "GP", name: "Guadeloupe", phone: "590" },
  { code: "GU", name: "Guam", phone: "1-671" },
  { code: "GT", name: "Guatemala", phone: "502" },
  { code: "GG", name: "Guernsey", phone: "44-1481" },
  { code: "GN", name: "Guinea", phone: "224" },
  { code: "GW", name: "Guinea-Bissau", phone: "245" },
  { code: "GY", name: "Guyana", phone: "592" },
  { code: "HT", name: "Haiti", phone: "509" },
  { code: "HN", name: "Honduras", phone: "504" },
  { code: "HK", name: "Hong Kong", phone: "852" },
  { code: "HU", name: "Hungary", phone: "36" },
  { code: "IS", name: "Iceland", phone: "354" },
  { code: "IN", name: "India", phone: "91" },
  { code: "ID", name: "Indonesia", phone: "62" },
  { code: "IR", name: "Iran", phone: "98" },
  { code: "IQ", name: "Iraq", phone: "964" },
  { code: "IE", name: "Ireland", phone: "353" },
  { code: "IM", name: "Isle of Man", phone: "44-1624" },
  { code: "IL", name: "Israel", phone: "972" },
  { code: "IT", name: "Italy", phone: "39" },
  { code: "CI", name: "Ivory Coast", phone: "225" },
  { code: "JM", name: "Jamaica", phone: "1-876" },
  { code: "JP", name: "Japan", phone: "81" },
  { code: "JE", name: "Jersey", phone: "44-1534" },
  { code: "JO", name: "Jordan", phone: "962" },
  { code: "KZ", name: "Kazakhstan", phone: "7" },
  { code: "KE", name: "Kenya", phone: "254" },
  { code: "KI", name: "Kiribati", phone: "686" },
  { code: "XK", name: "Kosovo", phone: "383" },
  { code: "KW", name: "Kuwait", phone: "965" },
  { code: "KG", name: "Kyrgyzstan", phone: "996" },
  { code: "LA", name: "Laos", phone: "856" },
  { code: "LV", name: "Latvia", phone: "371" },
  { code: "LB", name: "Lebanon", phone: "961" },
  { code: "LS", name: "Lesotho", phone: "266" },
  { code: "LR", name: "Liberia", phone: "231" },
  { code: "LY", name: "Libya", phone: "218" },
  { code: "LI", name: "Liechtenstein", phone: "423" },
  { code: "LT", name: "Lithuania", phone: "370" },
  { code: "LU", name: "Luxembourg", phone: "352" },
  { code: "MO", name: "Macau", phone: "853" },
  { code: "MK", name: "Macedonia", phone: "389" },
  { code: "MG", name: "Madagascar", phone: "261" },
  { code: "MW", name: "Malawi", phone: "265" },
  { code: "MY", name: "Malaysia", phone: "60" },
  { code: "MV", name: "Maldives", phone: "960" },
  { code: "ML", name: "Mali", phone: "223" },
  { code: "MT", name: "Malta", phone: "356" },
  { code: "MH", name: "Marshall Islands", phone: "692" },
  { code: "MQ", name: "Martinique", phone: "596" },
  { code: "MR", name: "Mauritania", phone: "222" },
  { code: "MU", name: "Mauritius", phone: "230" },
  { code: "YT", name: "Mayotte", phone: "262" },
  { code: "MX", name: "Mexico", phone: "52" },
  { code: "FM", name: "Micronesia", phone: "691" },
  { code: "MD", name: "Moldova", phone: "373" },
  { code: "MC", name: "Monaco", phone: "377" },
  { code: "MN", name: "Mongolia", phone: "976" },
  { code: "ME", name: "Montenegro", phone: "382" },
  { code: "MS", name: "Montserrat", phone: "1-664" },
  { code: "MA", name: "Morocco", phone: "212" },
  { code: "MZ", name: "Mozambique", phone: "258" },
  { code: "MM", name: "Myanmar", phone: "95" },
  { code: "NA", name: "Namibia", phone: "264" },
  { code: "NR", name: "Nauru", phone: "674" },
  { code: "NP", name: "Nepal", phone: "977" },
  { code: "NL", name: "Netherlands", phone: "31" },
  { code: "NC", name: "New Caledonia", phone: "687" },
  { code: "NZ", name: "New Zealand", phone: "64" },
  { code: "NI", name: "Nicaragua", phone: "505" },
  { code: "NE", name: "Niger", phone: "227" },
  { code: "NG", name: "Nigeria", phone: "234" },
  { code: "NU", name: "Niue", phone: "683" },
  { code: "NF", name: "Norfolk Island", phone: "672" },
  { code: "KP", name: "North Korea", phone: "850" },
  { code: "MP", name: "Northern Mariana Islands", phone: "1-670" },
  { code: "NO", name: "Norway", phone: "47" },
  { code: "OM", name: "Oman", phone: "968" },
  { code: "PK", name: "Pakistan", phone: "92" },
  { code: "PW", name: "Palau", phone: "680" },
  { code: "PS", name: "Palestine", phone: "970" },
  { code: "PA", name: "Panama", phone: "507" },
  { code: "PG", name: "Papua New Guinea", phone: "675" },
  { code: "PY", name: "Paraguay", phone: "595" },
  { code: "PE", name: "Peru", phone: "51" },
  { code: "PH", name: "Philippines", phone: "63" },
  { code: "PL", name: "Poland", phone: "48" },
  { code: "PT", name: "Portugal", phone: "351" },
  { code: "PR", name: "Puerto Rico", phone: "1-787, 1-939" },
  { code: "QA", name: "Qatar", phone: "974" },
  { code: "CG", name: "Republic of the Congo", phone: "242" },
  { code: "RE", name: "Reunion", phone: "262" },
  { code: "RO", name: "Romania", phone: "40" },
  { code: "RU", name: "Russia", phone: "7" },
  { code: "RW", name: "Rwanda", phone: "250" },
  { code: "BL", name: "Saint Barthelemy", phone: "590" },
  { code: "SH", name: "Saint Helena", phone: "290" },
  { code: "KN", name: "Saint Kitts and Nevis", phone: "1-869" },
  { code: "LC", name: "Saint Lucia", phone: "1-758" },
  { code: "MF", name: "Saint Martin", phone: "590" },
  { code: "PM", name: "Saint Pierre and Miquelon", phone: "508" },
  { code: "VC", name: "Saint Vincent and the Grenadines", phone: "1-784" },
  { code: "WS", name: "Samoa", phone: "685" },
  { code: "SM", name: "San Marino", phone: "378" },
  { code: "ST", name: "Sao Tome and Principe", phone: "239" },
  { code: "SA", name: "Saudi Arabia", phone: "966" },
  { code: "SN", name: "Senegal", phone: "221" },
  { code: "RS", name: "Serbia", phone: "381" },
  { code: "SC", name: "Seychelles", phone: "248" },
  { code: "SL", name: "Sierra Leone", phone: "232" },
  { code: "SG", name: "Singapore", phone: "65" },
  { code: "SX", name: "Sint Maarten", phone: "1-721" },
  { code: "SK", name: "Slovakia", phone: "421" },
  { code: "SI", name: "Slovenia", phone: "386" },
  { code: "SB", name: "Solomon Islands", phone: "677" },
  { code: "SO", name: "Somalia", phone: "252" },
  { code: "ZA", name: "South Africa", phone: "27" },
  { code: "KR", name: "South Korea", phone: "82" },
  { code: "SS", name: "South Sudan", phone: "211" },
  { code: "ES", name: "Spain", phone: "34" },
  { code: "LK", name: "Sri Lanka", phone: "94" },
  { code: "SD", name: "Sudan", phone: "249" },
  { code: "SR", name: "Suriname", phone: "597" },
  { code: "SJ", name: "Svalbard and Jan Mayen", phone: "47" },
  { code: "SZ", name: "Swaziland", phone: "268" },
  { code: "SE", name: "Sweden", phone: "46" },
  { code: "CH", name: "Switzerland", phone: "41" },
  { code: "SY", name: "Syria", phone: "963" },
  { code: "TW", name: "Taiwan", phone: "886" },
  { code: "TJ", name: "Tajikistan", phone: "992" },
  { code: "TZ", name: "Tanzania", phone: "255" },
  { code: "TH", name: "Thailand", phone: "66" },
  { code: "TG", name: "Togo", phone: "228" },
  { code: "TK", name: "Tokelau", phone: "690" },
  { code: "TO", name: "Tonga", phone: "676" },
  { code: "TT", name: "Trinidad and Tobago", phone: "1-868" },
  { code: "TN", name: "Tunisia", phone: "216" },
  { code: "TR", name: "Turkey", phone: "90" },
  { code: "TM", name: "Turkmenistan", phone: "993" },
  { code: "TC", name: "Turks and Caicos Islands", phone: "1-649" },
  { code: "TV", name: "Tuvalu", phone: "688" },
  { code: "UG", name: "Uganda", phone: "256" },
  { code: "UA", name: "Ukraine", phone: "380" },
  { code: "AE", name: "United Arab Emirates", phone: "971" },
  { code: "UY", name: "Uruguay", phone: "598" },
  { code: "UZ", name: "Uzbekistan", phone: "998" },
  { code: "VU", name: "Vanuatu", phone: "678" },
  { code: "VA", name: "Vatican", phone: "379" },
  { code: "VE", name: "Venezuela", phone: "58" },
  { code: "VN", name: "Vietnam", phone: "84" },
  { code: "WF", name: "Wallis and Futuna", phone: "681" },
  { code: "EH", name: "Western Sahara", phone: "212" },
  { code: "YE", name: "Yemen", phone: "967" },
  { code: "ZM", name: "Zambia", phone: "260" },
  { code: "ZW", name: "Zimbabwe", phone: "263" },
];

================
File: lib/integrations-context.tsx
================
"use client";

import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  useCallback,
} from "react";
import { clientApiRequestJson } from "./client-api";

interface Connector {
  id: string;
  name: string;
  short_name: string;
  auth_type: string;
  description?: string;
  labels: string[];
  config_schema?: any;
  is_active: boolean;
}

interface Connection {
  id: string;
  name: string;
  connector_type: string;
  status: string;
  description?: string;
  created_at: string;
  updated_at: string;
  last_sync_at?: string;
}

interface SyncJob {
  id: string;
  status: "running" | "success" | "failed" | "pending";
  started_at?: string;
  completed_at?: string;
  documents_processed: number;
  documents_added: number;
  documents_updated: number;
  documents_failed: number;
  error_message?: string;
  metadata?: {
    trigger_type: "manual" | "scheduled";
    sync_strategy: "incremental" | "full";
    triggered_by?: string;
  };
}

interface SyncPipeline {
  id: string;
  name: string;
  description?: string;
  status: "active" | "inactive" | "running" | "deleted";
  source_connection_id?: string; // Keep for backward compatibility
  source_connection?: {
    id: string;
    name: string;
    connector_role: string;
  };
  sync_schedule: string;
  last_run_at?: string;
  next_scheduled_run?: string;
  latest_job?: {
    id: string;
    status: "running" | "success" | "failed";
    created_at: string;
  };
  stats?: {
    total_jobs: number;
    successful_jobs: number;
    success_rate: number;
  };
}

interface IntegrationsContextValue {
  // Available connectors
  availableConnectors: Connector[];
  isGoogleDriveAvailable: boolean;

  // Connections
  connections: Connection[];
  googleDriveConnections: Connection[];
  isGoogleDriveConnected: boolean;

  // Syncs
  syncs: SyncPipeline[];
  googleDriveSyncs: SyncPipeline[];
  hasActiveSync: boolean;

  // Loading states
  isLoading: boolean;

  // Actions
  refreshConnectors: () => Promise<void>;
  refreshConnections: () => Promise<void>;
  refreshSyncs: () => Promise<void>;
}

const IntegrationsContext = createContext<IntegrationsContextValue | undefined>(
  undefined
);

export function IntegrationsProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  const [availableConnectors, setAvailableConnectors] = useState<Connector[]>(
    []
  );
  const [connections, setConnections] = useState<Connection[]>([]);
  const [syncs, setSyncs] = useState<SyncPipeline[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const refreshConnectors = useCallback(async () => {
    try {
      const { data, error, ok } = await clientApiRequestJson(
        "/api/proxy/v1/connectors"
      );

      if (!error && data) {
        // API returns array directly, not wrapped in { connectors: [...] }
        const connectors = Array.isArray(data) ? data : [];
        setAvailableConnectors(connectors);
      } else {
        console.error("Failed to fetch connectors:", error);
      }
    } catch (error) {
      console.error("Error refreshing connectors:", error);
    }
  }, []);

  const refreshConnections = useCallback(async () => {
    try {
      const { data, error } = await clientApiRequestJson(
        "/api/proxy/v1/connections"
      );

      if (!error && data) {
        // API returns array directly, not wrapped in { connections: [...] }
        setConnections(Array.isArray(data) ? data : []);
      }
    } catch (error) {
      console.error("Error refreshing connections:", error);
    }
  }, []);

  const refreshSyncs = useCallback(async () => {
    try {
      const { data, error } = await clientApiRequestJson("/api/proxy/v1/syncs");

      if (!error && data) {
        // API returns array directly, not wrapped in { syncs: [...] }
        setSyncs(Array.isArray(data) ? data : []);
      }
    } catch (error) {
      console.error("Error refreshing syncs:", error);
    }
  }, []);

  const loadData = useCallback(async () => {
    setIsLoading(true);
    try {
      await refreshConnectors();
      await refreshConnections();
      await refreshSyncs();
    } finally {
      setIsLoading(false);
    }
  }, [refreshConnectors, refreshConnections, refreshSyncs]);

  // Initial load
  useEffect(() => {
    loadData();
  }, []);

  // Derived state
  const isGoogleDriveAvailable = availableConnectors.some(
    (connector) =>
      connector.short_name === "google_drive" &&
      connector.is_active
  );

  const googleDriveConnections = connections.filter(
    (conn) => conn.connector_type === "google_drive"
  );

  const isGoogleDriveConnected = googleDriveConnections.some(
    (conn) => conn.status === "active"
  );

  const googleDriveSyncs = syncs.filter((sync) => {
    // Handle both source_connection (nested object) and source_connection_id (string)
    const connectionId =
      sync.source_connection?.id || sync.source_connection_id;
    return googleDriveConnections.some((conn) => conn.id === connectionId) && sync.status !== 'deleted';
  });

  const hasActiveSync = googleDriveSyncs.some(
    (sync) => sync.status === "running"
  );

  const value: IntegrationsContextValue = {
    availableConnectors,
    isGoogleDriveAvailable,
    connections,
    googleDriveConnections,
    isGoogleDriveConnected,
    syncs,
    googleDriveSyncs,
    hasActiveSync,
    isLoading,
    refreshConnectors,
    refreshConnections,
    refreshSyncs,
  };

  return (
    <IntegrationsContext.Provider value={value}>
      {children}
    </IntegrationsContext.Provider>
  );
}

export function useIntegrations() {
  const context = useContext(IntegrationsContext);
  if (context === undefined) {
    throw new Error(
      "useIntegrations must be used within an IntegrationsProvider"
    );
  }
  return context;
}

// Export types for use in other components
export type { SyncJob, SyncPipeline, Connection, Connector };

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: public/icons/integrations/google_drive.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64" aria-labelledby="title"
aria-describedby="desc" role="img" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Google Drive</title>
  <desc>A color styled icon from Orion Icon Library.</desc>
  <path data-name="layer3"
  fill="#2a71e9" d="M28.7 40.5L18 59h35.3L64 40.5H28.7z"></path>
  <path data-name="layer2" fill="#fccd48" d="M61 35.3L42.7 3.6H21.3l18.3 31.7H61z"></path>
  <path data-name="layer1" fill="#0ba25e" d="M18.3 8.8L0 40.5 10.7 59 29 27.3 18.3 8.8z"></path>
</svg>

================
File: public/icons/integrations/outlook.svg
================
<?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"><title>file_type_outlook</title><path d="M19.484,7.937v5.477L21.4,14.619a.489.489,0,0,0,.21,0l8.238-5.554a1.174,1.174,0,0,0-.959-1.128Z" style="fill:#0072c6"/><path d="M19.484,15.457l1.747,1.2a.522.522,0,0,0,.543,0c-.3.181,8.073-5.378,8.073-5.378V21.345a1.408,1.408,0,0,1-1.49,1.555H19.483V15.457Z" style="fill:#0072c6"/><path d="M10.44,12.932a1.609,1.609,0,0,0-1.42.838,4.131,4.131,0,0,0-.526,2.218A4.05,4.05,0,0,0,9.02,18.2a1.6,1.6,0,0,0,2.771.022,4.014,4.014,0,0,0,.515-2.2,4.369,4.369,0,0,0-.5-2.281A1.536,1.536,0,0,0,10.44,12.932Z" style="fill:#0072c6"/><path d="M2.153,5.155V26.582L18.453,30V2ZM13.061,19.491a3.231,3.231,0,0,1-2.7,1.361,3.19,3.19,0,0,1-2.64-1.318A5.459,5.459,0,0,1,6.706,16.1a5.868,5.868,0,0,1,1.036-3.616A3.267,3.267,0,0,1,10.486,11.1a3.116,3.116,0,0,1,2.61,1.321,5.639,5.639,0,0,1,1,3.484A5.763,5.763,0,0,1,13.061,19.491Z" style="fill:#0072c6"/></svg>

================
File: public/icons/integrations/slack.svg
================
<?xml version="1.0"?><!DOCTYPE svg  PUBLIC '-//W3C//DTD SVG 1.1//EN'  'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'><svg height="512px" style="enable-background:new 0 0 512 512;" version="1.1" viewBox="0 0 512 512" width="512px" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="_x33_06-slack"><g><path d="M122.643,316.682c0,26.596-21.727,48.323-48.321,48.323c-26.593,0-48.319-21.728-48.319-48.323    c0-26.592,21.727-48.318,48.319-48.318h48.321V316.682z" style="fill:#E01E5A;"/><path d="M146.996,316.682c0-26.592,21.728-48.318,48.321-48.318c26.593,0,48.32,21.727,48.32,48.318V437.68    c0,26.592-21.728,48.319-48.32,48.319c-26.594,0-48.321-21.728-48.321-48.319V316.682z" style="fill:#E01E5A;"/><path d="M195.317,122.643c-26.594,0-48.321-21.728-48.321-48.321c0-26.593,21.728-48.32,48.321-48.32    c26.593,0,48.32,21.728,48.32,48.32v48.321H195.317L195.317,122.643z" style="fill:#36C5F0;"/><path d="M195.317,146.997c26.593,0,48.32,21.727,48.32,48.321c0,26.593-21.728,48.318-48.32,48.318H74.321    c-26.593,0-48.319-21.726-48.319-48.318c0-26.595,21.727-48.321,48.319-48.321H195.317L195.317,146.997z" style="fill:#36C5F0;"/><path d="M389.359,195.318c0-26.595,21.725-48.321,48.32-48.321c26.593,0,48.318,21.727,48.318,48.321    c0,26.593-21.726,48.318-48.318,48.318h-48.32V195.318L389.359,195.318z" style="fill:#2EB67D;"/><path d="M365.004,195.318c0,26.593-21.728,48.318-48.321,48.318c-26.593,0-48.32-21.726-48.32-48.318    V74.321c0-26.593,21.728-48.32,48.32-48.32c26.594,0,48.321,21.728,48.321,48.32V195.318L365.004,195.318z" style="fill:#2EB67D;"/><path d="M316.683,389.358c26.594,0,48.321,21.727,48.321,48.321c0,26.592-21.728,48.319-48.321,48.319    c-26.593,0-48.32-21.728-48.32-48.319v-48.321H316.683z" style="fill:#ECB22E;"/><path d="M316.683,365.005c-26.593,0-48.32-21.728-48.32-48.323c0-26.592,21.728-48.318,48.32-48.318H437.68    c26.593,0,48.318,21.727,48.318,48.318c0,26.596-21.726,48.323-48.318,48.323H316.683z" style="fill:#ECB22E;"/></g></g><g id="Layer_1"/></svg>

================
File: public/icons/integrations/teams.svg
================
<?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2228.833 2073.333">
  <path fill="#5059C9" d="M1554.637,777.5h575.713c54.391,0,98.483,44.092,98.483,98.483c0,0,0,0,0,0v524.398	c0,199.901-162.051,361.952-361.952,361.952h0h-1.711c-199.901,0.028-361.975-162-362.004-361.901c0-0.017,0-0.034,0-0.052V828.971	C1503.167,800.544,1526.211,777.5,1554.637,777.5L1554.637,777.5z"/>
  <circle fill="#5059C9" cx="1943.75" cy="440.583" r="233.25"/>
  <circle fill="#7B83EB" cx="1218.083" cy="336.917" r="336.917"/>
  <path fill="#7B83EB" d="M1667.323,777.5H717.01c-53.743,1.33-96.257,45.931-95.01,99.676v598.105	c-7.505,322.519,247.657,590.16,570.167,598.053c322.51-7.893,577.671-275.534,570.167-598.053V877.176	C1763.579,823.431,1721.066,778.83,1667.323,777.5z"/>
  <path opacity=".1" d="M1244,777.5v838.145c-0.258,38.435-23.549,72.964-59.09,87.598	c-11.316,4.787-23.478,7.254-35.765,7.257H667.613c-6.738-17.105-12.958-34.21-18.142-51.833	c-18.144-59.477-27.402-121.307-27.472-183.49V877.02c-1.246-53.659,41.198-98.19,94.855-99.52H1244z"/>
  <path opacity=".2" d="M1192.167,777.5v889.978c-0.002,12.287-2.47,24.449-7.257,35.765	c-14.634,35.541-49.163,58.833-87.598,59.09H691.975c-8.812-17.105-17.105-34.21-24.362-51.833	c-7.257-17.623-12.958-34.21-18.142-51.833c-18.144-59.476-27.402-121.307-27.472-183.49V877.02	c-1.246-53.659,41.198-98.19,94.855-99.52H1192.167z"/>
  <path opacity=".2" d="M1192.167,777.5v786.312c-0.395,52.223-42.632,94.46-94.855,94.855h-447.84	c-18.144-59.476-27.402-121.307-27.472-183.49V877.02c-1.246-53.659,41.198-98.19,94.855-99.52H1192.167z"/>
  <path opacity=".2" d="M1140.333,777.5v786.312c-0.395,52.223-42.632,94.46-94.855,94.855H649.472	c-18.144-59.476-27.402-121.307-27.472-183.49V877.02c-1.246-53.659,41.198-98.19,94.855-99.52H1140.333z"/>
  <path opacity=".1" d="M1244,509.522v163.275c-8.812,0.518-17.105,1.037-25.917,1.037	c-8.812,0-17.105-0.518-25.917-1.037c-17.496-1.161-34.848-3.937-51.833-8.293c-104.963-24.857-191.679-98.469-233.25-198.003	c-7.153-16.715-12.706-34.071-16.587-51.833h258.648C1201.449,414.866,1243.801,457.217,1244,509.522z"/>
  <path opacity=".2" d="M1192.167,561.355v111.442c-17.496-1.161-34.848-3.937-51.833-8.293	c-104.963-24.857-191.679-98.469-233.25-198.003h190.228C1149.616,466.699,1191.968,509.051,1192.167,561.355z"/>
  <path opacity=".2" d="M1192.167,561.355v111.442c-17.496-1.161-34.848-3.937-51.833-8.293	c-104.963-24.857-191.679-98.469-233.25-198.003h190.228C1149.616,466.699,1191.968,509.051,1192.167,561.355z"/>
  <path opacity=".2" d="M1140.333,561.355v103.148c-104.963-24.857-191.679-98.469-233.25-198.003	h138.395C1097.783,466.699,1140.134,509.051,1140.333,561.355z"/>
  <linearGradient id="a" gradientUnits="userSpaceOnUse" x1="198.099" y1="1683.0726" x2="942.2344" y2="394.2607" gradientTransform="matrix(1 0 0 -1 0 2075.3333)">
    <stop offset="0" stop-color="#5a62c3"/>
    <stop offset=".5" stop-color="#4d55bd"/>
    <stop offset="1" stop-color="#3940ab"/>
  </linearGradient>
  <path fill="url(#a)" d="M95.01,466.5h950.312c52.473,0,95.01,42.538,95.01,95.01v950.312c0,52.473-42.538,95.01-95.01,95.01	H95.01c-52.473,0-95.01-42.538-95.01-95.01V561.51C0,509.038,42.538,466.5,95.01,466.5z"/>
  <path fill="#FFF" d="M820.211,828.193H630.241v517.297H509.211V828.193H320.123V727.844h500.088V828.193z"/>
</svg>

================
File: public/icons/outlook.svg
================
<?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"><title>file_type_outlook</title><path d="M19.484,7.937v5.477L21.4,14.619a.489.489,0,0,0,.21,0l8.238-5.554a1.174,1.174,0,0,0-.959-1.128Z" style="fill:#0072c6"/><path d="M19.484,15.457l1.747,1.2a.522.522,0,0,0,.543,0c-.3.181,8.073-5.378,8.073-5.378V21.345a1.408,1.408,0,0,1-1.49,1.555H19.483V15.457Z" style="fill:#0072c6"/><path d="M10.44,12.932a1.609,1.609,0,0,0-1.42.838,4.131,4.131,0,0,0-.526,2.218A4.05,4.05,0,0,0,9.02,18.2a1.6,1.6,0,0,0,2.771.022,4.014,4.014,0,0,0,.515-2.2,4.369,4.369,0,0,0-.5-2.281A1.536,1.536,0,0,0,10.44,12.932Z" style="fill:#0072c6"/><path d="M2.153,5.155V26.582L18.453,30V2ZM13.061,19.491a3.231,3.231,0,0,1-2.7,1.361,3.19,3.19,0,0,1-2.64-1.318A5.459,5.459,0,0,1,6.706,16.1a5.868,5.868,0,0,1,1.036-3.616A3.267,3.267,0,0,1,10.486,11.1a3.116,3.116,0,0,1,2.61,1.321,5.639,5.639,0,0,1,1,3.484A5.763,5.763,0,0,1,13.061,19.491Z" style="fill:#0072c6"/></svg>

================
File: public/icons/pdf-orig.svg
================
<?xml version="1.0" encoding="utf-8"?>

<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg xmlns="http://www.w3.org/2000/svg"
	 width="800px" height="800px" viewBox="0 0 56 64" enable-background="new 0 0 56 64" xml:space="preserve">
<g>
	<path fill="#8C181A" d="M5.1,0C2.3,0,0,2.3,0,5.1v53.8C0,61.7,2.3,64,5.1,64h45.8c2.8,0,5.1-2.3,5.1-5.1V20.3L37.1,0H5.1z"/>
	<path fill="#6B0D12" d="M56,20.4v1H43.2c0,0-6.3-1.3-6.1-6.7c0,0,0.2,5.7,6,5.7H56z"/>
	<path opacity="0.5" fill="#FFFFFF" enable-background="new    " d="M37.1,0v14.6c0,1.7,1.1,5.8,6.1,5.8H56L37.1,0z"/>
</g>
<path fill="#FFFFFF" d="M14.9,49h-3.3v4.1c0,0.4-0.3,0.7-0.8,0.7c-0.4,0-0.7-0.3-0.7-0.7V42.9c0-0.6,0.5-1.1,1.1-1.1h3.7
	c2.4,0,3.8,1.7,3.8,3.6C18.7,47.4,17.3,49,14.9,49z M14.8,43.1h-3.2v4.6h3.2c1.4,0,2.4-0.9,2.4-2.3C17.2,44,16.2,43.1,14.8,43.1z
	 M25.2,53.8h-3c-0.6,0-1.1-0.5-1.1-1.1v-9.8c0-0.6,0.5-1.1,1.1-1.1h3c3.7,0,6.2,2.6,6.2,6C31.4,51.2,29,53.8,25.2,53.8z M25.2,43.1
	h-2.6v9.3h2.6c2.9,0,4.6-2.1,4.6-4.7C29.9,45.2,28.2,43.1,25.2,43.1z M41.5,43.1h-5.8V47h5.7c0.4,0,0.6,0.3,0.6,0.7
	s-0.3,0.6-0.6,0.6h-5.7v4.8c0,0.4-0.3,0.7-0.8,0.7c-0.4,0-0.7-0.3-0.7-0.7V42.9c0-0.6,0.5-1.1,1.1-1.1h6.2c0.4,0,0.6,0.3,0.6,0.7
	C42.2,42.8,41.9,43.1,41.5,43.1z"/>
</svg>

================
File: public/icons/pdf.svg
================
<svg width="58" height="66" viewBox="0 0 29 33" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_53_336963)">
<path d="M5.44977 4.64435C5.44624 4.36989 5.66776 4.14551 5.94224 4.14551L17.1024 4.14551V9.06515C17.1024 9.33715 17.3229 9.55766 17.5949 9.55766H22.9997L22.9997 26.3622C22.9997 26.6342 22.7792 26.8547 22.5072 26.8547H6.22159C5.95206 26.8547 5.73259 26.638 5.72913 26.3685L5.44977 4.64435Z" fill="#FFF6F6"/>
<path d="M17.0146 9.55143H22.9998L17.0146 4.14551V9.55143Z" fill="#C60000"/>
<path d="M17.0146 4.14551V9.05892C17.0146 9.33093 17.2351 9.55143 17.5071 9.55143H22.9997M17.0146 4.14551L6.31252 4.14551C6.04377 4.14551 5.82464 4.36096 5.82008 4.62967L5.45185 26.3538C5.44718 26.629 5.66902 26.8547 5.94429 26.8547H22.5072C22.7792 26.8547 22.9997 26.6342 22.9997 26.3622V9.55143M17.0146 4.14551L22.9997 9.55143" stroke="#C60000" stroke-width="0.492506"/>
<rect width="15.3633" height="9.45433" transform="translate(3 14.9038)" fill="#C60000"/>
<path d="M4.89003 21.6919V17.1538H6.69265C7.0162 17.1538 7.29143 17.2063 7.51833 17.3114C7.74524 17.4164 7.91751 17.5677 8.03517 17.7652C8.15702 17.9627 8.21795 18.2001 8.21795 18.4774C8.21795 18.7548 8.15702 18.9943 8.03517 19.196C7.91751 19.3934 7.74524 19.5468 7.51833 19.6561C7.29143 19.7653 7.0162 19.8199 6.69265 19.8199H5.2682V19.3661H6.67374C7.0099 19.3661 7.26412 19.2905 7.43639 19.1392C7.61287 18.9838 7.70111 18.7632 7.70111 18.4774C7.70111 18.1917 7.61498 17.9753 7.4427 17.8282C7.27042 17.6812 7.0141 17.6076 6.67374 17.6076H5.40687V21.6919H4.89003ZM9.33514 21.6919V21.2381H10.5516C10.9298 21.2381 11.2554 21.1625 11.5285 21.0112C11.8017 20.8557 12.0118 20.6393 12.1588 20.362C12.3059 20.0847 12.3794 19.7632 12.3794 19.3976C12.3794 19.0363 12.3059 18.7211 12.1588 18.4522C12.0118 18.1833 11.8017 17.9753 11.5285 17.8282C11.2596 17.6812 10.934 17.6076 10.5516 17.6076H9.33514V17.1538H10.5516C11.0264 17.1538 11.4403 17.2484 11.7933 17.4374C12.1462 17.6223 12.4193 17.885 12.6126 18.2253C12.8101 18.5615 12.9089 18.9564 12.9089 19.4103C12.9089 19.8641 12.8101 20.2632 12.6126 20.6078C12.4151 20.9482 12.1399 21.215 11.787 21.4083C11.4382 21.5974 11.0285 21.6919 10.5579 21.6919H9.33514ZM9.0263 21.6919V17.1538H9.54313V21.6919H9.0263ZM13.7658 21.6919V17.1538H14.2826V21.6919H13.7658ZM14.0305 19.7443V19.2905H16.476V19.7443H14.0305ZM14.0305 17.6076V17.1538H16.6525V17.6076H14.0305Z" fill="white"/>
</g>
<defs>
<filter id="filter0_d_53_336963" x="0" y="0.899414" width="28.2461" height="31.2017" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dx="1" dy="1"/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 1 0 0 0 0 0.0277006 0 0 0 0 0.0277006 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_53_336963"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_53_336963" result="shape"/>
</filter>
</defs>
</svg>

================
File: public/icons/pdf1.svg
================
<svg width="58" height="66" viewBox="0 0 29 33" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_53_336963)">
<path d="M5.44977 4.64435C5.44624 4.36989 5.66776 4.14551 5.94224 4.14551L17.1024 4.14551V9.06515C17.1024 9.33715 17.3229 9.55766 17.5949 9.55766H22.9997L22.9997 26.3622C22.9997 26.6342 22.7792 26.8547 22.5072 26.8547H6.22159C5.95206 26.8547 5.73259 26.638 5.72913 26.3685L5.44977 4.64435Z" fill="#FFF6F6"/>
<path d="M17.0146 9.55143H22.9998L17.0146 4.14551V9.55143Z" fill="#C60000"/>
<path d="M17.0146 4.14551V9.05892C17.0146 9.33093 17.2351 9.55143 17.5071 9.55143H22.9997M17.0146 4.14551L6.31252 4.14551C6.04377 4.14551 5.82464 4.36096 5.82008 4.62967L5.45185 26.3538C5.44718 26.629 5.66902 26.8547 5.94429 26.8547H22.5072C22.7792 26.8547 22.9997 26.6342 22.9997 26.3622V9.55143M17.0146 4.14551L22.9997 9.55143" stroke="#C60000" stroke-width="0.492506"/>
<rect width="15.3633" height="9.45433" transform="translate(3 14.9038)" fill="#C60000"/>
<path d="M4.89003 21.6919V17.1538H6.69265C7.0162 17.1538 7.29143 17.2063 7.51833 17.3114C7.74524 17.4164 7.91751 17.5677 8.03517 17.7652C8.15702 17.9627 8.21795 18.2001 8.21795 18.4774C8.21795 18.7548 8.15702 18.9943 8.03517 19.196C7.91751 19.3934 7.74524 19.5468 7.51833 19.6561C7.29143 19.7653 7.0162 19.8199 6.69265 19.8199H5.2682V19.3661H6.67374C7.0099 19.3661 7.26412 19.2905 7.43639 19.1392C7.61287 18.9838 7.70111 18.7632 7.70111 18.4774C7.70111 18.1917 7.61498 17.9753 7.4427 17.8282C7.27042 17.6812 7.0141 17.6076 6.67374 17.6076H5.40687V21.6919H4.89003ZM9.33514 21.6919V21.2381H10.5516C10.9298 21.2381 11.2554 21.1625 11.5285 21.0112C11.8017 20.8557 12.0118 20.6393 12.1588 20.362C12.3059 20.0847 12.3794 19.7632 12.3794 19.3976C12.3794 19.0363 12.3059 18.7211 12.1588 18.4522C12.0118 18.1833 11.8017 17.9753 11.5285 17.8282C11.2596 17.6812 10.934 17.6076 10.5516 17.6076H9.33514V17.1538H10.5516C11.0264 17.1538 11.4403 17.2484 11.7933 17.4374C12.1462 17.6223 12.4193 17.885 12.6126 18.2253C12.8101 18.5615 12.9089 18.9564 12.9089 19.4103C12.9089 19.8641 12.8101 20.2632 12.6126 20.6078C12.4151 20.9482 12.1399 21.215 11.787 21.4083C11.4382 21.5974 11.0285 21.6919 10.5579 21.6919H9.33514ZM9.0263 21.6919V17.1538H9.54313V21.6919H9.0263ZM13.7658 21.6919V17.1538H14.2826V21.6919H13.7658ZM14.0305 19.7443V19.2905H16.476V19.7443H14.0305ZM14.0305 17.6076V17.1538H16.6525V17.6076H14.0305Z" fill="white"/>
</g>
<defs>
<filter id="filter0_d_53_336963" x="0" y="0.899414" width="28.2461" height="31.2017" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dx="1" dy="1"/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 1 0 0 0 0 0.0277006 0 0 0 0 0.0277006 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_53_336963"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_53_336963" result="shape"/>
</filter>
</defs>
</svg>

================
File: public/icons/security.svg
================
<svg width="32" height="48" viewBox="0 0 32 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M31.9581 15.5337V47.4834L9.42845 34.4757V21.9914H23.1968V40.9777L30.7075 45.314V16.7843H1.29249V45.7728H20.2345L8.16709 38.8048L8.79238 37.7207L24.9074 47.0246H0.0419121V15.5337H31.9581ZM10.6802 33.7522L21.945 40.2554V23.2432H10.6802V33.7522Z" fill="#A3BC02"/>
<path d="M16.3941 0.00598937C18.3607 0.0544454 20.3028 0.464606 22.1223 1.21824L22.4841 1.37396C24.2829 2.1714 25.9198 3.29438 27.3127 4.68728L27.5882 4.96878C28.9448 6.3938 30.028 8.05791 30.7818 9.87767L30.9279 10.243C31.6358 12.0787 32 14.0303 32 16V16.6672H0V16C0 13.8991 0.414301 11.8187 1.21824 9.87767L1.37396 9.51591C2.1714 7.71714 3.29438 6.08018 4.68728 4.68728L4.96878 4.41177C6.3938 3.05525 8.05791 1.97201 9.87767 1.21824L10.243 1.0721C12.0787 0.36417 14.0303 8.60976e-08 16 0L16.3941 0.00598937ZM15.2789 1.3512C13.839 1.42208 12.4174 1.70531 11.06 2.19091L10.388 2.45085C8.83116 3.0957 7.39833 4.00265 6.15228 5.13169L5.63001 5.63001C4.26813 6.99188 3.18789 8.60858 2.45085 10.388C1.79909 11.9615 1.42734 13.6347 1.35 15.3328H30.65C30.5836 13.8745 30.3007 12.4343 29.8091 11.06L29.5491 10.388C28.9043 8.83116 27.9974 7.39833 26.8683 6.15228L26.37 5.63001C25.1784 4.43844 23.7921 3.46227 22.2721 2.74313L21.612 2.45085C19.8327 1.71385 17.9259 1.33443 16 1.33443L15.2789 1.3512Z" fill="#A3BC02"/>
</svg>

================
File: public/icons/sharepoint.svg
================
<?xml version="1.0" encoding="utf-8"?>
<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="15.5" cy="11.5" r="9.5" fill="url(#paint0_linear_87_7767)"/>
<circle cx="24" cy="17" r="8" fill="url(#paint1_linear_87_7767)"/>
<mask id="mask0_87_7767" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="10" y="6" width="13" height="24">
<path d="M23 23.5C23 27.0899 20.0899 30 16.5 30C12.9101 30 10 27.0899 10 23.5C10 19.9102 10 6 10 6H23C23 6 23 21.1988 23 23.5Z" fill="#C4C4C4"/>
</mask>
<g mask="url(#mask0_87_7767)">
<circle cx="16.5" cy="23.5" r="6.5" fill="url(#paint2_linear_87_7767)"/>
<path d="M7 12C7 10.3431 8.34315 9 10 9H17C18.6569 9 20 10.3431 20 12V24C20 25.6569 18.6569 27 17 27H7V12Z" fill="#000000" fill-opacity="0.3"/>
</g>
<rect y="7" width="18" height="18" rx="2" fill="url(#paint3_linear_87_7767)"/>
<path d="M13 18.1229C13 16.5726 11.9602 15.8883 9.79665 15.0922C8.10273 14.4637 7.70021 14.2821 7.70021 13.6816C7.70021 13.1648 8.20335 12.8156 9.0587 12.8156C9.93082 12.8156 10.7526 13.1089 11.6751 13.6117L12.6143 11.9497C11.6247 11.3352 10.4507 11 9.02516 11C6.84486 11 5.28512 12.1173 5.28512 13.8212C5.28512 15.567 6.52621 16.1257 8.60587 16.8659C10.2662 17.4525 10.5849 17.7458 10.5849 18.2626C10.5849 18.8771 9.9979 19.1844 9.07547 19.1844C7.98532 19.1844 7.02935 18.8073 6.07338 18.1927L5 19.7849C6.174 20.595 7.63312 21 9.12579 21C11.3732 21 13 19.9385 13 18.1229Z" fill="white"/>
<defs>
<linearGradient id="paint0_linear_87_7767" x1="6" y1="11.5" x2="26.5833" y2="11.5" gradientUnits="userSpaceOnUse">
<stop stop-color="#103A3B"/>
<stop offset="1" stop-color="#116B6E"/>
</linearGradient>
<linearGradient id="paint1_linear_87_7767" x1="18" y1="13" x2="32" y2="21" gradientUnits="userSpaceOnUse">
<stop stop-color="#1D9097"/>
<stop offset="1" stop-color="#29BBC2"/>
</linearGradient>
<linearGradient id="paint2_linear_87_7767" x1="12" y1="21.5" x2="23" y2="26.5" gradientUnits="userSpaceOnUse">
<stop stop-color="#28A6B5"/>
<stop offset="1" stop-color="#31D6EC"/>
</linearGradient>
<linearGradient id="paint3_linear_87_7767" x1="0" y1="16" x2="19.5" y2="16" gradientUnits="userSpaceOnUse">
<stop stop-color="#105557"/>
<stop offset="1" stop-color="#116B6E"/>
</linearGradient>
</defs>
</svg>

================
File: public/icons/slack.svg
================
<?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M26.5002 14.9996C27.8808 14.9996 29 13.8804 29 12.4998C29 11.1192 27.8807 10 26.5001 10C25.1194 10 24 11.1193 24 12.5V14.9996H26.5002ZM19.5 14.9996C20.8807 14.9996 22 13.8803 22 12.4996V5.5C22 4.11929 20.8807 3 19.5 3C18.1193 3 17 4.11929 17 5.5V12.4996C17 13.8803 18.1193 14.9996 19.5 14.9996Z" fill="#2EB67D"/>
<path d="M5.49979 17.0004C4.11919 17.0004 3 18.1196 3 19.5002C3 20.8808 4.1193 22 5.49989 22C6.8806 22 8 20.8807 8 19.5V17.0004H5.49979ZM12.5 17.0004C11.1193 17.0004 10 18.1197 10 19.5004V26.5C10 27.8807 11.1193 29 12.5 29C13.8807 29 15 27.8807 15 26.5V19.5004C15 18.1197 13.8807 17.0004 12.5 17.0004Z" fill="#E01E5A"/>
<path d="M17.0004 26.5002C17.0004 27.8808 18.1196 29 19.5002 29C20.8808 29 22 27.8807 22 26.5001C22 25.1194 20.8807 24 19.5 24L17.0004 24L17.0004 26.5002ZM17.0004 19.5C17.0004 20.8807 18.1197 22 19.5004 22L26.5 22C27.8807 22 29 20.8807 29 19.5C29 18.1193 27.8807 17 26.5 17L19.5004 17C18.1197 17 17.0004 18.1193 17.0004 19.5Z" fill="#ECB22E"/>
<path d="M14.9996 5.49979C14.9996 4.11919 13.8804 3 12.4998 3C11.1192 3 10 4.1193 10 5.49989C10 6.88061 11.1193 8 12.5 8L14.9996 8L14.9996 5.49979ZM14.9996 12.5C14.9996 11.1193 13.8803 10 12.4996 10L5.5 10C4.11929 10 3 11.1193 3 12.5C3 13.8807 4.11929 15 5.5 15L12.4996 15C13.8803 15 14.9996 13.8807 14.9996 12.5Z" fill="#36C5F0"/>
</svg>

================
File: public/placeholder-logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="215" height="48" fill="none"><path fill="#000" d="M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z"/><path fill="#171717" fill-rule="evenodd" d="m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z" clip-rule="evenodd"/></svg>

================
File: public/placeholder.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>

================
File: styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}
body[data-scroll-locked] {
  overflow: visible !important;
  --removed-body-scroll-bar-size: 0 !important;
  margin-right: 0 !important;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 76 21% 21%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules

# next.js
/.next/
/out/

# production
/build

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: .repomixignore
================
components/
.claude/

FRONTEND_BACKEND_INTEGRATION_PLAN.md
FRONTEND-PAGES-GUIDE.md
next-logs.txt
next.config.mjs
openapi.json

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: middleware.ts
================
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { jwtDecode } from 'jwt-decode';

// Define public routes that don't require authentication
const publicRoutes = [
  '/',
  '/login',
  '/signup',
  '/check-domain',
  '/invite',
  '/forgot-password',
  '/reset-password',
  '/waitlist',
  '/terms-of-service',
  '/privacy-policy',
];

// Define API routes that don't require authentication
const publicApiRoutes = [
  '/api/auth/login',
  '/api/auth/signup',
  '/api/auth/check-domain',
  '/api/auth/forgot-password',
  '/api/invites/validate',
  '/api/waitlist',
];

// JWT token payload interface
interface JWTPayload {
  exp: number;
  iat: number;
  sub?: string;
  [key: string]: any;
}

// Helper to check if tokens are valid
function hasValidTokens(accessToken: string | undefined, refreshToken: string | undefined): boolean {
  // If no tokens, definitely not valid
  if (!accessToken || !refreshToken) return false;
  
  try {
    // Decode and check access token expiration
    const decoded = jwtDecode<JWTPayload>(accessToken);
    const now = Math.floor(Date.now() / 1000);
    
    // Check if token is expired (with 1 minute buffer)
    if (decoded.exp && decoded.exp < (now + 60)) {
      // Token is expired or expiring soon, still valid if we have refresh token
      return !!refreshToken;
    }
    
    return true;
  } catch (error) {
    // If we can't decode the token, assume it's invalid
    // But still valid if we have a refresh token to recover
    return !!refreshToken;
  }
}

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  const accessToken = request.cookies.get('auth_token')?.value;
  const refreshToken = request.cookies.get('refresh_token')?.value;
  
  // Define auth pages that logged-in users shouldn't access
  const authPages = ['/login', '/signup', '/forgot-password', '/reset-password'];
  
  // Check if the path is a public route
  const isPublicRoute = publicRoutes.includes(pathname) || 
    publicRoutes.some(route => pathname.startsWith(route + '/'));
  
  // Check if the path is a public API route
  const isPublicApiRoute = publicApiRoutes.includes(pathname) ||
    publicApiRoutes.some(route => pathname.startsWith(route + '/'));
  
  // Check if it's an auth page
  const isAuthPage = authPages.includes(pathname) || 
    authPages.some(page => pathname.startsWith(page + '/'));
  
  // Allow static files and Next.js internals
  if (pathname.startsWith('/_next') || pathname.includes('.')) {
    return NextResponse.next();
  }
  
  // Check if tokens are valid
  const hasTokens = hasValidTokens(accessToken, refreshToken);
  
  // If user has valid tokens and tries to access auth pages, redirect to dashboard
  if (hasTokens && isAuthPage) {
    return NextResponse.redirect(new URL('/dashboard', request.url));
  }
  
  // If no valid tokens and trying to access protected route
  if (!hasTokens && !isPublicRoute && !isPublicApiRoute) {
    if (pathname.startsWith('/api/')) {
      // For API routes, return 401
      return NextResponse.json(
        { 
          success: false,
          error: 'Authentication required',
          message: 'Please login to access this resource'
        },
        { status: 401 }
      );
    }
    
    // For page routes, redirect to login
    const loginUrl = new URL('/login', request.url);
    if (pathname !== '/') {
      loginUrl.searchParams.set('redirect', pathname);
    }
    return NextResponse.redirect(loginUrl);
  }
  
  
  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!_next/static|_next/image|favicon.ico|public/).*)',
  ],
};

================
File: package.json
================
{
  "name": "monolith-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@marsidev/react-turnstile": "^0.6.0",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "1.1.1",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "embla-carousel-react": "8.5.1",
    "framer-motion": "^12.12.2",
    "input-otp": "1.4.1",
    "jwt-decode": "^4.0.0",
    "lucide-react": "^0.454.0",
    "markdown-to-jsx": "^7.7.8",
    "next": "15.2.4",
    "next-themes": "^0.4.4",
    "react": "^19",
    "react-day-picker": "9.7.0",
    "react-dom": "^19",
    "react-dropzone": "^14.3.8",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "recharts": "2.15.0",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^1.1.2",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
# Monolith Frontend

This project is the frontend for the Monolith SaaS application, built with Next.js, TypeScript, and Tailwind CSS. It includes features like a waitlist form with Cloudflare Turnstile verification, a main landing page, and other user-facing interfaces.

## Getting Started

These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.

### Prerequisites

- Node.js (v18 or later recommended)
- npm

### Installation

1.  **Clone the repository:**
    ```bash
    git clone <your-repository-url>
    cd monolith-new-client
    ```

2.  **Install dependencies:**
    ```bash
    npm install
    ```

3.  **Set up environment variables:**
    Create a `.env.local` file in the root of the project by copying the example below. **Important:** Add this file to your `.gitignore` if it's not already there to prevent committing sensitive keys.

    ```env
    # .env.local

    # Cloudflare Turnstile Keys (replace with your actual keys or test keys)
    # For local testing with "always passes" keys:
    NEXT_PUBLIC_TURNSTILE_SITE_KEY=1x00000000000000000000AA
    TURNSTILE_SECRET_KEY=1x0000000000000000000000000000000AA0000000

    # Backend API URL
    FASTAPI_BASE_URL=http://localhost:8000 # Or your actual backend URL
    ```
    - Get your Cloudflare Turnstile keys from the [Cloudflare Dashboard](https://dash.cloudflare.com/).
    - `FASTAPI_BASE_URL` should point to your running backend service.

4.  **Run the development server:**
    ```bash
    npm run dev
    ```
    Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## Available Scripts

In the project directory, you can run:

-   `npm run dev`:
    Runs the app in development mode.
-   `npm run build`:
    Builds the app for production to the `.next` folder.
-   `npm run start`:
    Starts the production server (requires a build first).
-   `npm run lint`:
    Runs Next.js's built-in ESLint checks.

## Key Technologies Used

-   [Next.js](https://nextjs.org/) - React framework for production
-   [TypeScript](https://www.typescriptlang.org/) - Typed JavaScript
-   [Tailwind CSS](https://tailwindcss.com/) - Utility-first CSS framework
-   [shadcn/ui](https://ui.shadcn.com/) - UI components built with Radix UI and Tailwind CSS
-   [Lucide React](https://lucide.dev/) - Icon library
-   [Framer Motion](https://www.framer.com/motion/) - Animation library
-   [React Hook Form](https://react-hook-form.com/) - Form handling
-   [Zod](https://zod.dev/) - TypeScript-first schema validation
-   [Cloudflare Turnstile](https://www.cloudflare.com/products/turnstile/) - Bot protection

## Folder Structure Overview

```
monolith-new-client/
├── app/ # Next.js App Router: pages, layouts, API routes
│   ├── api/ # Server-side API routes
│   ├── (landing)/ # Route groups for landing pages
│   └── ... # Other pages and layouts
├── components/ # Shared React components
│   ├── landing/ # Components specific to the landing page
│   └── ui/ # General UI components (likely from shadcn/ui)
├── lib/ # Utility functions, constants, etc.
│   └── countries.ts # List of countries for forms
├── public/ # Static assets (images, fonts, etc.)
├── .env.local # Environment variables (gitignored)
├── next.config.mjs # Next.js configuration
├── package.json # Project dependencies and scripts
├── tsconfig.json # TypeScript configuration
└── tailwind.config.ts # Tailwind CSS configuration
```

## Deployment

This project is configured for deployment on [Vercel](https://vercel.com/) (see `vercel.json`).

When deploying, ensure you set the required environment variables (`NEXT_PUBLIC_TURNSTILE_SITE_KEY`, `TURNSTILE_SECRET_KEY`, `FASTAPI_BASE_URL`) in your Vercel project settings.

---

© 2025 Monolith Inc. All rights reserved.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss"

const config: Config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        "custom-dark-green": "#3E4128",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
      },
      fontFamily: {
        sans: ["var(--font-instrument-sans)"],
        serif: ["var(--font-instrument-serif)"],
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
export default config

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: vercel.json
================
{
    "build": {
      "env": {
        "NODEJS_PACKAGE_MANAGER": "npm"
      }
    }
  }



================================================================
End of Codebase
================================================================
